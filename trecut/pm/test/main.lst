
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  00002752  000027e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002752  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000278  00800160  00800160  00002846  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00002846  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002f3  00000000  00000000  000028c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001c09  00000000  00000000  00002bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008e9  00000000  00000000  000047c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001743  00000000  00000000  000050ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c0  00000000  00000000  000067f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000557  00000000  00000000  00006ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001a82  00000000  00000000  00007007  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00008a89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 a3 03 	jmp	0x746	; 0x746 <__vector_9>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_16>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e2 e5       	ldi	r30, 0x52	; 82
      90:	f7 e2       	ldi	r31, 0x27	; 39
      92:	02 c0       	rjmp	.+4      	; 0x98 <.do_copy_data_start>

00000094 <.do_copy_data_loop>:
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0

00000098 <.do_copy_data_start>:
      98:	a0 36       	cpi	r26, 0x60	; 96
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <.do_copy_data_loop>

0000009e <__do_clear_bss>:
      9e:	13 e0       	ldi	r17, 0x03	; 3
      a0:	a0 e6       	ldi	r26, 0x60	; 96
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a8 3d       	cpi	r26, 0xD8	; 216
      aa:	b1 07       	cpc	r27, r17
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <main>
      b2:	0c 94 a7 13 	jmp	0x274e	; 0x274e <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <__vector_16>:

volatile uint8_t sync = 0;


ISR(TIMER0_COMPA_vect)
{
      ba:	1f 92       	push	r1
      bc:	0f 92       	push	r0
      be:	0f b6       	in	r0, 0x3f	; 63
      c0:	0f 92       	push	r0
      c2:	11 24       	eor	r1, r1
      c4:	2f 93       	push	r18
      c6:	3f 93       	push	r19
      c8:	4f 93       	push	r20
      ca:	8f 93       	push	r24
      cc:	9f 93       	push	r25
      ce:	ef 93       	push	r30
      d0:	ff 93       	push	r31
	
	
	if(sync == 1)
      d2:	40 91 62 01 	lds	r20, 0x0162
      d6:	41 30       	cpi	r20, 0x01	; 1
      d8:	09 f0       	breq	.+2      	; 0xdc <__vector_16+0x22>
      da:	45 c0       	rjmp	.+138    	; 0x166 <__vector_16+0xac>
	{
		
		if(read1 == 1)
      dc:	80 91 5f 01 	lds	r24, 0x015F
      e0:	81 30       	cpi	r24, 0x01	; 1
      e2:	e9 f4       	brne	.+58     	; 0x11e <__vector_16+0x64>
		{
			OCR1A = (unsigned char)Buff1[counter++];
      e4:	20 91 60 01 	lds	r18, 0x0160
      e8:	30 91 61 01 	lds	r19, 0x0161
      ec:	f9 01       	movw	r30, r18
      ee:	e8 52       	subi	r30, 0x28	; 40
      f0:	fd 4f       	sbci	r31, 0xFD	; 253
      f2:	80 81       	ld	r24, Z
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	90 93 89 00 	sts	0x0089, r25
      fa:	80 93 88 00 	sts	0x0088, r24
      fe:	2f 5f       	subi	r18, 0xFF	; 255
     100:	3f 4f       	sbci	r19, 0xFF	; 255
     102:	30 93 61 01 	sts	0x0161, r19
     106:	20 93 60 01 	sts	0x0160, r18
			
			if(counter == 256)
     10a:	80 91 60 01 	lds	r24, 0x0160
     10e:	90 91 61 01 	lds	r25, 0x0161
     112:	80 50       	subi	r24, 0x00	; 0
     114:	91 40       	sbci	r25, 0x01	; 1
     116:	39 f5       	brne	.+78     	; 0x166 <__vector_16+0xac>
			{
				//PORTC = 0x80;
				read1 = 0;
     118:	10 92 5f 01 	sts	0x015F, r1
     11c:	20 c0       	rjmp	.+64     	; 0x15e <__vector_16+0xa4>
				counter = 0;
			}
		}
		else if(read1 == 0)
     11e:	80 91 5f 01 	lds	r24, 0x015F
     122:	88 23       	and	r24, r24
     124:	01 f5       	brne	.+64     	; 0x166 <__vector_16+0xac>
		{
			OCR1A = (unsigned char)Buff2[counter++];
     126:	20 91 60 01 	lds	r18, 0x0160
     12a:	30 91 61 01 	lds	r19, 0x0161
     12e:	f9 01       	movw	r30, r18
     130:	ee 57       	subi	r30, 0x7E	; 126
     132:	fe 4f       	sbci	r31, 0xFE	; 254
     134:	80 81       	ld	r24, Z
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	90 93 89 00 	sts	0x0089, r25
     13c:	80 93 88 00 	sts	0x0088, r24
     140:	2f 5f       	subi	r18, 0xFF	; 255
     142:	3f 4f       	sbci	r19, 0xFF	; 255
     144:	30 93 61 01 	sts	0x0161, r19
     148:	20 93 60 01 	sts	0x0160, r18
			if(counter == 256)
     14c:	80 91 60 01 	lds	r24, 0x0160
     150:	90 91 61 01 	lds	r25, 0x0161
     154:	80 50       	subi	r24, 0x00	; 0
     156:	91 40       	sbci	r25, 0x01	; 1
     158:	31 f4       	brne	.+12     	; 0x166 <__vector_16+0xac>
			{
				//PORTC = 0x40;
				read1 = 1;
     15a:	40 93 5f 01 	sts	0x015F, r20
				counter = 0;
     15e:	10 92 61 01 	sts	0x0161, r1
     162:	10 92 60 01 	sts	0x0160, r1
			}
		}
		
		
	}
}
     166:	ff 91       	pop	r31
     168:	ef 91       	pop	r30
     16a:	9f 91       	pop	r25
     16c:	8f 91       	pop	r24
     16e:	4f 91       	pop	r20
     170:	3f 91       	pop	r19
     172:	2f 91       	pop	r18
     174:	0f 90       	pop	r0
     176:	0f be       	out	0x3f, r0	; 63
     178:	0f 90       	pop	r0
     17a:	1f 90       	pop	r1
     17c:	18 95       	reti

0000017e <Timer0_init>:
	}
}

void Timer0_init(void)
{
	TCCR0A = _BV(WGM01);
     17e:	82 e0       	ldi	r24, 0x02	; 2
     180:	84 bd       	out	0x24, r24	; 36
	TCCR0B = _BV(CS01);//CTC, FCPU/8
     182:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = _BV(OCIE0A);
     184:	80 93 6e 00 	sts	0x006E, r24
}
     188:	08 95       	ret

0000018a <Timer1_init>:

void Timer1_init(void)
{
	TCCR1A = _BV(COM1A1)|_BV(COM1A0)|_BV(WGM10);
     18a:	81 ec       	ldi	r24, 0xC1	; 193
     18c:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = _BV(WGM12)|_BV(CS10);
     190:	89 e0       	ldi	r24, 0x09	; 9
     192:	80 93 81 00 	sts	0x0081, r24
}
     196:	08 95       	ret

00000198 <Timer2_init>:

void Timer2_init(void)
{
	TCCR2A = _BV(WGM21);
     198:	82 e0       	ldi	r24, 0x02	; 2
     19a:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = _BV(CS22)|_BV(CS20);//CTC, FCPU/8
     19e:	95 e0       	ldi	r25, 0x05	; 5
     1a0:	90 93 b1 00 	sts	0x00B1, r25
	TIMSK2 = _BV(OCIE2A);
     1a4:	80 93 70 00 	sts	0x0070, r24
	OCR2A = 125;
     1a8:	8d e7       	ldi	r24, 0x7D	; 125
     1aa:	80 93 b3 00 	sts	0x00B3, r24
}
     1ae:	08 95       	ret

000001b0 <set_time>:
	return res;
}

void set_time(uint8_t h, uint8_t m, uint8_t s, uint16_t mili)
{
	TIMSK2 = 0;
     1b0:	e0 e7       	ldi	r30, 0x70	; 112
     1b2:	f0 e0       	ldi	r31, 0x00	; 0
     1b4:	10 82       	st	Z, r1
	
	hours = h;
     1b6:	80 93 ab 02 	sts	0x02AB, r24
	minutes = m;
     1ba:	60 93 aa 02 	sts	0x02AA, r22
	seconds = s;
     1be:	40 93 94 02 	sts	0x0294, r20
	miliseconds = mili;
     1c2:	30 93 83 02 	sts	0x0283, r19
     1c6:	20 93 82 02 	sts	0x0282, r18
	
	TIMSK2 = _BV(OCIE2A);
     1ca:	82 e0       	ldi	r24, 0x02	; 2
     1cc:	80 83       	st	Z, r24
}
     1ce:	08 95       	ret

000001d0 <main>:


int main (void)
{
	
	LCD_init();
     1d0:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <LCD_init>
	LCD_init();
     1d4:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <LCD_init>
	LCD_print("START");
     1d8:	80 e0       	ldi	r24, 0x00	; 0
     1da:	91 e0       	ldi	r25, 0x01	; 1
     1dc:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <LCD_print>
			
		while(1) 
		{
			//task1();
			//task2();
			LCD_print("test");
     1e0:	86 e0       	ldi	r24, 0x06	; 6
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	fb cf       	rjmp	.-10     	; 0x1dc <main+0xc>

000001e6 <play>:
	TIMSK2 = _BV(OCIE2A);
	OCR2A = 125;
}

static UINT play (const char *fn)
{
     1e6:	ef 92       	push	r14
     1e8:	ff 92       	push	r15
     1ea:	0f 93       	push	r16
     1ec:	1f 93       	push	r17
	unsigned char read2;

	
	uint16_t size = 256;
	
	if ((res = pf_open(fn)) == FR_OK) {
     1ee:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <pf_open>
     1f2:	bc 01       	movw	r22, r24
     1f4:	00 97       	sbiw	r24, 0x00	; 0
     1f6:	09 f0       	breq	.+2      	; 0x1fa <play+0x14>
     1f8:	2c c1       	rjmp	.+600    	; 0x452 <play+0x26c>
	}
}

void Timer0_init(void)
{
	TCCR0A = _BV(WGM01);
     1fa:	82 e0       	ldi	r24, 0x02	; 2
     1fc:	84 bd       	out	0x24, r24	; 36
	TCCR0B = _BV(CS01);//CTC, FCPU/8
     1fe:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = _BV(OCIE0A);
     200:	80 93 6e 00 	sts	0x006E, r24
}

void Timer1_init(void)
{
	TCCR1A = _BV(COM1A1)|_BV(COM1A0)|_BV(WGM10);
     204:	81 ec       	ldi	r24, 0xC1	; 193
     206:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = _BV(WGM12)|_BV(CS10);
     20a:	89 e0       	ldi	r24, 0x09	; 9
     20c:	80 93 81 00 	sts	0x0081, r24
DWORD load_header (void)	/* 0:Invalid format, 1:I/O error, >1:Number of samples */
{
	DWORD sz;


	if (pf_read(Buff1, 12, &rb)) return 1;	/* Load file header (12 bytes) */
     210:	88 ed       	ldi	r24, 0xD8	; 216
     212:	92 e0       	ldi	r25, 0x02	; 2
     214:	6c e0       	ldi	r22, 0x0C	; 12
     216:	70 e0       	ldi	r23, 0x00	; 0
     218:	40 e8       	ldi	r20, 0x80	; 128
     21a:	51 e0       	ldi	r21, 0x01	; 1
     21c:	0e 94 c3 09 	call	0x1386	; 0x1386 <pf_read>
     220:	89 2b       	or	r24, r25
     222:	31 f0       	breq	.+12     	; 0x230 <play+0x4a>
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	e8 2e       	mov	r14, r24
     228:	f1 2c       	mov	r15, r1
     22a:	01 2d       	mov	r16, r1
     22c:	11 2d       	mov	r17, r1
     22e:	b3 c0       	rjmp	.+358    	; 0x396 <play+0x1b0>

	if (rb != 12 || LD_DWORD(Buff1+8) != FCC('W','A','V','E')) return 0;
     230:	80 91 80 01 	lds	r24, 0x0180
     234:	90 91 81 01 	lds	r25, 0x0181
     238:	0c 97       	sbiw	r24, 0x0c	; 12
     23a:	09 f0       	breq	.+2      	; 0x23e <play+0x58>
     23c:	14 c1       	rjmp	.+552    	; 0x466 <play+0x280>
     23e:	80 91 e0 02 	lds	r24, 0x02E0
     242:	90 91 e1 02 	lds	r25, 0x02E1
     246:	a0 91 e2 02 	lds	r26, 0x02E2
     24a:	b0 91 e3 02 	lds	r27, 0x02E3
     24e:	87 55       	subi	r24, 0x57	; 87
     250:	91 44       	sbci	r25, 0x41	; 65
     252:	a6 45       	sbci	r26, 0x56	; 86
     254:	b5 44       	sbci	r27, 0x45	; 69
     256:	09 f0       	breq	.+2      	; 0x25a <play+0x74>
     258:	06 c1       	rjmp	.+524    	; 0x466 <play+0x280>

	for (;;) {
		pf_read(Buff1, 8, &rb);			/* Get Chunk ID and size */
     25a:	88 ed       	ldi	r24, 0xD8	; 216
     25c:	92 e0       	ldi	r25, 0x02	; 2
     25e:	68 e0       	ldi	r22, 0x08	; 8
     260:	70 e0       	ldi	r23, 0x00	; 0
     262:	40 e8       	ldi	r20, 0x80	; 128
     264:	51 e0       	ldi	r21, 0x01	; 1
     266:	0e 94 c3 09 	call	0x1386	; 0x1386 <pf_read>
		if (rb != 8) return 0;
     26a:	80 91 80 01 	lds	r24, 0x0180
     26e:	90 91 81 01 	lds	r25, 0x0181
     272:	08 97       	sbiw	r24, 0x08	; 8
     274:	09 f0       	breq	.+2      	; 0x278 <play+0x92>
     276:	f7 c0       	rjmp	.+494    	; 0x466 <play+0x280>
		sz = LD_DWORD(&Buff1[4]);		/* Chunk size */
     278:	e0 90 dc 02 	lds	r14, 0x02DC
     27c:	f0 90 dd 02 	lds	r15, 0x02DD
     280:	00 91 de 02 	lds	r16, 0x02DE
     284:	10 91 df 02 	lds	r17, 0x02DF

		switch (LD_DWORD(&Buff1[0])) {	/* FCC */
     288:	80 91 d8 02 	lds	r24, 0x02D8
     28c:	90 91 d9 02 	lds	r25, 0x02D9
     290:	a0 91 da 02 	lds	r26, 0x02DA
     294:	b0 91 db 02 	lds	r27, 0x02DB
     298:	8c 34       	cpi	r24, 0x4C	; 76
     29a:	29 e4       	ldi	r18, 0x49	; 73
     29c:	92 07       	cpc	r25, r18
     29e:	23 e5       	ldi	r18, 0x53	; 83
     2a0:	a2 07       	cpc	r26, r18
     2a2:	24 e5       	ldi	r18, 0x54	; 84
     2a4:	b2 07       	cpc	r27, r18
     2a6:	09 f4       	brne	.+2      	; 0x2aa <play+0xc4>
     2a8:	5e c0       	rjmp	.+188    	; 0x366 <play+0x180>
     2aa:	8d 34       	cpi	r24, 0x4D	; 77
     2ac:	29 e4       	ldi	r18, 0x49	; 73
     2ae:	92 07       	cpc	r25, r18
     2b0:	23 e5       	ldi	r18, 0x53	; 83
     2b2:	a2 07       	cpc	r26, r18
     2b4:	24 e5       	ldi	r18, 0x54	; 84
     2b6:	b2 07       	cpc	r27, r18
     2b8:	38 f4       	brcc	.+14     	; 0x2c8 <play+0xe2>
     2ba:	86 56       	subi	r24, 0x66	; 102
     2bc:	9d 46       	sbci	r25, 0x6D	; 109
     2be:	a4 47       	sbci	r26, 0x74	; 116
     2c0:	b0 42       	sbci	r27, 0x20	; 32
     2c2:	09 f0       	breq	.+2      	; 0x2c6 <play+0xe0>
     2c4:	d0 c0       	rjmp	.+416    	; 0x466 <play+0x280>
     2c6:	10 c0       	rjmp	.+32     	; 0x2e8 <play+0x102>
     2c8:	84 36       	cpi	r24, 0x64	; 100
     2ca:	21 e6       	ldi	r18, 0x61	; 97
     2cc:	92 07       	cpc	r25, r18
     2ce:	24 e7       	ldi	r18, 0x74	; 116
     2d0:	a2 07       	cpc	r26, r18
     2d2:	21 e6       	ldi	r18, 0x61	; 97
     2d4:	b2 07       	cpc	r27, r18
     2d6:	09 f4       	brne	.+2      	; 0x2da <play+0xf4>
     2d8:	57 c0       	rjmp	.+174    	; 0x388 <play+0x1a2>
     2da:	86 56       	subi	r24, 0x66	; 102
     2dc:	91 46       	sbci	r25, 0x61	; 97
     2de:	a3 46       	sbci	r26, 0x63	; 99
     2e0:	b4 47       	sbci	r27, 0x74	; 116
     2e2:	09 f0       	breq	.+2      	; 0x2e6 <play+0x100>
     2e4:	c0 c0       	rjmp	.+384    	; 0x466 <play+0x280>
     2e6:	3f c0       	rjmp	.+126    	; 0x366 <play+0x180>
		case FCC('f','m','t',' ') :					/* 'fmt ' chunk */
			if (sz > 100 || sz < 16) return 0;		/* Check chunk size */
     2e8:	d8 01       	movw	r26, r16
     2ea:	c7 01       	movw	r24, r14
     2ec:	40 97       	sbiw	r24, 0x10	; 16
     2ee:	a1 09       	sbc	r26, r1
     2f0:	b1 09       	sbc	r27, r1
     2f2:	85 35       	cpi	r24, 0x55	; 85
     2f4:	91 05       	cpc	r25, r1
     2f6:	a1 05       	cpc	r26, r1
     2f8:	b1 05       	cpc	r27, r1
     2fa:	08 f0       	brcs	.+2      	; 0x2fe <play+0x118>
     2fc:	b4 c0       	rjmp	.+360    	; 0x466 <play+0x280>
			pf_read(Buff1, sz, &rb);					/* Get content */
     2fe:	88 ed       	ldi	r24, 0xD8	; 216
     300:	92 e0       	ldi	r25, 0x02	; 2
     302:	b7 01       	movw	r22, r14
     304:	40 e8       	ldi	r20, 0x80	; 128
     306:	51 e0       	ldi	r21, 0x01	; 1
     308:	0e 94 c3 09 	call	0x1386	; 0x1386 <pf_read>
			if (rb != sz) return 0;
     30c:	80 91 80 01 	lds	r24, 0x0180
     310:	90 91 81 01 	lds	r25, 0x0181
     314:	a0 e0       	ldi	r26, 0x00	; 0
     316:	b0 e0       	ldi	r27, 0x00	; 0
     318:	8e 15       	cp	r24, r14
     31a:	9f 05       	cpc	r25, r15
     31c:	a0 07       	cpc	r26, r16
     31e:	b1 07       	cpc	r27, r17
     320:	09 f0       	breq	.+2      	; 0x324 <play+0x13e>
     322:	a1 c0       	rjmp	.+322    	; 0x466 <play+0x280>
			if (Buff1[0] != 1) return 0;				/* Check coding type (1) */
     324:	80 91 d8 02 	lds	r24, 0x02D8
     328:	81 30       	cpi	r24, 0x01	; 1
     32a:	09 f0       	breq	.+2      	; 0x32e <play+0x148>
     32c:	9c c0       	rjmp	.+312    	; 0x466 <play+0x280>
			if (Buff1[2] != 1 && Buff1[2] != 2) 		/* Check channels (1/2) */
     32e:	80 91 da 02 	lds	r24, 0x02DA
     332:	81 50       	subi	r24, 0x01	; 1
     334:	82 30       	cpi	r24, 0x02	; 2
     336:	08 f0       	brcs	.+2      	; 0x33a <play+0x154>
     338:	96 c0       	rjmp	.+300    	; 0x466 <play+0x280>
				return 0;
			
			if (Buff1[14] != 8 && Buff1[14] != 16)	/* Check resolution (8/16) */
     33a:	80 91 e6 02 	lds	r24, 0x02E6
     33e:	88 30       	cpi	r24, 0x08	; 8
     340:	19 f0       	breq	.+6      	; 0x348 <play+0x162>
     342:	80 31       	cpi	r24, 0x10	; 16
     344:	09 f0       	breq	.+2      	; 0x348 <play+0x162>
     346:	8f c0       	rjmp	.+286    	; 0x466 <play+0x280>
				return 0;
			
			OCR0A = (BYTE)(F_CPU/8/LD_WORD(&Buff1[4]))-1;	/* Sampling freq */
     348:	20 91 dc 02 	lds	r18, 0x02DC
     34c:	30 91 dd 02 	lds	r19, 0x02DD
     350:	40 e0       	ldi	r20, 0x00	; 0
     352:	50 e0       	ldi	r21, 0x00	; 0
     354:	60 e8       	ldi	r22, 0x80	; 128
     356:	74 e8       	ldi	r23, 0x84	; 132
     358:	8e e1       	ldi	r24, 0x1E	; 30
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	0e 94 8f 10 	call	0x211e	; 0x211e <__divmodsi4>
     360:	21 50       	subi	r18, 0x01	; 1
     362:	27 bd       	out	0x27, r18	; 39
     364:	7a cf       	rjmp	.-268    	; 0x25a <play+0x74>
		case FCC('d','a','t','a') :				/* 'data' chunk (start to play) */
			return sz;

		case FCC('L','I','S','T') :				/* 'LIST' chunk (skip) */
		case FCC('f','a','c','t') :				/* 'fact' chunk (skip) */
			pf_lseek(Fs.fptr + sz);
     366:	80 91 c4 02 	lds	r24, 0x02C4
     36a:	90 91 c5 02 	lds	r25, 0x02C5
     36e:	a0 91 c6 02 	lds	r26, 0x02C6
     372:	b0 91 c7 02 	lds	r27, 0x02C7
     376:	e8 0e       	add	r14, r24
     378:	f9 1e       	adc	r15, r25
     37a:	0a 1f       	adc	r16, r26
     37c:	1b 1f       	adc	r17, r27
     37e:	c8 01       	movw	r24, r16
     380:	b7 01       	movw	r22, r14
     382:	0e 94 23 06 	call	0xc46	; 0xc46 <pf_lseek>
     386:	69 cf       	rjmp	.-302    	; 0x25a <play+0x74>
	
		Timer0_init();
		Timer1_init();
		
		sz = load_header();			/* Load file header */
		if (sz < 256) return (UINT)sz;
     388:	8f ef       	ldi	r24, 0xFF	; 255
     38a:	e8 16       	cp	r14, r24
     38c:	f1 04       	cpc	r15, r1
     38e:	01 05       	cpc	r16, r1
     390:	11 05       	cpc	r17, r1
     392:	09 f0       	breq	.+2      	; 0x396 <play+0x1b0>
     394:	10 f4       	brcc	.+4      	; 0x39a <play+0x1b4>
     396:	b7 01       	movw	r22, r14
     398:	60 c0       	rjmp	.+192    	; 0x45a <play+0x274>
		
		
		FifoCt = 0; FifoRi = 0; FifoWi = 0;		/* Reset FIFO */
     39a:	10 92 a9 02 	sts	0x02A9, r1
     39e:	10 92 69 01 	sts	0x0169, r1
     3a2:	10 92 68 01 	sts	0x0168, r1
		pf_read(Buff1, 512 - (Fs.fptr % 512), &rb);	/* Snip sector unaligned part */
     3a6:	80 91 c4 02 	lds	r24, 0x02C4
     3aa:	90 91 c5 02 	lds	r25, 0x02C5
     3ae:	91 70       	andi	r25, 0x01	; 1
     3b0:	60 e0       	ldi	r22, 0x00	; 0
     3b2:	72 e0       	ldi	r23, 0x02	; 2
     3b4:	68 1b       	sub	r22, r24
     3b6:	79 0b       	sbc	r23, r25
     3b8:	88 ed       	ldi	r24, 0xD8	; 216
     3ba:	92 e0       	ldi	r25, 0x02	; 2
     3bc:	40 e8       	ldi	r20, 0x80	; 128
     3be:	51 e0       	ldi	r21, 0x01	; 1
     3c0:	0e 94 c3 09 	call	0x1386	; 0x1386 <pf_read>
		sz -= rb;

			
		res = pf_read(Buff1, size, &rb);
     3c4:	88 ed       	ldi	r24, 0xD8	; 216
     3c6:	92 e0       	ldi	r25, 0x02	; 2
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	71 e0       	ldi	r23, 0x01	; 1
     3cc:	40 e8       	ldi	r20, 0x80	; 128
     3ce:	51 e0       	ldi	r21, 0x01	; 1
     3d0:	0e 94 c3 09 	call	0x1386	; 0x1386 <pf_read>
     3d4:	bc 01       	movw	r22, r24
		if (res != FR_OK) { PORTC = 0x08; while (FifoCt) ; return res; }
     3d6:	00 97       	sbiw	r24, 0x00	; 0
     3d8:	39 f0       	breq	.+14     	; 0x3e8 <play+0x202>
     3da:	88 e0       	ldi	r24, 0x08	; 8
     3dc:	88 b9       	out	0x08, r24	; 8
     3de:	80 91 a9 02 	lds	r24, 0x02A9
     3e2:	88 23       	and	r24, r24
     3e4:	e1 f7       	brne	.-8      	; 0x3de <play+0x1f8>
     3e6:	39 c0       	rjmp	.+114    	; 0x45a <play+0x274>
		
		sync = 1;
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	80 93 62 01 	sts	0x0162, r24
				
		do {
				
			read2 = read1;
     3ee:	10 91 5f 01 	lds	r17, 0x015F
			
			if(read1 == 1)	
     3f2:	80 91 5f 01 	lds	r24, 0x015F
     3f6:	81 30       	cpi	r24, 0x01	; 1
     3f8:	19 f4       	brne	.+6      	; 0x400 <play+0x21a>
				res = pf_read(Buff2, size, &rb);
     3fa:	82 e8       	ldi	r24, 0x82	; 130
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	02 c0       	rjmp	.+4      	; 0x404 <play+0x21e>
			else
				res = pf_read(Buff1, size, &rb);
     400:	88 ed       	ldi	r24, 0xD8	; 216
     402:	92 e0       	ldi	r25, 0x02	; 2
     404:	60 e0       	ldi	r22, 0x00	; 0
     406:	71 e0       	ldi	r23, 0x01	; 1
     408:	40 e8       	ldi	r20, 0x80	; 128
     40a:	51 e0       	ldi	r21, 0x01	; 1
     40c:	0e 94 c3 09 	call	0x1386	; 0x1386 <pf_read>
     410:	bc 01       	movw	r22, r24
				
			if (res != FR_OK) { PORTC = 0x08; break; }
     412:	00 97       	sbiw	r24, 0x00	; 0
     414:	19 f0       	breq	.+6      	; 0x41c <play+0x236>
     416:	88 e0       	ldi	r24, 0x08	; 8
     418:	88 b9       	out	0x08, r24	; 8
     41a:	19 c0       	rjmp	.+50     	; 0x44e <play+0x268>
			
			while(read2 == read1);
     41c:	80 91 5f 01 	lds	r24, 0x015F
     420:	18 17       	cp	r17, r24
     422:	e1 f3       	breq	.-8      	; 0x41c <play+0x236>
			
			if(!(PINB&(1<<PB1))) 
     424:	19 99       	sbic	0x03, 1	; 3
     426:	0c c0       	rjmp	.+24     	; 0x440 <play+0x25a>
			{
				sync = 0;
     428:	10 92 62 01 	sts	0x0162, r1
     42c:	88 e8       	ldi	r24, 0x88	; 136
     42e:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     430:	20 e9       	ldi	r18, 0x90	; 144
     432:	31 e0       	ldi	r19, 0x01	; 1
     434:	f9 01       	movw	r30, r18
     436:	31 97       	sbiw	r30, 0x01	; 1
     438:	f1 f7       	brne	.-4      	; 0x436 <play+0x250>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     43a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     43c:	d9 f7       	brne	.-10     	; 0x434 <play+0x24e>
     43e:	07 c0       	rjmp	.+14     	; 0x44e <play+0x268>
				_delay_ms(500); 
				break;
			}
			
		
		} while (rb == size);	/* Repeat until all data read */
     440:	80 91 80 01 	lds	r24, 0x0180
     444:	90 91 81 01 	lds	r25, 0x0181
     448:	80 50       	subi	r24, 0x00	; 0
     44a:	91 40       	sbci	r25, 0x01	; 1
     44c:	81 f2       	breq	.-96     	; 0x3ee <play+0x208>
		
		sync = 0;
     44e:	10 92 62 01 	sts	0x0162, r1
	}

	while (FifoCt) ;			/* Wait for FIFO empty */
     452:	80 91 a9 02 	lds	r24, 0x02A9
     456:	88 23       	and	r24, r24
     458:	e1 f7       	brne	.-8      	; 0x452 <play+0x26c>
	

	return res;
}
     45a:	cb 01       	movw	r24, r22
     45c:	1f 91       	pop	r17
     45e:	0f 91       	pop	r16
     460:	ff 90       	pop	r15
     462:	ef 90       	pop	r14
     464:	08 95       	ret
		} while (rb == size);	/* Repeat until all data read */
		
		sync = 0;
	}

	while (FifoCt) ;			/* Wait for FIFO empty */
     466:	ee 24       	eor	r14, r14
     468:	ff 24       	eor	r15, r15
     46a:	87 01       	movw	r16, r14
     46c:	94 cf       	rjmp	.-216    	; 0x396 <play+0x1b0>

0000046e <task2>:
	/* run the say_time() function */
		say_time();
}

void task2(void)
{
     46e:	18 c0       	rjmp	.+48     	; 0x4a0 <task2+0x32>
	
	while (!pf_readdir(&Dir, &Fno) && Fno.fname[0]) /* go through all the files in the current folder */
				/* Filter out directories and hidden files */
				
	{		
		if (!(Fno.fattrib & (AM_DIR|AM_HID)) && strstr(Fno.fname, "WAV")) /* filter out all the folders, hidden files and the files that are not "WAV" */
     470:	80 91 72 01 	lds	r24, 0x0172
     474:	82 71       	andi	r24, 0x12	; 18
     476:	a1 f4       	brne	.+40     	; 0x4a0 <task2+0x32>
     478:	83 e7       	ldi	r24, 0x73	; 115
     47a:	91 e0       	ldi	r25, 0x01	; 1
     47c:	6b e0       	ldi	r22, 0x0B	; 11
     47e:	71 e0       	ldi	r23, 0x01	; 1
     480:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <strstr>
     484:	00 97       	sbiw	r24, 0x00	; 0
     486:	61 f0       	breq	.+24     	; 0x4a0 <task2+0x32>
		{	
			/* display the filename on the LCD */
			LCD_print(Fno.fname);
     488:	83 e7       	ldi	r24, 0x73	; 115
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <LCD_print>
			
			/* play the WAV file (the play(filename) function needs the full name of the file e.g. music/file.wav) */
			play(strcat("music/",Fno.fname));
     490:	8f e0       	ldi	r24, 0x0F	; 15
     492:	91 e0       	ldi	r25, 0x01	; 1
     494:	63 e7       	ldi	r22, 0x73	; 115
     496:	71 e0       	ldi	r23, 0x01	; 1
     498:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <strcat>
     49c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <play>

void task2(void)
{
	unsigned char filename[20];
	
	while (!pf_readdir(&Dir, &Fno) && Fno.fname[0]) /* go through all the files in the current folder */
     4a0:	84 e8       	ldi	r24, 0x84	; 132
     4a2:	92 e0       	ldi	r25, 0x02	; 2
     4a4:	6a e6       	ldi	r22, 0x6A	; 106
     4a6:	71 e0       	ldi	r23, 0x01	; 1
     4a8:	0e 94 49 07 	call	0xe92	; 0xe92 <pf_readdir>
     4ac:	89 2b       	or	r24, r25
     4ae:	21 f4       	brne	.+8      	; 0x4b8 <task2+0x4a>
     4b0:	80 91 73 01 	lds	r24, 0x0173
     4b4:	88 23       	and	r24, r24
     4b6:	e1 f6       	brne	.-72     	; 0x470 <task2+0x2>
     4b8:	08 95       	ret

000004ba <say_time>:
	
	TIMSK2 = _BV(OCIE2A);
}

void say_time(void)
{
     4ba:	a4 e1       	ldi	r26, 0x14	; 20
     4bc:	b0 e0       	ldi	r27, 0x00	; 0
     4be:	e3 e6       	ldi	r30, 0x63	; 99
     4c0:	f2 e0       	ldi	r31, 0x02	; 2
     4c2:	0c 94 b6 10 	jmp	0x216c	; 0x216c <__prologue_saves__+0x18>
	char time[20];
	
		{
			play("time.WAV");
     4c6:	86 e1       	ldi	r24, 0x16	; 22
     4c8:	91 e0       	ldi	r25, 0x01	; 1
     4ca:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <play>
			if(hours <= 20)
     4ce:	80 91 ab 02 	lds	r24, 0x02AB
     4d2:	8e 01       	movw	r16, r28
     4d4:	0f 5f       	subi	r16, 0xFF	; 255
     4d6:	1f 4f       	sbci	r17, 0xFF	; 255
     4d8:	3f e1       	ldi	r19, 0x1F	; 31
     4da:	e3 2e       	mov	r14, r19
     4dc:	31 e0       	ldi	r19, 0x01	; 1
     4de:	f3 2e       	mov	r15, r19
     4e0:	85 31       	cpi	r24, 0x15	; 21
     4e2:	80 f4       	brcc	.+32     	; 0x504 <say_time+0x4a>
			{
				sprintf(time, "%d.WAV", hours);
     4e4:	00 d0       	rcall	.+0      	; 0x4e6 <say_time+0x2c>
     4e6:	00 d0       	rcall	.+0      	; 0x4e8 <say_time+0x2e>
     4e8:	00 d0       	rcall	.+0      	; 0x4ea <say_time+0x30>
     4ea:	ed b7       	in	r30, 0x3d	; 61
     4ec:	fe b7       	in	r31, 0x3e	; 62
     4ee:	31 96       	adiw	r30, 0x01	; 1
     4f0:	ad b7       	in	r26, 0x3d	; 61
     4f2:	be b7       	in	r27, 0x3e	; 62
     4f4:	12 96       	adiw	r26, 0x02	; 2
     4f6:	1c 93       	st	X, r17
     4f8:	0e 93       	st	-X, r16
     4fa:	11 97       	sbiw	r26, 0x01	; 1
     4fc:	f3 82       	std	Z+3, r15	; 0x03
     4fe:	e2 82       	std	Z+2, r14	; 0x02
     500:	84 83       	std	Z+4, r24	; 0x04
     502:	38 c0       	rjmp	.+112    	; 0x574 <say_time+0xba>
				play(time);
			}
			else
			{
				sprintf(time, "%d.WAV", (hours-hours%10));
     504:	00 d0       	rcall	.+0      	; 0x506 <say_time+0x4c>
     506:	00 d0       	rcall	.+0      	; 0x508 <say_time+0x4e>
     508:	00 d0       	rcall	.+0      	; 0x50a <say_time+0x50>
     50a:	ed b7       	in	r30, 0x3d	; 61
     50c:	fe b7       	in	r31, 0x3e	; 62
     50e:	31 96       	adiw	r30, 0x01	; 1
     510:	ad b7       	in	r26, 0x3d	; 61
     512:	be b7       	in	r27, 0x3e	; 62
     514:	12 96       	adiw	r26, 0x02	; 2
     516:	1c 93       	st	X, r17
     518:	0e 93       	st	-X, r16
     51a:	11 97       	sbiw	r26, 0x01	; 1
     51c:	f3 82       	std	Z+3, r15	; 0x03
     51e:	e2 82       	std	Z+2, r14	; 0x02
     520:	28 2f       	mov	r18, r24
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	6a e0       	ldi	r22, 0x0A	; 10
     526:	0e 94 4d 10 	call	0x209a	; 0x209a <__udivmodqi4>
     52a:	29 1b       	sub	r18, r25
     52c:	31 09       	sbc	r19, r1
     52e:	35 83       	std	Z+5, r19	; 0x05
     530:	24 83       	std	Z+4, r18	; 0x04
     532:	0e 94 06 11 	call	0x220c	; 0x220c <sprintf>
				play(time);
     536:	8d b7       	in	r24, 0x3d	; 61
     538:	9e b7       	in	r25, 0x3e	; 62
     53a:	06 96       	adiw	r24, 0x06	; 6
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	f8 94       	cli
     540:	9e bf       	out	0x3e, r25	; 62
     542:	0f be       	out	0x3f, r0	; 63
     544:	8d bf       	out	0x3d, r24	; 61
     546:	c8 01       	movw	r24, r16
     548:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <play>
				sprintf(time, "%d.WAV", (hours%10));
     54c:	00 d0       	rcall	.+0      	; 0x54e <say_time+0x94>
     54e:	00 d0       	rcall	.+0      	; 0x550 <say_time+0x96>
     550:	00 d0       	rcall	.+0      	; 0x552 <say_time+0x98>
     552:	ed b7       	in	r30, 0x3d	; 61
     554:	fe b7       	in	r31, 0x3e	; 62
     556:	31 96       	adiw	r30, 0x01	; 1
     558:	ad b7       	in	r26, 0x3d	; 61
     55a:	be b7       	in	r27, 0x3e	; 62
     55c:	12 96       	adiw	r26, 0x02	; 2
     55e:	1c 93       	st	X, r17
     560:	0e 93       	st	-X, r16
     562:	11 97       	sbiw	r26, 0x01	; 1
     564:	f3 82       	std	Z+3, r15	; 0x03
     566:	e2 82       	std	Z+2, r14	; 0x02
     568:	80 91 ab 02 	lds	r24, 0x02AB
     56c:	6a e0       	ldi	r22, 0x0A	; 10
     56e:	0e 94 4d 10 	call	0x209a	; 0x209a <__udivmodqi4>
     572:	94 83       	std	Z+4, r25	; 0x04
     574:	15 82       	std	Z+5, r1	; 0x05
     576:	0e 94 06 11 	call	0x220c	; 0x220c <sprintf>
				play(time);
     57a:	8d b7       	in	r24, 0x3d	; 61
     57c:	9e b7       	in	r25, 0x3e	; 62
     57e:	06 96       	adiw	r24, 0x06	; 6
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	f8 94       	cli
     584:	9e bf       	out	0x3e, r25	; 62
     586:	0f be       	out	0x3f, r0	; 63
     588:	8d bf       	out	0x3d, r24	; 61
     58a:	c8 01       	movw	r24, r16
     58c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <play>
			}
			play("hours.WAV");
     590:	86 e2       	ldi	r24, 0x26	; 38
     592:	91 e0       	ldi	r25, 0x01	; 1
     594:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <play>
			
			if(minutes <= 20)
     598:	80 91 aa 02 	lds	r24, 0x02AA
     59c:	8e 01       	movw	r16, r28
     59e:	0f 5f       	subi	r16, 0xFF	; 255
     5a0:	1f 4f       	sbci	r17, 0xFF	; 255
     5a2:	2f e1       	ldi	r18, 0x1F	; 31
     5a4:	e2 2e       	mov	r14, r18
     5a6:	21 e0       	ldi	r18, 0x01	; 1
     5a8:	f2 2e       	mov	r15, r18
     5aa:	85 31       	cpi	r24, 0x15	; 21
     5ac:	80 f4       	brcc	.+32     	; 0x5ce <say_time+0x114>
			{
				sprintf(time, "%d.WAV", minutes);
     5ae:	00 d0       	rcall	.+0      	; 0x5b0 <say_time+0xf6>
     5b0:	00 d0       	rcall	.+0      	; 0x5b2 <say_time+0xf8>
     5b2:	00 d0       	rcall	.+0      	; 0x5b4 <say_time+0xfa>
     5b4:	ed b7       	in	r30, 0x3d	; 61
     5b6:	fe b7       	in	r31, 0x3e	; 62
     5b8:	31 96       	adiw	r30, 0x01	; 1
     5ba:	ad b7       	in	r26, 0x3d	; 61
     5bc:	be b7       	in	r27, 0x3e	; 62
     5be:	12 96       	adiw	r26, 0x02	; 2
     5c0:	1c 93       	st	X, r17
     5c2:	0e 93       	st	-X, r16
     5c4:	11 97       	sbiw	r26, 0x01	; 1
     5c6:	f3 82       	std	Z+3, r15	; 0x03
     5c8:	e2 82       	std	Z+2, r14	; 0x02
     5ca:	84 83       	std	Z+4, r24	; 0x04
     5cc:	38 c0       	rjmp	.+112    	; 0x63e <say_time+0x184>
				play(time);
			}
			else
			{
				sprintf(time, "%d.WAV", (minutes-minutes%10));
     5ce:	00 d0       	rcall	.+0      	; 0x5d0 <say_time+0x116>
     5d0:	00 d0       	rcall	.+0      	; 0x5d2 <say_time+0x118>
     5d2:	00 d0       	rcall	.+0      	; 0x5d4 <say_time+0x11a>
     5d4:	ed b7       	in	r30, 0x3d	; 61
     5d6:	fe b7       	in	r31, 0x3e	; 62
     5d8:	31 96       	adiw	r30, 0x01	; 1
     5da:	ad b7       	in	r26, 0x3d	; 61
     5dc:	be b7       	in	r27, 0x3e	; 62
     5de:	12 96       	adiw	r26, 0x02	; 2
     5e0:	1c 93       	st	X, r17
     5e2:	0e 93       	st	-X, r16
     5e4:	11 97       	sbiw	r26, 0x01	; 1
     5e6:	f3 82       	std	Z+3, r15	; 0x03
     5e8:	e2 82       	std	Z+2, r14	; 0x02
     5ea:	28 2f       	mov	r18, r24
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	6a e0       	ldi	r22, 0x0A	; 10
     5f0:	0e 94 4d 10 	call	0x209a	; 0x209a <__udivmodqi4>
     5f4:	29 1b       	sub	r18, r25
     5f6:	31 09       	sbc	r19, r1
     5f8:	35 83       	std	Z+5, r19	; 0x05
     5fa:	24 83       	std	Z+4, r18	; 0x04
     5fc:	0e 94 06 11 	call	0x220c	; 0x220c <sprintf>
				play(time);
     600:	8d b7       	in	r24, 0x3d	; 61
     602:	9e b7       	in	r25, 0x3e	; 62
     604:	06 96       	adiw	r24, 0x06	; 6
     606:	0f b6       	in	r0, 0x3f	; 63
     608:	f8 94       	cli
     60a:	9e bf       	out	0x3e, r25	; 62
     60c:	0f be       	out	0x3f, r0	; 63
     60e:	8d bf       	out	0x3d, r24	; 61
     610:	c8 01       	movw	r24, r16
     612:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <play>
				sprintf(time, "%d.WAV", (minutes%10));
     616:	00 d0       	rcall	.+0      	; 0x618 <say_time+0x15e>
     618:	00 d0       	rcall	.+0      	; 0x61a <say_time+0x160>
     61a:	00 d0       	rcall	.+0      	; 0x61c <say_time+0x162>
     61c:	ed b7       	in	r30, 0x3d	; 61
     61e:	fe b7       	in	r31, 0x3e	; 62
     620:	31 96       	adiw	r30, 0x01	; 1
     622:	ad b7       	in	r26, 0x3d	; 61
     624:	be b7       	in	r27, 0x3e	; 62
     626:	12 96       	adiw	r26, 0x02	; 2
     628:	1c 93       	st	X, r17
     62a:	0e 93       	st	-X, r16
     62c:	11 97       	sbiw	r26, 0x01	; 1
     62e:	f3 82       	std	Z+3, r15	; 0x03
     630:	e2 82       	std	Z+2, r14	; 0x02
     632:	80 91 aa 02 	lds	r24, 0x02AA
     636:	6a e0       	ldi	r22, 0x0A	; 10
     638:	0e 94 4d 10 	call	0x209a	; 0x209a <__udivmodqi4>
     63c:	94 83       	std	Z+4, r25	; 0x04
     63e:	15 82       	std	Z+5, r1	; 0x05
     640:	0e 94 06 11 	call	0x220c	; 0x220c <sprintf>
				play(time);
     644:	8d b7       	in	r24, 0x3d	; 61
     646:	9e b7       	in	r25, 0x3e	; 62
     648:	06 96       	adiw	r24, 0x06	; 6
     64a:	0f b6       	in	r0, 0x3f	; 63
     64c:	f8 94       	cli
     64e:	9e bf       	out	0x3e, r25	; 62
     650:	0f be       	out	0x3f, r0	; 63
     652:	8d bf       	out	0x3d, r24	; 61
     654:	c8 01       	movw	r24, r16
     656:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <play>
			}
			play("minutes.WAV");
     65a:	80 e3       	ldi	r24, 0x30	; 48
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <play>
			play("and.WAV");
     662:	8c e3       	ldi	r24, 0x3C	; 60
     664:	91 e0       	ldi	r25, 0x01	; 1
     666:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <play>
			if(seconds <= 20)
     66a:	80 91 94 02 	lds	r24, 0x0294
     66e:	8e 01       	movw	r16, r28
     670:	0f 5f       	subi	r16, 0xFF	; 255
     672:	1f 4f       	sbci	r17, 0xFF	; 255
     674:	9f e1       	ldi	r25, 0x1F	; 31
     676:	e9 2e       	mov	r14, r25
     678:	91 e0       	ldi	r25, 0x01	; 1
     67a:	f9 2e       	mov	r15, r25
     67c:	85 31       	cpi	r24, 0x15	; 21
     67e:	80 f4       	brcc	.+32     	; 0x6a0 <say_time+0x1e6>
			{
				sprintf(time, "%d.WAV", seconds);
     680:	00 d0       	rcall	.+0      	; 0x682 <say_time+0x1c8>
     682:	00 d0       	rcall	.+0      	; 0x684 <say_time+0x1ca>
     684:	00 d0       	rcall	.+0      	; 0x686 <say_time+0x1cc>
     686:	ed b7       	in	r30, 0x3d	; 61
     688:	fe b7       	in	r31, 0x3e	; 62
     68a:	31 96       	adiw	r30, 0x01	; 1
     68c:	ad b7       	in	r26, 0x3d	; 61
     68e:	be b7       	in	r27, 0x3e	; 62
     690:	12 96       	adiw	r26, 0x02	; 2
     692:	1c 93       	st	X, r17
     694:	0e 93       	st	-X, r16
     696:	11 97       	sbiw	r26, 0x01	; 1
     698:	f3 82       	std	Z+3, r15	; 0x03
     69a:	e2 82       	std	Z+2, r14	; 0x02
     69c:	84 83       	std	Z+4, r24	; 0x04
     69e:	38 c0       	rjmp	.+112    	; 0x710 <say_time+0x256>
				play(time);
			}
				else
			{
				sprintf(time, "%d.WAV", (seconds-seconds%10));
     6a0:	00 d0       	rcall	.+0      	; 0x6a2 <say_time+0x1e8>
     6a2:	00 d0       	rcall	.+0      	; 0x6a4 <say_time+0x1ea>
     6a4:	00 d0       	rcall	.+0      	; 0x6a6 <say_time+0x1ec>
     6a6:	ed b7       	in	r30, 0x3d	; 61
     6a8:	fe b7       	in	r31, 0x3e	; 62
     6aa:	31 96       	adiw	r30, 0x01	; 1
     6ac:	ad b7       	in	r26, 0x3d	; 61
     6ae:	be b7       	in	r27, 0x3e	; 62
     6b0:	12 96       	adiw	r26, 0x02	; 2
     6b2:	1c 93       	st	X, r17
     6b4:	0e 93       	st	-X, r16
     6b6:	11 97       	sbiw	r26, 0x01	; 1
     6b8:	f3 82       	std	Z+3, r15	; 0x03
     6ba:	e2 82       	std	Z+2, r14	; 0x02
     6bc:	28 2f       	mov	r18, r24
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	6a e0       	ldi	r22, 0x0A	; 10
     6c2:	0e 94 4d 10 	call	0x209a	; 0x209a <__udivmodqi4>
     6c6:	29 1b       	sub	r18, r25
     6c8:	31 09       	sbc	r19, r1
     6ca:	35 83       	std	Z+5, r19	; 0x05
     6cc:	24 83       	std	Z+4, r18	; 0x04
     6ce:	0e 94 06 11 	call	0x220c	; 0x220c <sprintf>
				play(time);
     6d2:	8d b7       	in	r24, 0x3d	; 61
     6d4:	9e b7       	in	r25, 0x3e	; 62
     6d6:	06 96       	adiw	r24, 0x06	; 6
     6d8:	0f b6       	in	r0, 0x3f	; 63
     6da:	f8 94       	cli
     6dc:	9e bf       	out	0x3e, r25	; 62
     6de:	0f be       	out	0x3f, r0	; 63
     6e0:	8d bf       	out	0x3d, r24	; 61
     6e2:	c8 01       	movw	r24, r16
     6e4:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <play>
				sprintf(time, "%d.WAV", (seconds%10));
     6e8:	00 d0       	rcall	.+0      	; 0x6ea <say_time+0x230>
     6ea:	00 d0       	rcall	.+0      	; 0x6ec <say_time+0x232>
     6ec:	00 d0       	rcall	.+0      	; 0x6ee <say_time+0x234>
     6ee:	ed b7       	in	r30, 0x3d	; 61
     6f0:	fe b7       	in	r31, 0x3e	; 62
     6f2:	31 96       	adiw	r30, 0x01	; 1
     6f4:	ad b7       	in	r26, 0x3d	; 61
     6f6:	be b7       	in	r27, 0x3e	; 62
     6f8:	12 96       	adiw	r26, 0x02	; 2
     6fa:	1c 93       	st	X, r17
     6fc:	0e 93       	st	-X, r16
     6fe:	11 97       	sbiw	r26, 0x01	; 1
     700:	f3 82       	std	Z+3, r15	; 0x03
     702:	e2 82       	std	Z+2, r14	; 0x02
     704:	80 91 94 02 	lds	r24, 0x0294
     708:	6a e0       	ldi	r22, 0x0A	; 10
     70a:	0e 94 4d 10 	call	0x209a	; 0x209a <__udivmodqi4>
     70e:	94 83       	std	Z+4, r25	; 0x04
     710:	15 82       	std	Z+5, r1	; 0x05
     712:	0e 94 06 11 	call	0x220c	; 0x220c <sprintf>
				play(time);
     716:	8d b7       	in	r24, 0x3d	; 61
     718:	9e b7       	in	r25, 0x3e	; 62
     71a:	06 96       	adiw	r24, 0x06	; 6
     71c:	0f b6       	in	r0, 0x3f	; 63
     71e:	f8 94       	cli
     720:	9e bf       	out	0x3e, r25	; 62
     722:	0f be       	out	0x3f, r0	; 63
     724:	8d bf       	out	0x3d, r24	; 61
     726:	c8 01       	movw	r24, r16
     728:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <play>
			}
			play("seconds.WAV");
     72c:	84 e4       	ldi	r24, 0x44	; 68
     72e:	91 e0       	ldi	r25, 0x01	; 1
     730:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <play>
		}
}
     734:	64 96       	adiw	r28, 0x14	; 20
     736:	e6 e0       	ldi	r30, 0x06	; 6
     738:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <__epilogue_restores__+0x18>

0000073c <task1>:


void task1(void)
{
	/* check if button on PB0 is pressed */
	if (!(PINB & (1 << PB0)))
     73c:	18 99       	sbic	0x03, 0	; 3
     73e:	02 c0       	rjmp	.+4      	; 0x744 <task1+0x8>
	/* run the say_time() function */
		say_time();
     740:	0e 94 5d 02 	call	0x4ba	; 0x4ba <say_time>
     744:	08 95       	ret

00000746 <__vector_9>:
		
	}
}

ISR(TIMER2_COMPA_vect)
{
     746:	1f 92       	push	r1
     748:	0f 92       	push	r0
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	0f 92       	push	r0
     74e:	11 24       	eor	r1, r1
     750:	0f 93       	push	r16
     752:	1f 93       	push	r17
     754:	2f 93       	push	r18
     756:	3f 93       	push	r19
     758:	4f 93       	push	r20
     75a:	5f 93       	push	r21
     75c:	6f 93       	push	r22
     75e:	7f 93       	push	r23
     760:	8f 93       	push	r24
     762:	9f 93       	push	r25
     764:	af 93       	push	r26
     766:	bf 93       	push	r27
     768:	ef 93       	push	r30
     76a:	ff 93       	push	r31
	miliseconds++;
     76c:	80 91 82 02 	lds	r24, 0x0282
     770:	90 91 83 02 	lds	r25, 0x0283
     774:	01 96       	adiw	r24, 0x01	; 1
     776:	90 93 83 02 	sts	0x0283, r25
     77a:	80 93 82 02 	sts	0x0282, r24
	if(miliseconds == 1000)
     77e:	88 5e       	subi	r24, 0xE8	; 232
     780:	93 40       	sbci	r25, 0x03	; 3
     782:	09 f0       	breq	.+2      	; 0x786 <__vector_9+0x40>
     784:	52 c0       	rjmp	.+164    	; 0x82a <__vector_9+0xe4>
	{
		miliseconds = 0;
     786:	10 92 83 02 	sts	0x0283, r1
     78a:	10 92 82 02 	sts	0x0282, r1
		
		seconds++;
     78e:	80 91 94 02 	lds	r24, 0x0294
     792:	8f 5f       	subi	r24, 0xFF	; 255
     794:	80 93 94 02 	sts	0x0294, r24
		
		if(seconds == 60) 
     798:	8c 33       	cpi	r24, 0x3C	; 60
     79a:	a1 f4       	brne	.+40     	; 0x7c4 <__vector_9+0x7e>
		{
			seconds = 0;
     79c:	10 92 94 02 	sts	0x0294, r1
			minutes++;
     7a0:	80 91 aa 02 	lds	r24, 0x02AA
     7a4:	8f 5f       	subi	r24, 0xFF	; 255
     7a6:	80 93 aa 02 	sts	0x02AA, r24
			if(minutes == 60)
     7aa:	8c 33       	cpi	r24, 0x3C	; 60
     7ac:	59 f4       	brne	.+22     	; 0x7c4 <__vector_9+0x7e>
			{
				minutes = 0;
     7ae:	10 92 aa 02 	sts	0x02AA, r1
				hours++;
     7b2:	80 91 ab 02 	lds	r24, 0x02AB
     7b6:	8f 5f       	subi	r24, 0xFF	; 255
     7b8:	80 93 ab 02 	sts	0x02AB, r24
				if(hours == 24) hours = 0;
     7bc:	88 31       	cpi	r24, 0x18	; 24
     7be:	11 f4       	brne	.+4      	; 0x7c4 <__vector_9+0x7e>
     7c0:	10 92 ab 02 	sts	0x02AB, r1
			}
		}
		
		sprintf(time_string, "%02d:%02d:%02d", hours, minutes, seconds);
     7c4:	8d b7       	in	r24, 0x3d	; 61
     7c6:	9e b7       	in	r25, 0x3e	; 62
     7c8:	0a 97       	sbiw	r24, 0x0a	; 10
     7ca:	0f b6       	in	r0, 0x3f	; 63
     7cc:	f8 94       	cli
     7ce:	9e bf       	out	0x3e, r25	; 62
     7d0:	0f be       	out	0x3f, r0	; 63
     7d2:	8d bf       	out	0x3d, r24	; 61
     7d4:	ed b7       	in	r30, 0x3d	; 61
     7d6:	fe b7       	in	r31, 0x3e	; 62
     7d8:	31 96       	adiw	r30, 0x01	; 1
     7da:	05 e9       	ldi	r16, 0x95	; 149
     7dc:	12 e0       	ldi	r17, 0x02	; 2
     7de:	ad b7       	in	r26, 0x3d	; 61
     7e0:	be b7       	in	r27, 0x3e	; 62
     7e2:	12 96       	adiw	r26, 0x02	; 2
     7e4:	1c 93       	st	X, r17
     7e6:	0e 93       	st	-X, r16
     7e8:	11 97       	sbiw	r26, 0x01	; 1
     7ea:	80 e5       	ldi	r24, 0x50	; 80
     7ec:	91 e0       	ldi	r25, 0x01	; 1
     7ee:	93 83       	std	Z+3, r25	; 0x03
     7f0:	82 83       	std	Z+2, r24	; 0x02
     7f2:	80 91 ab 02 	lds	r24, 0x02AB
     7f6:	84 83       	std	Z+4, r24	; 0x04
     7f8:	15 82       	std	Z+5, r1	; 0x05
     7fa:	80 91 aa 02 	lds	r24, 0x02AA
     7fe:	86 83       	std	Z+6, r24	; 0x06
     800:	17 82       	std	Z+7, r1	; 0x07
     802:	80 91 94 02 	lds	r24, 0x0294
     806:	80 87       	std	Z+8, r24	; 0x08
     808:	11 86       	std	Z+9, r1	; 0x09
     80a:	0e 94 06 11 	call	0x220c	; 0x220c <sprintf>
		LCD_writeInstruction(LCD_INSTR_nextLine);
     80e:	8d b7       	in	r24, 0x3d	; 61
     810:	9e b7       	in	r25, 0x3e	; 62
     812:	0a 96       	adiw	r24, 0x0a	; 10
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	f8 94       	cli
     818:	9e bf       	out	0x3e, r25	; 62
     81a:	0f be       	out	0x3f, r0	; 63
     81c:	8d bf       	out	0x3d, r24	; 61
     81e:	80 ec       	ldi	r24, 0xC0	; 192
     820:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <LCD_writeInstruction>
		LCD_print(time_string);	
     824:	c8 01       	movw	r24, r16
     826:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <LCD_print>
	}
}
     82a:	ff 91       	pop	r31
     82c:	ef 91       	pop	r30
     82e:	bf 91       	pop	r27
     830:	af 91       	pop	r26
     832:	9f 91       	pop	r25
     834:	8f 91       	pop	r24
     836:	7f 91       	pop	r23
     838:	6f 91       	pop	r22
     83a:	5f 91       	pop	r21
     83c:	4f 91       	pop	r20
     83e:	3f 91       	pop	r19
     840:	2f 91       	pop	r18
     842:	1f 91       	pop	r17
     844:	0f 91       	pop	r16
     846:	0f 90       	pop	r0
     848:	0f be       	out	0x3f, r0	; 63
     84a:	0f 90       	pop	r0
     84c:	1f 90       	pop	r1
     84e:	18 95       	reti

00000850 <dir_rewind>:

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
     850:	a0 e0       	ldi	r26, 0x00	; 0
     852:	b0 e0       	ldi	r27, 0x00	; 0
     854:	ee e2       	ldi	r30, 0x2E	; 46
     856:	f4 e0       	ldi	r31, 0x04	; 4
     858:	0c 94 b4 10 	jmp	0x2168	; 0x2168 <__prologue_saves__+0x14>
     85c:	6c 01       	movw	r12, r24
	CLUST clst;
	FATFS *fs = FatFs;
     85e:	c0 91 63 01 	lds	r28, 0x0163
     862:	d0 91 64 01 	lds	r29, 0x0164


	dj->index = 0;
     866:	fc 01       	movw	r30, r24
     868:	11 82       	std	Z+1, r1	; 0x01
     86a:	10 82       	st	Z, r1
	clst = dj->sclust;
     86c:	24 81       	ldd	r18, Z+4	; 0x04
     86e:	35 81       	ldd	r19, Z+5	; 0x05
     870:	46 81       	ldd	r20, Z+6	; 0x06
     872:	57 81       	ldd	r21, Z+7	; 0x07
	if (clst == 1 || clst >= fs->max_clust)	/* Check start cluster range */
     874:	21 30       	cpi	r18, 0x01	; 1
     876:	31 05       	cpc	r19, r1
     878:	41 05       	cpc	r20, r1
     87a:	51 05       	cpc	r21, r1
     87c:	09 f4       	brne	.+2      	; 0x880 <dir_rewind+0x30>
     87e:	5c c0       	rjmp	.+184    	; 0x938 <__stack+0x39>
     880:	88 85       	ldd	r24, Y+8	; 0x08
     882:	99 85       	ldd	r25, Y+9	; 0x09
     884:	aa 85       	ldd	r26, Y+10	; 0x0a
     886:	bb 85       	ldd	r27, Y+11	; 0x0b
     888:	28 17       	cp	r18, r24
     88a:	39 07       	cpc	r19, r25
     88c:	4a 07       	cpc	r20, r26
     88e:	5b 07       	cpc	r21, r27
     890:	08 f0       	brcs	.+2      	; 0x894 <dir_rewind+0x44>
     892:	52 c0       	rjmp	.+164    	; 0x938 <__stack+0x39>
		return FR_DISK_ERR;
#if _FS_FAT32
	if (!clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
     894:	21 15       	cp	r18, r1
     896:	31 05       	cpc	r19, r1
     898:	41 05       	cpc	r20, r1
     89a:	51 05       	cpc	r21, r1
     89c:	39 f4       	brne	.+14     	; 0x8ac <dir_rewind+0x5c>
     89e:	88 81       	ld	r24, Y
     8a0:	83 30       	cpi	r24, 0x03	; 3
     8a2:	21 f4       	brne	.+8      	; 0x8ac <dir_rewind+0x5c>
		clst = fs->dirbase;
     8a4:	28 89       	ldd	r18, Y+16	; 0x10
     8a6:	39 89       	ldd	r19, Y+17	; 0x11
     8a8:	4a 89       	ldd	r20, Y+18	; 0x12
     8aa:	5b 89       	ldd	r21, Y+19	; 0x13
#endif
	dj->clust = clst;						/* Current cluster */
     8ac:	f6 01       	movw	r30, r12
     8ae:	20 87       	std	Z+8, r18	; 0x08
     8b0:	31 87       	std	Z+9, r19	; 0x09
     8b2:	42 87       	std	Z+10, r20	; 0x0a
     8b4:	53 87       	std	Z+11, r21	; 0x0b
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     8b6:	21 15       	cp	r18, r1
     8b8:	31 05       	cpc	r19, r1
     8ba:	41 05       	cpc	r20, r1
     8bc:	51 05       	cpc	r21, r1
     8be:	81 f1       	breq	.+96     	; 0x920 <__stack+0x21>
)
{
	FATFS *fs = FatFs;


	clst -= 2;
     8c0:	8e ef       	ldi	r24, 0xFE	; 254
     8c2:	e8 2e       	mov	r14, r24
     8c4:	8f ef       	ldi	r24, 0xFF	; 255
     8c6:	f8 2e       	mov	r15, r24
     8c8:	8f ef       	ldi	r24, 0xFF	; 255
     8ca:	08 2f       	mov	r16, r24
     8cc:	8f ef       	ldi	r24, 0xFF	; 255
     8ce:	18 2f       	mov	r17, r24
     8d0:	e2 0e       	add	r14, r18
     8d2:	f3 1e       	adc	r15, r19
     8d4:	04 1f       	adc	r16, r20
     8d6:	15 1f       	adc	r17, r21
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     8d8:	88 85       	ldd	r24, Y+8	; 0x08
     8da:	99 85       	ldd	r25, Y+9	; 0x09
     8dc:	aa 85       	ldd	r26, Y+10	; 0x0a
     8de:	bb 85       	ldd	r27, Y+11	; 0x0b
     8e0:	02 97       	sbiw	r24, 0x02	; 2
     8e2:	a1 09       	sbc	r26, r1
     8e4:	b1 09       	sbc	r27, r1
     8e6:	e8 16       	cp	r14, r24
     8e8:	f9 06       	cpc	r15, r25
     8ea:	0a 07       	cpc	r16, r26
     8ec:	1b 07       	cpc	r17, r27
     8ee:	28 f0       	brcs	.+10     	; 0x8fa <dir_rewind+0xaa>
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	17 c0       	rjmp	.+46     	; 0x928 <__stack+0x29>
	return (DWORD)clst * fs->csize + fs->database;
     8fa:	29 81       	ldd	r18, Y+1	; 0x01
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	40 e0       	ldi	r20, 0x00	; 0
     900:	50 e0       	ldi	r21, 0x00	; 0
     902:	c8 01       	movw	r24, r16
     904:	b7 01       	movw	r22, r14
     906:	0e 94 2e 10 	call	0x205c	; 0x205c <__mulsi3>
     90a:	9b 01       	movw	r18, r22
     90c:	ac 01       	movw	r20, r24
     90e:	8c 89       	ldd	r24, Y+20	; 0x14
     910:	9d 89       	ldd	r25, Y+21	; 0x15
     912:	ae 89       	ldd	r26, Y+22	; 0x16
     914:	bf 89       	ldd	r27, Y+23	; 0x17
     916:	28 0f       	add	r18, r24
     918:	39 1f       	adc	r19, r25
     91a:	4a 1f       	adc	r20, r26
     91c:	5b 1f       	adc	r21, r27
     91e:	04 c0       	rjmp	.+8      	; 0x928 <__stack+0x29>
#if _FS_FAT32
	if (!clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = fs->dirbase;
#endif
	dj->clust = clst;						/* Current cluster */
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     920:	28 89       	ldd	r18, Y+16	; 0x10
     922:	39 89       	ldd	r19, Y+17	; 0x11
     924:	4a 89       	ldd	r20, Y+18	; 0x12
     926:	5b 89       	ldd	r21, Y+19	; 0x13
     928:	f6 01       	movw	r30, r12
     92a:	24 87       	std	Z+12, r18	; 0x0c
     92c:	35 87       	std	Z+13, r19	; 0x0d
     92e:	46 87       	std	Z+14, r20	; 0x0e
     930:	57 87       	std	Z+15, r21	; 0x0f
     932:	20 e0       	ldi	r18, 0x00	; 0
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	02 c0       	rjmp	.+4      	; 0x93c <__stack+0x3d>

	return FR_OK;	/* Seek succeeded */
     938:	21 e0       	ldi	r18, 0x01	; 1
     93a:	30 e0       	ldi	r19, 0x00	; 0
}
     93c:	c9 01       	movw	r24, r18
     93e:	cd b7       	in	r28, 0x3d	; 61
     940:	de b7       	in	r29, 0x3e	; 62
     942:	e8 e0       	ldi	r30, 0x08	; 8
     944:	0c 94 d0 10 	jmp	0x21a0	; 0x21a0 <__epilogue_restores__+0x14>

00000948 <get_fat>:

static
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
     948:	a4 e0       	ldi	r26, 0x04	; 4
     94a:	b0 e0       	ldi	r27, 0x00	; 0
     94c:	ea ea       	ldi	r30, 0xAA	; 170
     94e:	f4 e0       	ldi	r31, 0x04	; 4
     950:	0c 94 ae 10 	jmp	0x215c	; 0x215c <__prologue_saves__+0x8>
     954:	4b 01       	movw	r8, r22
     956:	5c 01       	movw	r10, r24
	WORD wc, bc, ofs;
	BYTE buf[4];
	FATFS *fs = FatFs;
     958:	60 90 63 01 	lds	r6, 0x0163
     95c:	70 90 64 01 	lds	r7, 0x0164


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
     960:	82 e0       	ldi	r24, 0x02	; 2
     962:	88 16       	cp	r8, r24
     964:	91 04       	cpc	r9, r1
     966:	a1 04       	cpc	r10, r1
     968:	b1 04       	cpc	r11, r1
     96a:	08 f4       	brcc	.+2      	; 0x96e <get_fat+0x26>
     96c:	b4 c0       	rjmp	.+360    	; 0xad6 <get_fat+0x18e>
     96e:	f3 01       	movw	r30, r6
     970:	80 85       	ldd	r24, Z+8	; 0x08
     972:	91 85       	ldd	r25, Z+9	; 0x09
     974:	a2 85       	ldd	r26, Z+10	; 0x0a
     976:	b3 85       	ldd	r27, Z+11	; 0x0b
     978:	88 16       	cp	r8, r24
     97a:	99 06       	cpc	r9, r25
     97c:	aa 06       	cpc	r10, r26
     97e:	bb 06       	cpc	r11, r27
     980:	08 f0       	brcs	.+2      	; 0x984 <get_fat+0x3c>
     982:	a9 c0       	rjmp	.+338    	; 0xad6 <get_fat+0x18e>
		return 1;

	switch (fs->fs_type) {
     984:	80 81       	ld	r24, Z
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	09 f4       	brne	.+2      	; 0x98c <get_fat+0x44>
     98a:	5f c0       	rjmp	.+190    	; 0xa4a <get_fat+0x102>
     98c:	83 30       	cpi	r24, 0x03	; 3
     98e:	09 f4       	brne	.+2      	; 0x992 <get_fat+0x4a>
     990:	7b c0       	rjmp	.+246    	; 0xa88 <get_fat+0x140>
     992:	81 30       	cpi	r24, 0x01	; 1
     994:	09 f0       	breq	.+2      	; 0x998 <get_fat+0x50>
     996:	9f c0       	rjmp	.+318    	; 0xad6 <get_fat+0x18e>
	case FS_FAT12 :
		bc = (WORD)clst; bc += bc / 2;
     998:	c4 01       	movw	r24, r8
     99a:	96 95       	lsr	r25
     99c:	87 95       	ror	r24
     99e:	88 0d       	add	r24, r8
     9a0:	99 1d       	adc	r25, r9
		ofs = bc % 512; bc /= 512;
     9a2:	9c 01       	movw	r18, r24
     9a4:	31 70       	andi	r19, 0x01	; 1
     9a6:	89 2f       	mov	r24, r25
     9a8:	99 27       	eor	r25, r25
     9aa:	86 95       	lsr	r24
     9ac:	6c 01       	movw	r12, r24
     9ae:	ee 24       	eor	r14, r14
     9b0:	ff 24       	eor	r15, r15
     9b2:	f3 01       	movw	r30, r6
     9b4:	44 85       	ldd	r20, Z+12	; 0x0c
     9b6:	55 85       	ldd	r21, Z+13	; 0x0d
     9b8:	66 85       	ldd	r22, Z+14	; 0x0e
     9ba:	77 85       	ldd	r23, Z+15	; 0x0f
     9bc:	ce 01       	movw	r24, r28
     9be:	01 96       	adiw	r24, 0x01	; 1
		if (ofs != 511) {
     9c0:	f1 e0       	ldi	r31, 0x01	; 1
     9c2:	2f 3f       	cpi	r18, 0xFF	; 255
     9c4:	3f 07       	cpc	r19, r31
     9c6:	49 f0       	breq	.+18     	; 0x9da <get_fat+0x92>
			if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
     9c8:	c4 0e       	add	r12, r20
     9ca:	d5 1e       	adc	r13, r21
     9cc:	e6 1e       	adc	r14, r22
     9ce:	f7 1e       	adc	r15, r23
     9d0:	b7 01       	movw	r22, r14
     9d2:	a6 01       	movw	r20, r12
     9d4:	02 e0       	ldi	r16, 0x02	; 2
     9d6:	10 e0       	ldi	r17, 0x00	; 0
     9d8:	1e c0       	rjmp	.+60     	; 0xa16 <get_fat+0xce>
		} else {
			if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
     9da:	4c 0d       	add	r20, r12
     9dc:	5d 1d       	adc	r21, r13
     9de:	6e 1d       	adc	r22, r14
     9e0:	7f 1d       	adc	r23, r15
     9e2:	2f ef       	ldi	r18, 0xFF	; 255
     9e4:	31 e0       	ldi	r19, 0x01	; 1
     9e6:	01 e0       	ldi	r16, 0x01	; 1
     9e8:	10 e0       	ldi	r17, 0x00	; 0
     9ea:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <disk_readp>
     9ee:	89 2b       	or	r24, r25
     9f0:	09 f0       	breq	.+2      	; 0x9f4 <get_fat+0xac>
     9f2:	71 c0       	rjmp	.+226    	; 0xad6 <get_fat+0x18e>
			if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
     9f4:	f3 01       	movw	r30, r6
     9f6:	44 85       	ldd	r20, Z+12	; 0x0c
     9f8:	55 85       	ldd	r21, Z+13	; 0x0d
     9fa:	66 85       	ldd	r22, Z+14	; 0x0e
     9fc:	77 85       	ldd	r23, Z+15	; 0x0f
     9fe:	4f 5f       	subi	r20, 0xFF	; 255
     a00:	5f 4f       	sbci	r21, 0xFF	; 255
     a02:	6f 4f       	sbci	r22, 0xFF	; 255
     a04:	7f 4f       	sbci	r23, 0xFF	; 255
     a06:	4c 0d       	add	r20, r12
     a08:	5d 1d       	adc	r21, r13
     a0a:	6e 1d       	adc	r22, r14
     a0c:	7f 1d       	adc	r23, r15
     a0e:	ce 01       	movw	r24, r28
     a10:	02 96       	adiw	r24, 0x02	; 2
     a12:	20 e0       	ldi	r18, 0x00	; 0
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <disk_readp>
     a1a:	89 2b       	or	r24, r25
     a1c:	09 f0       	breq	.+2      	; 0xa20 <get_fat+0xd8>
     a1e:	5b c0       	rjmp	.+182    	; 0xad6 <get_fat+0x18e>
		}
		wc = LD_WORD(buf);
     a20:	69 81       	ldd	r22, Y+1	; 0x01
     a22:	7a 81       	ldd	r23, Y+2	; 0x02
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
     a24:	c4 01       	movw	r24, r8
     a26:	81 70       	andi	r24, 0x01	; 1
     a28:	90 70       	andi	r25, 0x00	; 0
     a2a:	89 2b       	or	r24, r25
     a2c:	39 f0       	breq	.+14     	; 0xa3c <get_fat+0xf4>
     a2e:	a4 e0       	ldi	r26, 0x04	; 4
     a30:	76 95       	lsr	r23
     a32:	67 95       	ror	r22
     a34:	aa 95       	dec	r26
     a36:	e1 f7       	brne	.-8      	; 0xa30 <get_fat+0xe8>
     a38:	9b 01       	movw	r18, r22
     a3a:	23 c0       	rjmp	.+70     	; 0xa82 <get_fat+0x13a>
     a3c:	9b 01       	movw	r18, r22
     a3e:	40 e0       	ldi	r20, 0x00	; 0
     a40:	50 e0       	ldi	r21, 0x00	; 0
     a42:	3f 70       	andi	r19, 0x0F	; 15
     a44:	40 70       	andi	r20, 0x00	; 0
     a46:	50 70       	andi	r21, 0x00	; 0
     a48:	4a c0       	rjmp	.+148    	; 0xade <get_fat+0x196>

	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, (WORD)(((WORD)clst % 256) * 2), 2)) break;
     a4a:	77 27       	eor	r23, r23
     a4c:	6b 2d       	mov	r22, r11
     a4e:	5a 2d       	mov	r21, r10
     a50:	49 2d       	mov	r20, r9
     a52:	f3 01       	movw	r30, r6
     a54:	84 85       	ldd	r24, Z+12	; 0x0c
     a56:	95 85       	ldd	r25, Z+13	; 0x0d
     a58:	a6 85       	ldd	r26, Z+14	; 0x0e
     a5a:	b7 85       	ldd	r27, Z+15	; 0x0f
     a5c:	48 0f       	add	r20, r24
     a5e:	59 1f       	adc	r21, r25
     a60:	6a 1f       	adc	r22, r26
     a62:	7b 1f       	adc	r23, r27
     a64:	94 01       	movw	r18, r8
     a66:	30 70       	andi	r19, 0x00	; 0
     a68:	22 0f       	add	r18, r18
     a6a:	33 1f       	adc	r19, r19
     a6c:	ce 01       	movw	r24, r28
     a6e:	01 96       	adiw	r24, 0x01	; 1
     a70:	02 e0       	ldi	r16, 0x02	; 2
     a72:	10 e0       	ldi	r17, 0x00	; 0
     a74:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <disk_readp>
     a78:	89 2b       	or	r24, r25
     a7a:	69 f5       	brne	.+90     	; 0xad6 <get_fat+0x18e>
		return LD_WORD(buf);
     a7c:	89 81       	ldd	r24, Y+1	; 0x01
     a7e:	9a 81       	ldd	r25, Y+2	; 0x02
     a80:	9c 01       	movw	r18, r24
     a82:	40 e0       	ldi	r20, 0x00	; 0
     a84:	50 e0       	ldi	r21, 0x00	; 0
     a86:	2b c0       	rjmp	.+86     	; 0xade <get_fat+0x196>
#if _FS_FAT32
	case FS_FAT32 :
		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
     a88:	b5 01       	movw	r22, r10
     a8a:	a4 01       	movw	r20, r8
     a8c:	27 e0       	ldi	r18, 0x07	; 7
     a8e:	76 95       	lsr	r23
     a90:	67 95       	ror	r22
     a92:	57 95       	ror	r21
     a94:	47 95       	ror	r20
     a96:	2a 95       	dec	r18
     a98:	d1 f7       	brne	.-12     	; 0xa8e <get_fat+0x146>
     a9a:	f3 01       	movw	r30, r6
     a9c:	84 85       	ldd	r24, Z+12	; 0x0c
     a9e:	95 85       	ldd	r25, Z+13	; 0x0d
     aa0:	a6 85       	ldd	r26, Z+14	; 0x0e
     aa2:	b7 85       	ldd	r27, Z+15	; 0x0f
     aa4:	48 0f       	add	r20, r24
     aa6:	59 1f       	adc	r21, r25
     aa8:	6a 1f       	adc	r22, r26
     aaa:	7b 1f       	adc	r23, r27
     aac:	94 01       	movw	r18, r8
     aae:	2f 77       	andi	r18, 0x7F	; 127
     ab0:	30 70       	andi	r19, 0x00	; 0
     ab2:	22 0f       	add	r18, r18
     ab4:	33 1f       	adc	r19, r19
     ab6:	22 0f       	add	r18, r18
     ab8:	33 1f       	adc	r19, r19
     aba:	ce 01       	movw	r24, r28
     abc:	01 96       	adiw	r24, 0x01	; 1
     abe:	04 e0       	ldi	r16, 0x04	; 4
     ac0:	10 e0       	ldi	r17, 0x00	; 0
     ac2:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <disk_readp>
     ac6:	89 2b       	or	r24, r25
     ac8:	31 f4       	brne	.+12     	; 0xad6 <get_fat+0x18e>
		return LD_DWORD(buf) & 0x0FFFFFFF;
     aca:	29 81       	ldd	r18, Y+1	; 0x01
     acc:	3a 81       	ldd	r19, Y+2	; 0x02
     ace:	4b 81       	ldd	r20, Y+3	; 0x03
     ad0:	5c 81       	ldd	r21, Y+4	; 0x04
     ad2:	5f 70       	andi	r21, 0x0F	; 15
     ad4:	04 c0       	rjmp	.+8      	; 0xade <get_fat+0x196>
     ad6:	21 e0       	ldi	r18, 0x01	; 1
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	40 e0       	ldi	r20, 0x00	; 0
     adc:	50 e0       	ldi	r21, 0x00	; 0
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
}
     ade:	b9 01       	movw	r22, r18
     ae0:	ca 01       	movw	r24, r20
     ae2:	24 96       	adiw	r28, 0x04	; 4
     ae4:	ee e0       	ldi	r30, 0x0E	; 14
     ae6:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__epilogue_restores__+0x8>

00000aea <dir_next>:

static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table */
	DIR *dj			/* Pointer to directory object */
)
{
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	eb e7       	ldi	r30, 0x7B	; 123
     af0:	f5 e0       	ldi	r31, 0x05	; 5
     af2:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <__prologue_saves__+0x10>
     af6:	5c 01       	movw	r10, r24
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;
     af8:	c0 91 63 01 	lds	r28, 0x0163
     afc:	d0 91 64 01 	lds	r29, 0x0164


	i = dj->index + 1;
     b00:	fc 01       	movw	r30, r24
     b02:	c0 80       	ld	r12, Z
     b04:	d1 80       	ldd	r13, Z+1	; 0x01
     b06:	08 94       	sec
     b08:	c1 1c       	adc	r12, r1
     b0a:	d1 1c       	adc	r13, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
     b0c:	c1 14       	cp	r12, r1
     b0e:	d1 04       	cpc	r13, r1
     b10:	09 f4       	brne	.+2      	; 0xb14 <dir_next+0x2a>
     b12:	91 c0       	rjmp	.+290    	; 0xc36 <dir_next+0x14c>
     b14:	24 85       	ldd	r18, Z+12	; 0x0c
     b16:	35 85       	ldd	r19, Z+13	; 0x0d
     b18:	46 85       	ldd	r20, Z+14	; 0x0e
     b1a:	57 85       	ldd	r21, Z+15	; 0x0f
     b1c:	21 15       	cp	r18, r1
     b1e:	31 05       	cpc	r19, r1
     b20:	41 05       	cpc	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	09 f4       	brne	.+2      	; 0xb28 <dir_next+0x3e>
     b26:	87 c0       	rjmp	.+270    	; 0xc36 <dir_next+0x14c>
		return FR_NO_FILE;

	if (!(i & (16-1))) {	/* Sector changed? */
     b28:	c6 01       	movw	r24, r12
     b2a:	8f 70       	andi	r24, 0x0F	; 15
     b2c:	90 70       	andi	r25, 0x00	; 0
     b2e:	89 2b       	or	r24, r25
     b30:	09 f0       	breq	.+2      	; 0xb34 <dir_next+0x4a>
     b32:	7b c0       	rjmp	.+246    	; 0xc2a <dir_next+0x140>
		dj->sect++;			/* Next sector */
     b34:	2f 5f       	subi	r18, 0xFF	; 255
     b36:	3f 4f       	sbci	r19, 0xFF	; 255
     b38:	4f 4f       	sbci	r20, 0xFF	; 255
     b3a:	5f 4f       	sbci	r21, 0xFF	; 255
     b3c:	24 87       	std	Z+12, r18	; 0x0c
     b3e:	35 87       	std	Z+13, r19	; 0x0d
     b40:	46 87       	std	Z+14, r20	; 0x0e
     b42:	57 87       	std	Z+15, r21	; 0x0f

		if (dj->clust == 0) {	/* Static table */
     b44:	40 85       	ldd	r20, Z+8	; 0x08
     b46:	51 85       	ldd	r21, Z+9	; 0x09
     b48:	62 85       	ldd	r22, Z+10	; 0x0a
     b4a:	73 85       	ldd	r23, Z+11	; 0x0b
     b4c:	41 15       	cp	r20, r1
     b4e:	51 05       	cpc	r21, r1
     b50:	61 05       	cpc	r22, r1
     b52:	71 05       	cpc	r23, r1
     b54:	39 f4       	brne	.+14     	; 0xb64 <dir_next+0x7a>
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
     b56:	8c 81       	ldd	r24, Y+4	; 0x04
     b58:	9d 81       	ldd	r25, Y+5	; 0x05
     b5a:	c8 16       	cp	r12, r24
     b5c:	d9 06       	cpc	r13, r25
     b5e:	08 f4       	brcc	.+2      	; 0xb62 <dir_next+0x78>
     b60:	64 c0       	rjmp	.+200    	; 0xc2a <dir_next+0x140>
     b62:	69 c0       	rjmp	.+210    	; 0xc36 <dir_next+0x14c>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	01 97       	sbiw	r24, 0x01	; 1
     b6a:	96 01       	movw	r18, r12
     b6c:	e4 e0       	ldi	r30, 0x04	; 4
     b6e:	36 95       	lsr	r19
     b70:	27 95       	ror	r18
     b72:	ea 95       	dec	r30
     b74:	e1 f7       	brne	.-8      	; 0xb6e <dir_next+0x84>
     b76:	82 23       	and	r24, r18
     b78:	93 23       	and	r25, r19
     b7a:	89 2b       	or	r24, r25
     b7c:	09 f0       	breq	.+2      	; 0xb80 <dir_next+0x96>
     b7e:	55 c0       	rjmp	.+170    	; 0xc2a <dir_next+0x140>
				clst = get_fat(dj->clust);		/* Get next cluster */
     b80:	cb 01       	movw	r24, r22
     b82:	ba 01       	movw	r22, r20
     b84:	0e 94 a4 04 	call	0x948	; 0x948 <get_fat>
     b88:	9b 01       	movw	r18, r22
     b8a:	ac 01       	movw	r20, r24
				if (clst <= 1) return FR_DISK_ERR;
     b8c:	62 30       	cpi	r22, 0x02	; 2
     b8e:	71 05       	cpc	r23, r1
     b90:	81 05       	cpc	r24, r1
     b92:	91 05       	cpc	r25, r1
     b94:	18 f4       	brcc	.+6      	; 0xb9c <dir_next+0xb2>
     b96:	21 e0       	ldi	r18, 0x01	; 1
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	4f c0       	rjmp	.+158    	; 0xc3a <dir_next+0x150>
				if (clst >= fs->max_clust)		/* When it reached end of dynamic table */
     b9c:	88 85       	ldd	r24, Y+8	; 0x08
     b9e:	99 85       	ldd	r25, Y+9	; 0x09
     ba0:	aa 85       	ldd	r26, Y+10	; 0x0a
     ba2:	bb 85       	ldd	r27, Y+11	; 0x0b
     ba4:	28 17       	cp	r18, r24
     ba6:	39 07       	cpc	r19, r25
     ba8:	4a 07       	cpc	r20, r26
     baa:	5b 07       	cpc	r21, r27
     bac:	08 f0       	brcs	.+2      	; 0xbb0 <dir_next+0xc6>
     bae:	43 c0       	rjmp	.+134    	; 0xc36 <dir_next+0x14c>
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
     bb0:	f5 01       	movw	r30, r10
     bb2:	20 87       	std	Z+8, r18	; 0x08
     bb4:	31 87       	std	Z+9, r19	; 0x09
     bb6:	42 87       	std	Z+10, r20	; 0x0a
     bb8:	53 87       	std	Z+11, r21	; 0x0b
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
     bba:	c0 91 63 01 	lds	r28, 0x0163
     bbe:	d0 91 64 01 	lds	r29, 0x0164


	clst -= 2;
     bc2:	8e ef       	ldi	r24, 0xFE	; 254
     bc4:	e8 2e       	mov	r14, r24
     bc6:	8f ef       	ldi	r24, 0xFF	; 255
     bc8:	f8 2e       	mov	r15, r24
     bca:	8f ef       	ldi	r24, 0xFF	; 255
     bcc:	08 2f       	mov	r16, r24
     bce:	8f ef       	ldi	r24, 0xFF	; 255
     bd0:	18 2f       	mov	r17, r24
     bd2:	e2 0e       	add	r14, r18
     bd4:	f3 1e       	adc	r15, r19
     bd6:	04 1f       	adc	r16, r20
     bd8:	15 1f       	adc	r17, r21
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     bda:	88 85       	ldd	r24, Y+8	; 0x08
     bdc:	99 85       	ldd	r25, Y+9	; 0x09
     bde:	aa 85       	ldd	r26, Y+10	; 0x0a
     be0:	bb 85       	ldd	r27, Y+11	; 0x0b
     be2:	02 97       	sbiw	r24, 0x02	; 2
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	e8 16       	cp	r14, r24
     bea:	f9 06       	cpc	r15, r25
     bec:	0a 07       	cpc	r16, r26
     bee:	1b 07       	cpc	r17, r27
     bf0:	28 f0       	brcs	.+10     	; 0xbfc <dir_next+0x112>
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	40 e0       	ldi	r20, 0x00	; 0
     bf8:	50 e0       	ldi	r21, 0x00	; 0
     bfa:	12 c0       	rjmp	.+36     	; 0xc20 <dir_next+0x136>
	return (DWORD)clst * fs->csize + fs->database;
     bfc:	29 81       	ldd	r18, Y+1	; 0x01
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	40 e0       	ldi	r20, 0x00	; 0
     c02:	50 e0       	ldi	r21, 0x00	; 0
     c04:	c8 01       	movw	r24, r16
     c06:	b7 01       	movw	r22, r14
     c08:	0e 94 2e 10 	call	0x205c	; 0x205c <__mulsi3>
     c0c:	9b 01       	movw	r18, r22
     c0e:	ac 01       	movw	r20, r24
     c10:	8c 89       	ldd	r24, Y+20	; 0x14
     c12:	9d 89       	ldd	r25, Y+21	; 0x15
     c14:	ae 89       	ldd	r26, Y+22	; 0x16
     c16:	bf 89       	ldd	r27, Y+23	; 0x17
     c18:	28 0f       	add	r18, r24
     c1a:	39 1f       	adc	r19, r25
     c1c:	4a 1f       	adc	r20, r26
     c1e:	5b 1f       	adc	r21, r27
				clst = get_fat(dj->clust);		/* Get next cluster */
				if (clst <= 1) return FR_DISK_ERR;
				if (clst >= fs->max_clust)		/* When it reached end of dynamic table */
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(clst);
     c20:	f5 01       	movw	r30, r10
     c22:	24 87       	std	Z+12, r18	; 0x0c
     c24:	35 87       	std	Z+13, r19	; 0x0d
     c26:	46 87       	std	Z+14, r20	; 0x0e
     c28:	57 87       	std	Z+15, r21	; 0x0f
			}
		}
	}

	dj->index = i;
     c2a:	f5 01       	movw	r30, r10
     c2c:	d1 82       	std	Z+1, r13	; 0x01
     c2e:	c0 82       	st	Z, r12
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <dir_next+0x150>

	return FR_OK;
     c36:	23 e0       	ldi	r18, 0x03	; 3
     c38:	30 e0       	ldi	r19, 0x00	; 0
}
     c3a:	c9 01       	movw	r24, r18
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
     c40:	ea e0       	ldi	r30, 0x0A	; 10
     c42:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__epilogue_restores__+0x10>

00000c46 <pf_lseek>:
#if _USE_LSEEK

FRESULT pf_lseek (
	DWORD ofs		/* File pointer from top of file */
)
{
     c46:	a0 e0       	ldi	r26, 0x00	; 0
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	e9 e2       	ldi	r30, 0x29	; 41
     c4c:	f6 e0       	ldi	r31, 0x06	; 6
     c4e:	0c 94 aa 10 	jmp	0x2154	; 0x2154 <__prologue_saves__>
     c52:	e8 2f       	mov	r30, r24
	CLUST clst;
	DWORD bcs, sect, ifptr;
	FATFS *fs = FatFs;
     c54:	c0 91 63 01 	lds	r28, 0x0163
     c58:	d0 91 64 01 	lds	r29, 0x0164


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
     c5c:	20 97       	sbiw	r28, 0x00	; 0
     c5e:	19 f4       	brne	.+6      	; 0xc66 <pf_lseek+0x20>
     c60:	26 e0       	ldi	r18, 0x06	; 6
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	10 c1       	rjmp	.+544    	; 0xe86 <pf_lseek+0x240>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
     c66:	8a 81       	ldd	r24, Y+2	; 0x02
     c68:	80 fd       	sbrc	r24, 0
     c6a:	03 c0       	rjmp	.+6      	; 0xc72 <pf_lseek+0x2c>
     c6c:	25 e0       	ldi	r18, 0x05	; 5
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	0a c1       	rjmp	.+532    	; 0xe86 <pf_lseek+0x240>
     c72:	ac 8c       	ldd	r10, Y+28	; 0x1c
     c74:	bd 8c       	ldd	r11, Y+29	; 0x1d
     c76:	ce 8c       	ldd	r12, Y+30	; 0x1e
     c78:	df 8c       	ldd	r13, Y+31	; 0x1f
     c7a:	4e 2f       	mov	r20, r30
     c7c:	59 2f       	mov	r21, r25
     c7e:	cb 01       	movw	r24, r22
     c80:	da 01       	movw	r26, r20
     c82:	3c 01       	movw	r6, r24
     c84:	4d 01       	movw	r8, r26
     c86:	a6 14       	cp	r10, r6
     c88:	b7 04       	cpc	r11, r7
     c8a:	c8 04       	cpc	r12, r8
     c8c:	d9 04       	cpc	r13, r9
     c8e:	10 f4       	brcc	.+4      	; 0xc94 <pf_lseek+0x4e>
     c90:	35 01       	movw	r6, r10
     c92:	46 01       	movw	r8, r12
			return FR_NOT_OPENED;

	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
	ifptr = fs->fptr;
     c94:	28 8d       	ldd	r18, Y+24	; 0x18
     c96:	39 8d       	ldd	r19, Y+25	; 0x19
     c98:	4a 8d       	ldd	r20, Y+26	; 0x1a
     c9a:	5b 8d       	ldd	r21, Y+27	; 0x1b
	fs->fptr = 0;
     c9c:	18 8e       	std	Y+24, r1	; 0x18
     c9e:	19 8e       	std	Y+25, r1	; 0x19
     ca0:	1a 8e       	std	Y+26, r1	; 0x1a
     ca2:	1b 8e       	std	Y+27, r1	; 0x1b
	if (ofs > 0) {
     ca4:	61 14       	cp	r6, r1
     ca6:	71 04       	cpc	r7, r1
     ca8:	81 04       	cpc	r8, r1
     caa:	91 04       	cpc	r9, r1
     cac:	09 f4       	brne	.+2      	; 0xcb0 <pf_lseek+0x6a>
     cae:	e9 c0       	rjmp	.+466    	; 0xe82 <pf_lseek+0x23c>
		bcs = (DWORD)fs->csize * 512;	/* Cluster size (byte) */
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	a8 2e       	mov	r10, r24
     cb4:	bb 24       	eor	r11, r11
     cb6:	cc 24       	eor	r12, r12
     cb8:	dd 24       	eor	r13, r13
     cba:	99 e0       	ldi	r25, 0x09	; 9
     cbc:	aa 0c       	add	r10, r10
     cbe:	bb 1c       	adc	r11, r11
     cc0:	cc 1c       	adc	r12, r12
     cc2:	dd 1c       	adc	r13, r13
     cc4:	9a 95       	dec	r25
     cc6:	d1 f7       	brne	.-12     	; 0xcbc <pf_lseek+0x76>
		if (ifptr > 0 &&
     cc8:	21 15       	cp	r18, r1
     cca:	31 05       	cpc	r19, r1
     ccc:	41 05       	cpc	r20, r1
     cce:	51 05       	cpc	r21, r1
     cd0:	b1 f1       	breq	.+108    	; 0xd3e <pf_lseek+0xf8>
     cd2:	19 01       	movw	r2, r18
     cd4:	2a 01       	movw	r4, r20
     cd6:	08 94       	sec
     cd8:	21 08       	sbc	r2, r1
     cda:	31 08       	sbc	r3, r1
     cdc:	41 08       	sbc	r4, r1
     cde:	51 08       	sbc	r5, r1
     ce0:	c4 01       	movw	r24, r8
     ce2:	b3 01       	movw	r22, r6
     ce4:	61 50       	subi	r22, 0x01	; 1
     ce6:	70 40       	sbci	r23, 0x00	; 0
     ce8:	80 40       	sbci	r24, 0x00	; 0
     cea:	90 40       	sbci	r25, 0x00	; 0
     cec:	a6 01       	movw	r20, r12
     cee:	95 01       	movw	r18, r10
     cf0:	0e 94 6d 10 	call	0x20da	; 0x20da <__udivmodsi4>
     cf4:	79 01       	movw	r14, r18
     cf6:	8a 01       	movw	r16, r20
     cf8:	c2 01       	movw	r24, r4
     cfa:	b1 01       	movw	r22, r2
     cfc:	a6 01       	movw	r20, r12
     cfe:	95 01       	movw	r18, r10
     d00:	0e 94 6d 10 	call	0x20da	; 0x20da <__udivmodsi4>
     d04:	e2 16       	cp	r14, r18
     d06:	f3 06       	cpc	r15, r19
     d08:	04 07       	cpc	r16, r20
     d0a:	15 07       	cpc	r17, r21
     d0c:	c0 f0       	brcs	.+48     	; 0xd3e <pf_lseek+0xf8>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fs->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
     d0e:	88 27       	eor	r24, r24
     d10:	99 27       	eor	r25, r25
     d12:	dc 01       	movw	r26, r24
     d14:	8a 19       	sub	r24, r10
     d16:	9b 09       	sbc	r25, r11
     d18:	ac 09       	sbc	r26, r12
     d1a:	bd 09       	sbc	r27, r13
     d1c:	82 21       	and	r24, r2
     d1e:	93 21       	and	r25, r3
     d20:	a4 21       	and	r26, r4
     d22:	b5 21       	and	r27, r5
     d24:	88 8f       	std	Y+24, r24	; 0x18
     d26:	99 8f       	std	Y+25, r25	; 0x19
     d28:	aa 8f       	std	Y+26, r26	; 0x1a
     d2a:	bb 8f       	std	Y+27, r27	; 0x1b
			ofs -= fs->fptr;
     d2c:	68 1a       	sub	r6, r24
     d2e:	79 0a       	sbc	r7, r25
     d30:	8a 0a       	sbc	r8, r26
     d32:	9b 0a       	sbc	r9, r27
			clst = fs->curr_clust;
     d34:	2c a1       	ldd	r18, Y+36	; 0x24
     d36:	3d a1       	ldd	r19, Y+37	; 0x25
     d38:	4e a1       	ldd	r20, Y+38	; 0x26
     d3a:	5f a1       	ldd	r21, Y+39	; 0x27
     d3c:	33 c0       	rjmp	.+102    	; 0xda4 <pf_lseek+0x15e>
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
     d3e:	28 a1       	ldd	r18, Y+32	; 0x20
     d40:	39 a1       	ldd	r19, Y+33	; 0x21
     d42:	4a a1       	ldd	r20, Y+34	; 0x22
     d44:	5b a1       	ldd	r21, Y+35	; 0x23
			fs->curr_clust = clst;
     d46:	2c a3       	std	Y+36, r18	; 0x24
     d48:	3d a3       	std	Y+37, r19	; 0x25
     d4a:	4e a3       	std	Y+38, r20	; 0x26
     d4c:	5f a3       	std	Y+39, r21	; 0x27
     d4e:	2a c0       	rjmp	.+84     	; 0xda4 <pf_lseek+0x15e>
		}
		while (ofs > bcs) {				/* Cluster following loop */
			clst = get_fat(clst);		/* Follow cluster chain */
     d50:	ca 01       	movw	r24, r20
     d52:	b9 01       	movw	r22, r18
     d54:	0e 94 a4 04 	call	0x948	; 0x948 <get_fat>
     d58:	9b 01       	movw	r18, r22
     d5a:	ac 01       	movw	r20, r24
			if (clst <= 1 || clst >= fs->max_clust) goto fe_abort;
     d5c:	62 30       	cpi	r22, 0x02	; 2
     d5e:	71 05       	cpc	r23, r1
     d60:	81 05       	cpc	r24, r1
     d62:	91 05       	cpc	r25, r1
     d64:	08 f4       	brcc	.+2      	; 0xd68 <pf_lseek+0x122>
     d66:	89 c0       	rjmp	.+274    	; 0xe7a <pf_lseek+0x234>
     d68:	88 85       	ldd	r24, Y+8	; 0x08
     d6a:	99 85       	ldd	r25, Y+9	; 0x09
     d6c:	aa 85       	ldd	r26, Y+10	; 0x0a
     d6e:	bb 85       	ldd	r27, Y+11	; 0x0b
     d70:	28 17       	cp	r18, r24
     d72:	39 07       	cpc	r19, r25
     d74:	4a 07       	cpc	r20, r26
     d76:	5b 07       	cpc	r21, r27
     d78:	08 f0       	brcs	.+2      	; 0xd7c <pf_lseek+0x136>
     d7a:	7f c0       	rjmp	.+254    	; 0xe7a <pf_lseek+0x234>
			fs->curr_clust = clst;
     d7c:	2c a3       	std	Y+36, r18	; 0x24
     d7e:	3d a3       	std	Y+37, r19	; 0x25
     d80:	4e a3       	std	Y+38, r20	; 0x26
     d82:	5f a3       	std	Y+39, r21	; 0x27
			fs->fptr += bcs;
     d84:	88 8d       	ldd	r24, Y+24	; 0x18
     d86:	99 8d       	ldd	r25, Y+25	; 0x19
     d88:	aa 8d       	ldd	r26, Y+26	; 0x1a
     d8a:	bb 8d       	ldd	r27, Y+27	; 0x1b
     d8c:	8a 0d       	add	r24, r10
     d8e:	9b 1d       	adc	r25, r11
     d90:	ac 1d       	adc	r26, r12
     d92:	bd 1d       	adc	r27, r13
     d94:	88 8f       	std	Y+24, r24	; 0x18
     d96:	99 8f       	std	Y+25, r25	; 0x19
     d98:	aa 8f       	std	Y+26, r26	; 0x1a
     d9a:	bb 8f       	std	Y+27, r27	; 0x1b
			ofs -= bcs;
     d9c:	6a 18       	sub	r6, r10
     d9e:	7b 08       	sbc	r7, r11
     da0:	8c 08       	sbc	r8, r12
     da2:	9d 08       	sbc	r9, r13
			clst = fs->curr_clust;
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
			fs->curr_clust = clst;
		}
		while (ofs > bcs) {				/* Cluster following loop */
     da4:	a6 14       	cp	r10, r6
     da6:	b7 04       	cpc	r11, r7
     da8:	c8 04       	cpc	r12, r8
     daa:	d9 04       	cpc	r13, r9
     dac:	88 f2       	brcs	.-94     	; 0xd50 <pf_lseek+0x10a>
			if (clst <= 1 || clst >= fs->max_clust) goto fe_abort;
			fs->curr_clust = clst;
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
     dae:	88 8d       	ldd	r24, Y+24	; 0x18
     db0:	99 8d       	ldd	r25, Y+25	; 0x19
     db2:	aa 8d       	ldd	r26, Y+26	; 0x1a
     db4:	bb 8d       	ldd	r27, Y+27	; 0x1b
     db6:	86 0d       	add	r24, r6
     db8:	97 1d       	adc	r25, r7
     dba:	a8 1d       	adc	r26, r8
     dbc:	b9 1d       	adc	r27, r9
     dbe:	88 8f       	std	Y+24, r24	; 0x18
     dc0:	99 8f       	std	Y+25, r25	; 0x19
     dc2:	aa 8f       	std	Y+26, r26	; 0x1a
     dc4:	bb 8f       	std	Y+27, r27	; 0x1b
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
     dc6:	00 91 63 01 	lds	r16, 0x0163
     dca:	10 91 64 01 	lds	r17, 0x0164


	clst -= 2;
     dce:	8e ef       	ldi	r24, 0xFE	; 254
     dd0:	a8 2e       	mov	r10, r24
     dd2:	8f ef       	ldi	r24, 0xFF	; 255
     dd4:	b8 2e       	mov	r11, r24
     dd6:	8f ef       	ldi	r24, 0xFF	; 255
     dd8:	c8 2e       	mov	r12, r24
     dda:	8f ef       	ldi	r24, 0xFF	; 255
     ddc:	d8 2e       	mov	r13, r24
     dde:	a2 0e       	add	r10, r18
     de0:	b3 1e       	adc	r11, r19
     de2:	c4 1e       	adc	r12, r20
     de4:	d5 1e       	adc	r13, r21
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     de6:	f8 01       	movw	r30, r16
     de8:	80 85       	ldd	r24, Z+8	; 0x08
     dea:	91 85       	ldd	r25, Z+9	; 0x09
     dec:	a2 85       	ldd	r26, Z+10	; 0x0a
     dee:	b3 85       	ldd	r27, Z+11	; 0x0b
     df0:	02 97       	sbiw	r24, 0x02	; 2
     df2:	a1 09       	sbc	r26, r1
     df4:	b1 09       	sbc	r27, r1
     df6:	a8 16       	cp	r10, r24
     df8:	b9 06       	cpc	r11, r25
     dfa:	ca 06       	cpc	r12, r26
     dfc:	db 06       	cpc	r13, r27
     dfe:	e8 f5       	brcc	.+122    	; 0xe7a <pf_lseek+0x234>
	return (DWORD)clst * fs->csize + fs->database;
     e00:	21 81       	ldd	r18, Z+1	; 0x01
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	40 e0       	ldi	r20, 0x00	; 0
     e06:	50 e0       	ldi	r21, 0x00	; 0
     e08:	c6 01       	movw	r24, r12
     e0a:	b5 01       	movw	r22, r10
     e0c:	0e 94 2e 10 	call	0x205c	; 0x205c <__mulsi3>
     e10:	9b 01       	movw	r18, r22
     e12:	ac 01       	movw	r20, r24
     e14:	f8 01       	movw	r30, r16
     e16:	84 89       	ldd	r24, Z+20	; 0x14
     e18:	95 89       	ldd	r25, Z+21	; 0x15
     e1a:	a6 89       	ldd	r26, Z+22	; 0x16
     e1c:	b7 89       	ldd	r27, Z+23	; 0x17
     e1e:	28 0f       	add	r18, r24
     e20:	39 1f       	adc	r19, r25
     e22:	4a 1f       	adc	r20, r26
     e24:	5b 1f       	adc	r21, r27
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
		sect = clust2sect(clst);		/* Current sector */
		if (!sect) goto fe_abort;
     e26:	21 15       	cp	r18, r1
     e28:	31 05       	cpc	r19, r1
     e2a:	41 05       	cpc	r20, r1
     e2c:	51 05       	cpc	r21, r1
     e2e:	29 f1       	breq	.+74     	; 0xe7a <pf_lseek+0x234>
		fs->csect = (BYTE)(ofs / 512);	/* Sector offset in the cluster */
     e30:	d4 01       	movw	r26, r8
     e32:	c3 01       	movw	r24, r6
     e34:	19 e0       	ldi	r17, 0x09	; 9
     e36:	b6 95       	lsr	r27
     e38:	a7 95       	ror	r26
     e3a:	97 95       	ror	r25
     e3c:	87 95       	ror	r24
     e3e:	1a 95       	dec	r17
     e40:	d1 f7       	brne	.-12     	; 0xe36 <pf_lseek+0x1f0>
     e42:	98 2f       	mov	r25, r24
     e44:	8b 83       	std	Y+3, r24	; 0x03
		if (ofs % 512)
     e46:	ff ef       	ldi	r31, 0xFF	; 255
     e48:	ef 2e       	mov	r14, r31
     e4a:	f1 e0       	ldi	r31, 0x01	; 1
     e4c:	ff 2e       	mov	r15, r31
     e4e:	01 2d       	mov	r16, r1
     e50:	11 2d       	mov	r17, r1
     e52:	6e 20       	and	r6, r14
     e54:	7f 20       	and	r7, r15
     e56:	80 22       	and	r8, r16
     e58:	91 22       	and	r9, r17
     e5a:	61 14       	cp	r6, r1
     e5c:	71 04       	cpc	r7, r1
     e5e:	81 04       	cpc	r8, r1
     e60:	91 04       	cpc	r9, r1
     e62:	79 f0       	breq	.+30     	; 0xe82 <pf_lseek+0x23c>
			fs->dsect = sect + fs->csect++;
     e64:	28 0f       	add	r18, r24
     e66:	31 1d       	adc	r19, r1
     e68:	41 1d       	adc	r20, r1
     e6a:	51 1d       	adc	r21, r1
     e6c:	28 a7       	std	Y+40, r18	; 0x28
     e6e:	39 a7       	std	Y+41, r19	; 0x29
     e70:	4a a7       	std	Y+42, r20	; 0x2a
     e72:	5b a7       	std	Y+43, r21	; 0x2b
     e74:	9f 5f       	subi	r25, 0xFF	; 255
     e76:	9b 83       	std	Y+3, r25	; 0x03
     e78:	04 c0       	rjmp	.+8      	; 0xe82 <pf_lseek+0x23c>
	}

	return FR_OK;

fe_abort:
	fs->flag = 0;
     e7a:	1a 82       	std	Y+2, r1	; 0x02
     e7c:	21 e0       	ldi	r18, 0x01	; 1
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <pf_lseek+0x240>
	return FR_DISK_ERR;
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
}
     e86:	c9 01       	movw	r24, r18
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
     e8c:	e2 e1       	ldi	r30, 0x12	; 18
     e8e:	0c 94 c6 10 	jmp	0x218c	; 0x218c <__epilogue_restores__>

00000e92 <pf_readdir>:

FRESULT pf_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
     e92:	ac e2       	ldi	r26, 0x2C	; 44
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	ef e4       	ldi	r30, 0x4F	; 79
     e98:	f7 e0       	ldi	r31, 0x07	; 7
     e9a:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <__prologue_saves__+0x10>
     e9e:	7c 01       	movw	r14, r24
     ea0:	5b 01       	movw	r10, r22
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
     ea2:	e0 91 63 01 	lds	r30, 0x0163
     ea6:	f0 91 64 01 	lds	r31, 0x0164


	if (!fs) {				/* Check file system */
     eaa:	30 97       	sbiw	r30, 0x00	; 0
     eac:	19 f4       	brne	.+6      	; 0xeb4 <pf_readdir+0x22>
     eae:	26 e0       	ldi	r18, 0x06	; 6
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	d0 c0       	rjmp	.+416    	; 0x1054 <pf_readdir+0x1c2>
		res = FR_NOT_ENABLED;
	} else {
		fs->buf = dir;
     eb4:	ce 01       	movw	r24, r28
     eb6:	0d 96       	adiw	r24, 0x0d	; 13
     eb8:	97 83       	std	Z+7, r25	; 0x07
     eba:	86 83       	std	Z+6, r24	; 0x06
		dj->fn = sp;
     ebc:	ce 01       	movw	r24, r28
     ebe:	01 96       	adiw	r24, 0x01	; 1
     ec0:	d7 01       	movw	r26, r14
     ec2:	13 96       	adiw	r26, 0x03	; 3
     ec4:	9c 93       	st	X, r25
     ec6:	8e 93       	st	-X, r24
     ec8:	12 97       	sbiw	r26, 0x02	; 2
		if (!fno) {
     eca:	61 15       	cp	r22, r1
     ecc:	71 05       	cpc	r23, r1
     ece:	29 f4       	brne	.+10     	; 0xeda <pf_readdir+0x48>
			res = dir_rewind(dj);
     ed0:	c7 01       	movw	r24, r14
     ed2:	0e 94 28 04 	call	0x850	; 0x850 <dir_rewind>
     ed6:	9c 01       	movw	r18, r24
     ed8:	bd c0       	rjmp	.+378    	; 0x1054 <pf_readdir+0x1c2>
	FRESULT res;
	BYTE a, c, *dir;


	res = FR_NO_FILE;
	dir = FatFs->buf;
     eda:	c6 80       	ldd	r12, Z+6	; 0x06
     edc:	d7 80       	ldd	r13, Z+7	; 0x07
     ede:	23 e0       	ldi	r18, 0x03	; 3
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	28 c0       	rjmp	.+80     	; 0xf34 <pf_readdir+0xa2>
	while (dj->sect) {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
     ee4:	f7 01       	movw	r30, r14
     ee6:	20 81       	ld	r18, Z
     ee8:	31 81       	ldd	r19, Z+1	; 0x01
     eea:	2f 70       	andi	r18, 0x0F	; 15
     eec:	30 70       	andi	r19, 0x00	; 0
     eee:	e5 e0       	ldi	r30, 0x05	; 5
     ef0:	22 0f       	add	r18, r18
     ef2:	33 1f       	adc	r19, r19
     ef4:	ea 95       	dec	r30
     ef6:	e1 f7       	brne	.-8      	; 0xef0 <pf_readdir+0x5e>
     ef8:	c6 01       	movw	r24, r12
     efa:	00 e2       	ldi	r16, 0x20	; 32
     efc:	10 e0       	ldi	r17, 0x00	; 0
     efe:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
     f02:	89 2b       	or	r24, r25
     f04:	19 f0       	breq	.+6      	; 0xf0c <pf_readdir+0x7a>
     f06:	21 e0       	ldi	r18, 0x01	; 1
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	21 c0       	rjmp	.+66     	; 0xf4e <pf_readdir+0xbc>
		c = dir[DIR_Name];
     f0c:	d6 01       	movw	r26, r12
     f0e:	9c 91       	ld	r25, X
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
     f10:	99 23       	and	r25, r25
     f12:	09 f4       	brne	.+2      	; 0xf16 <pf_readdir+0x84>
     f14:	a4 c0       	rjmp	.+328    	; 0x105e <pf_readdir+0x1cc>
		a = dir[DIR_Attr] & AM_MASK;
     f16:	1b 96       	adiw	r26, 0x0b	; 11
     f18:	8c 91       	ld	r24, X
		if (c != 0xE5 && c != '.' && !(a & AM_VOL))	/* Is it a valid entry? */
     f1a:	95 3e       	cpi	r25, 0xE5	; 229
     f1c:	29 f0       	breq	.+10     	; 0xf28 <pf_readdir+0x96>
     f1e:	9e 32       	cpi	r25, 0x2E	; 46
     f20:	19 f0       	breq	.+6      	; 0xf28 <pf_readdir+0x96>
     f22:	8f 73       	andi	r24, 0x3F	; 63
     f24:	83 ff       	sbrs	r24, 3
     f26:	21 c0       	rjmp	.+66     	; 0xf6a <pf_readdir+0xd8>
			break;
		res = dir_next(dj);				/* Next entry */
     f28:	c7 01       	movw	r24, r14
     f2a:	0e 94 75 05 	call	0xaea	; 0xaea <dir_next>
     f2e:	9c 01       	movw	r18, r24
		if (res != FR_OK) break;
     f30:	00 97       	sbiw	r24, 0x00	; 0
     f32:	69 f4       	brne	.+26     	; 0xf4e <pf_readdir+0xbc>
	BYTE a, c, *dir;


	res = FR_NO_FILE;
	dir = FatFs->buf;
	while (dj->sect) {
     f34:	f7 01       	movw	r30, r14
     f36:	44 85       	ldd	r20, Z+12	; 0x0c
     f38:	55 85       	ldd	r21, Z+13	; 0x0d
     f3a:	66 85       	ldd	r22, Z+14	; 0x0e
     f3c:	77 85       	ldd	r23, Z+15	; 0x0f
     f3e:	41 15       	cp	r20, r1
     f40:	51 05       	cpc	r21, r1
     f42:	61 05       	cpc	r22, r1
     f44:	71 05       	cpc	r23, r1
     f46:	71 f6       	brne	.-100    	; 0xee4 <pf_readdir+0x52>
			break;
		res = dir_next(dj);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
     f48:	21 15       	cp	r18, r1
     f4a:	31 05       	cpc	r19, r1
     f4c:	71 f0       	breq	.+28     	; 0xf6a <pf_readdir+0xd8>
     f4e:	d7 01       	movw	r26, r14
     f50:	1c 96       	adiw	r26, 0x0c	; 12
     f52:	1d 92       	st	X+, r1
     f54:	1d 92       	st	X+, r1
     f56:	1d 92       	st	X+, r1
     f58:	1c 92       	st	X, r1
     f5a:	1f 97       	sbiw	r26, 0x0f	; 15
		dj->fn = sp;
		if (!fno) {
			res = dir_rewind(dj);
		} else {
			res = dir_read(dj);
			if (res == FR_NO_FILE) {
     f5c:	23 30       	cpi	r18, 0x03	; 3
     f5e:	31 05       	cpc	r19, r1
     f60:	21 f0       	breq	.+8      	; 0xf6a <pf_readdir+0xd8>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
     f62:	21 15       	cp	r18, r1
     f64:	31 05       	cpc	r19, r1
     f66:	09 f0       	breq	.+2      	; 0xf6a <pf_readdir+0xd8>
     f68:	75 c0       	rjmp	.+234    	; 0x1054 <pf_readdir+0x1c2>
{
	BYTE i, c, *dir;
	char *p;


	p = fno->fname;
     f6a:	95 01       	movw	r18, r10
     f6c:	27 5f       	subi	r18, 0xF7	; 247
     f6e:	3f 4f       	sbci	r19, 0xFF	; 255
	if (dj->sect) {
     f70:	f7 01       	movw	r30, r14
     f72:	84 85       	ldd	r24, Z+12	; 0x0c
     f74:	95 85       	ldd	r25, Z+13	; 0x0d
     f76:	a6 85       	ldd	r26, Z+14	; 0x0e
     f78:	b7 85       	ldd	r27, Z+15	; 0x0f
     f7a:	00 97       	sbiw	r24, 0x00	; 0
     f7c:	a1 05       	cpc	r26, r1
     f7e:	b1 05       	cpc	r27, r1
     f80:	09 f4       	brne	.+2      	; 0xf84 <pf_readdir+0xf2>
     f82:	56 c0       	rjmp	.+172    	; 0x1030 <pf_readdir+0x19e>
		dir = FatFs->buf;
     f84:	e0 91 63 01 	lds	r30, 0x0163
     f88:	f0 91 64 01 	lds	r31, 0x0164
     f8c:	46 81       	ldd	r20, Z+6	; 0x06
     f8e:	57 81       	ldd	r21, Z+7	; 0x07
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	90 e0       	ldi	r25, 0x00	; 0
		for (i = 0; i < 8; i++) {	/* Copy file name body */
			c = dir[i];
     f94:	fa 01       	movw	r30, r20
     f96:	e8 0f       	add	r30, r24
     f98:	f9 1f       	adc	r31, r25
     f9a:	e0 81       	ld	r30, Z
			if (c == ' ') break;
     f9c:	e0 32       	cpi	r30, 0x20	; 32
     f9e:	51 f0       	breq	.+20     	; 0xfb4 <pf_readdir+0x122>
			if (c == 0x05) c = 0xE5;
     fa0:	e5 30       	cpi	r30, 0x05	; 5
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <pf_readdir+0x114>
     fa4:	e5 ee       	ldi	r30, 0xE5	; 229
			*p++ = c;
     fa6:	d9 01       	movw	r26, r18
     fa8:	ed 93       	st	X+, r30
     faa:	9d 01       	movw	r18, r26
     fac:	01 96       	adiw	r24, 0x01	; 1


	p = fno->fname;
	if (dj->sect) {
		dir = FatFs->buf;
		for (i = 0; i < 8; i++) {	/* Copy file name body */
     fae:	88 30       	cpi	r24, 0x08	; 8
     fb0:	91 05       	cpc	r25, r1
     fb2:	81 f7       	brne	.-32     	; 0xf94 <pf_readdir+0x102>
			c = dir[i];
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
     fb4:	fa 01       	movw	r30, r20
     fb6:	80 85       	ldd	r24, Z+8	; 0x08
     fb8:	80 32       	cpi	r24, 0x20	; 32
     fba:	11 f4       	brne	.+4      	; 0xfc0 <pf_readdir+0x12e>
     fbc:	f9 01       	movw	r30, r18
     fbe:	10 c0       	rjmp	.+32     	; 0xfe0 <pf_readdir+0x14e>
			*p++ = '.';
     fc0:	f9 01       	movw	r30, r18
     fc2:	8e e2       	ldi	r24, 0x2E	; 46
     fc4:	81 93       	st	Z+, r24
     fc6:	da 01       	movw	r26, r20
			for (i = 8; i < 11; i++) {
     fc8:	2c 5f       	subi	r18, 0xFC	; 252
     fca:	3f 4f       	sbci	r19, 0xFF	; 255
				c = dir[i];
     fcc:	18 96       	adiw	r26, 0x08	; 8
     fce:	8c 91       	ld	r24, X
     fd0:	18 97       	sbiw	r26, 0x08	; 8
				if (c == ' ') break;
     fd2:	80 32       	cpi	r24, 0x20	; 32
     fd4:	29 f0       	breq	.+10     	; 0xfe0 <pf_readdir+0x14e>
				*p++ = c;
     fd6:	81 93       	st	Z+, r24
     fd8:	11 96       	adiw	r26, 0x01	; 1
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
     fda:	e2 17       	cp	r30, r18
     fdc:	f3 07       	cpc	r31, r19
     fde:	b1 f7       	brne	.-20     	; 0xfcc <pf_readdir+0x13a>
				c = dir[i];
				if (c == ' ') break;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
     fe0:	da 01       	movw	r26, r20
     fe2:	1b 96       	adiw	r26, 0x0b	; 11
     fe4:	8c 91       	ld	r24, X
     fe6:	d5 01       	movw	r26, r10
     fe8:	18 96       	adiw	r26, 0x08	; 8
     fea:	8c 93       	st	X, r24
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
     fec:	da 01       	movw	r26, r20
     fee:	5c 96       	adiw	r26, 0x1c	; 28
     ff0:	0d 91       	ld	r16, X+
     ff2:	1d 91       	ld	r17, X+
     ff4:	2d 91       	ld	r18, X+
     ff6:	3c 91       	ld	r19, X
     ff8:	5f 97       	sbiw	r26, 0x1f	; 31
     ffa:	d5 01       	movw	r26, r10
     ffc:	0d 93       	st	X+, r16
     ffe:	1d 93       	st	X+, r17
    1000:	2d 93       	st	X+, r18
    1002:	3c 93       	st	X, r19
    1004:	13 97       	sbiw	r26, 0x03	; 3
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    1006:	da 01       	movw	r26, r20
    1008:	58 96       	adiw	r26, 0x18	; 24
    100a:	8d 91       	ld	r24, X+
    100c:	9c 91       	ld	r25, X
    100e:	59 97       	sbiw	r26, 0x19	; 25
    1010:	d5 01       	movw	r26, r10
    1012:	15 96       	adiw	r26, 0x05	; 5
    1014:	9c 93       	st	X, r25
    1016:	8e 93       	st	-X, r24
    1018:	14 97       	sbiw	r26, 0x04	; 4
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    101a:	da 01       	movw	r26, r20
    101c:	56 96       	adiw	r26, 0x16	; 22
    101e:	8d 91       	ld	r24, X+
    1020:	9c 91       	ld	r25, X
    1022:	57 97       	sbiw	r26, 0x17	; 23
    1024:	d5 01       	movw	r26, r10
    1026:	17 96       	adiw	r26, 0x07	; 7
    1028:	9c 93       	st	X, r25
    102a:	8e 93       	st	-X, r24
    102c:	16 97       	sbiw	r26, 0x06	; 6
    102e:	9f 01       	movw	r18, r30
	}
	*p = 0;
    1030:	f9 01       	movw	r30, r18
    1032:	10 82       	st	Z, r1
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj);			/* Increment index for next */
    1034:	c7 01       	movw	r24, r14
    1036:	0e 94 75 05 	call	0xaea	; 0xaea <dir_next>
    103a:	9c 01       	movw	r18, r24
				if (res == FR_NO_FILE) {
    103c:	83 30       	cpi	r24, 0x03	; 3
    103e:	91 05       	cpc	r25, r1
    1040:	49 f4       	brne	.+18     	; 0x1054 <pf_readdir+0x1c2>
					dj->sect = 0;
    1042:	d7 01       	movw	r26, r14
    1044:	1c 96       	adiw	r26, 0x0c	; 12
    1046:	1d 92       	st	X+, r1
    1048:	1d 92       	st	X+, r1
    104a:	1d 92       	st	X+, r1
    104c:	1c 92       	st	X, r1
    104e:	1f 97       	sbiw	r26, 0x0f	; 15
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	return res;
}
    1054:	c9 01       	movw	r24, r18
    1056:	ac 96       	adiw	r28, 0x2c	; 44
    1058:	ea e0       	ldi	r30, 0x0A	; 10
    105a:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__epilogue_restores__+0x10>
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj);			/* Increment index for next */
				if (res == FR_NO_FILE) {
					dj->sect = 0;
    105e:	23 e0       	ldi	r18, 0x03	; 3
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	75 cf       	rjmp	.-278    	; 0xf4e <pf_readdir+0xbc>

00001064 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const char *path	/* Full-path string to find a file or directory */
)
{
    1064:	a0 e0       	ldi	r26, 0x00	; 0
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e8 e3       	ldi	r30, 0x38	; 56
    106a:	f8 e0       	ldi	r31, 0x08	; 8
    106c:	0c 94 ad 10 	jmp	0x215a	; 0x215a <__prologue_saves__+0x6>
    1070:	6c 01       	movw	r12, r24
    1072:	5b 01       	movw	r10, r22
    1074:	03 c0       	rjmp	.+6      	; 0x107c <follow_path+0x18>
	FRESULT res;
	BYTE *dir;


	while (*path == ' ') path++;		/* Skip leading spaces */
    1076:	08 94       	sec
    1078:	a1 1c       	adc	r10, r1
    107a:	b1 1c       	adc	r11, r1
    107c:	d5 01       	movw	r26, r10
    107e:	8c 91       	ld	r24, X
    1080:	80 32       	cpi	r24, 0x20	; 32
    1082:	c9 f3       	breq	.-14     	; 0x1076 <follow_path+0x12>
	if (*path == '/') path++;			/* Strip heading separator */
    1084:	8f 32       	cpi	r24, 0x2F	; 47
    1086:	19 f4       	brne	.+6      	; 0x108e <follow_path+0x2a>
    1088:	08 94       	sec
    108a:	a1 1c       	adc	r10, r1
    108c:	b1 1c       	adc	r11, r1
	dj->sclust = 0;						/* Set start directory (always root dir) */
    108e:	f6 01       	movw	r30, r12
    1090:	14 82       	std	Z+4, r1	; 0x04
    1092:	15 82       	std	Z+5, r1	; 0x05
    1094:	16 82       	std	Z+6, r1	; 0x06
    1096:	17 82       	std	Z+7, r1	; 0x07

	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
    1098:	d5 01       	movw	r26, r10
    109a:	8c 91       	ld	r24, X
    109c:	81 32       	cpi	r24, 0x21	; 33
    109e:	68 f4       	brcc	.+26     	; 0x10ba <follow_path+0x56>
		res = dir_rewind(dj);
    10a0:	c6 01       	movw	r24, r12
    10a2:	0e 94 28 04 	call	0x850	; 0x850 <dir_rewind>
    10a6:	ec 01       	movw	r28, r24
		FatFs->buf[0] = 0;
    10a8:	e0 91 63 01 	lds	r30, 0x0163
    10ac:	f0 91 64 01 	lds	r31, 0x0164
    10b0:	06 80       	ldd	r0, Z+6	; 0x06
    10b2:	f7 81       	ldd	r31, Z+7	; 0x07
    10b4:	e0 2d       	mov	r30, r0
    10b6:	10 82       	st	Z, r1
    10b8:	b1 c0       	rjmp	.+354    	; 0x121c <follow_path+0x1b8>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
    10ba:	a0 e2       	ldi	r26, 0x20	; 32
    10bc:	5a 2e       	mov	r5, r26
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
    10be:	66 24       	eor	r6, r6
    10c0:	63 94       	inc	r6
{
	BYTE c, d, ni, si, i, *sfn;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    10c2:	f6 01       	movw	r30, r12
    10c4:	a2 81       	ldd	r26, Z+2	; 0x02
    10c6:	b3 81       	ldd	r27, Z+3	; 0x03
/*-----------------------------------------------------------------------*/

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
    10c8:	fd 01       	movw	r30, r26
	while (cnt--) *d++ = (char)val;
    10ca:	cd 01       	movw	r24, r26
    10cc:	0b 96       	adiw	r24, 0x0b	; 11
    10ce:	01 c0       	rjmp	.+2      	; 0x10d2 <follow_path+0x6e>
    10d0:	51 92       	st	Z+, r5
    10d2:	e8 17       	cp	r30, r24
    10d4:	f9 07       	cpc	r31, r25
    10d6:	e1 f7       	brne	.-8      	; 0x10d0 <follow_path+0x6c>
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	77 24       	eor	r7, r7
    10dc:	38 e0       	ldi	r19, 0x08	; 8
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <follow_path+0x80>
    10e0:	28 e0       	ldi	r18, 0x08	; 8
    10e2:	3b e0       	ldi	r19, 0x0B	; 11
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
    10e4:	f5 01       	movw	r30, r10
    10e6:	e7 0d       	add	r30, r7
    10e8:	f1 1d       	adc	r31, r1
    10ea:	90 81       	ld	r25, Z
    10ec:	73 94       	inc	r7
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
    10ee:	91 32       	cpi	r25, 0x21	; 33
    10f0:	b0 f0       	brcs	.+44     	; 0x111e <follow_path+0xba>
    10f2:	9f 32       	cpi	r25, 0x2F	; 47
    10f4:	a1 f0       	breq	.+40     	; 0x111e <follow_path+0xba>
		if (c == '.' || i >= ni) {
    10f6:	9e 32       	cpi	r25, 0x2E	; 46
    10f8:	11 f0       	breq	.+4      	; 0x10fe <follow_path+0x9a>
    10fa:	23 17       	cp	r18, r19
    10fc:	28 f0       	brcs	.+10     	; 0x1108 <follow_path+0xa4>
			if (ni != 8 || c != '.') break;
    10fe:	38 30       	cpi	r19, 0x08	; 8
    1100:	71 f4       	brne	.+28     	; 0x111e <follow_path+0xba>
    1102:	9e 32       	cpi	r25, 0x2E	; 46
    1104:	69 f3       	breq	.-38     	; 0x10e0 <follow_path+0x7c>
    1106:	0b c0       	rjmp	.+22     	; 0x111e <follow_path+0xba>
		if (IsDBCS1(c) && i >= ni - 1) {	/* DBC 1st byte? */
			d = p[si++];					/* Get 2nd byte */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
    1108:	89 2f       	mov	r24, r25
    110a:	81 56       	subi	r24, 0x61	; 97
    110c:	8a 31       	cpi	r24, 0x1A	; 26
    110e:	08 f4       	brcc	.+2      	; 0x1112 <follow_path+0xae>
    1110:	90 52       	subi	r25, 0x20	; 32
			sfn[i++] = c;
    1112:	fd 01       	movw	r30, r26
    1114:	e2 0f       	add	r30, r18
    1116:	f1 1d       	adc	r31, r1
    1118:	90 83       	st	Z, r25
    111a:	2f 5f       	subi	r18, 0xFF	; 255
    111c:	e3 cf       	rjmp	.-58     	; 0x10e4 <follow_path+0x80>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
    111e:	1b 96       	adiw	r26, 0x0b	; 11
    1120:	1c 92       	st	X, r1
    1122:	1b 97       	sbiw	r26, 0x0b	; 11
    1124:	91 32       	cpi	r25, 0x21	; 33
    1126:	10 f4       	brcc	.+4      	; 0x112c <follow_path+0xc8>
    1128:	1b 96       	adiw	r26, 0x0b	; 11
    112a:	6c 92       	st	X, r6
{
	FRESULT res;
	BYTE c, *dir;


	res = dir_rewind(dj);			/* Rewind directory object */
    112c:	c6 01       	movw	r24, r12
    112e:	0e 94 28 04 	call	0x850	; 0x850 <dir_rewind>
    1132:	ec 01       	movw	r28, r24
	if (res != FR_OK) return res;
    1134:	00 97       	sbiw	r24, 0x00	; 0
    1136:	09 f0       	breq	.+2      	; 0x113a <follow_path+0xd6>
    1138:	42 c0       	rjmp	.+132    	; 0x11be <follow_path+0x15a>

	dir = FatFs->buf;
    113a:	e0 91 63 01 	lds	r30, 0x0163
    113e:	f0 91 64 01 	lds	r31, 0x0164
    1142:	e6 80       	ldd	r14, Z+6	; 0x06
    1144:	f7 80       	ldd	r15, Z+7	; 0x07
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    1146:	fb e0       	ldi	r31, 0x0B	; 11
    1148:	8f 2e       	mov	r8, r31
    114a:	91 2c       	mov	r9, r1
    114c:	8e 0c       	add	r8, r14
    114e:	9f 1c       	adc	r9, r15
	res = dir_rewind(dj);			/* Rewind directory object */
	if (res != FR_OK) return res;

	dir = FatFs->buf;
	do {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
    1150:	d6 01       	movw	r26, r12
    1152:	1c 96       	adiw	r26, 0x0c	; 12
    1154:	4d 91       	ld	r20, X+
    1156:	5d 91       	ld	r21, X+
    1158:	6d 91       	ld	r22, X+
    115a:	7c 91       	ld	r23, X
    115c:	1f 97       	sbiw	r26, 0x0f	; 15
    115e:	2d 91       	ld	r18, X+
    1160:	3c 91       	ld	r19, X
    1162:	2f 70       	andi	r18, 0x0F	; 15
    1164:	30 70       	andi	r19, 0x00	; 0
    1166:	e5 e0       	ldi	r30, 0x05	; 5
    1168:	22 0f       	add	r18, r18
    116a:	33 1f       	adc	r19, r19
    116c:	ea 95       	dec	r30
    116e:	e1 f7       	brne	.-8      	; 0x1168 <follow_path+0x104>
    1170:	c7 01       	movw	r24, r14
    1172:	00 e2       	ldi	r16, 0x20	; 32
    1174:	10 e0       	ldi	r17, 0x00	; 0
    1176:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
    117a:	89 2b       	or	r24, r25
    117c:	19 f0       	breq	.+6      	; 0x1184 <follow_path+0x120>
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	1c c0       	rjmp	.+56     	; 0x11bc <follow_path+0x158>
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1184:	f7 01       	movw	r30, r14
    1186:	80 81       	ld	r24, Z
    1188:	88 23       	and	r24, r24
    118a:	09 f4       	brne	.+2      	; 0x118e <follow_path+0x12a>
    118c:	4d c0       	rjmp	.+154    	; 0x1228 <follow_path+0x1c4>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    118e:	83 85       	ldd	r24, Z+11	; 0x0b
    1190:	83 fd       	sbrc	r24, 3
    1192:	0f c0       	rjmp	.+30     	; 0x11b2 <follow_path+0x14e>
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
    1194:	f6 01       	movw	r30, r12
    1196:	a2 81       	ldd	r26, Z+2	; 0x02
    1198:	b3 81       	ldd	r27, Z+3	; 0x03
    119a:	f7 01       	movw	r30, r14
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    119c:	e8 15       	cp	r30, r8
    119e:	f9 05       	cpc	r31, r9
    11a0:	09 f4       	brne	.+2      	; 0x11a4 <follow_path+0x140>
    11a2:	45 c0       	rjmp	.+138    	; 0x122e <follow_path+0x1ca>
    11a4:	90 81       	ld	r25, Z
    11a6:	8c 91       	ld	r24, X
    11a8:	98 17       	cp	r25, r24
    11aa:	19 f4       	brne	.+6      	; 0x11b2 <follow_path+0x14e>
    11ac:	31 96       	adiw	r30, 0x01	; 1
    11ae:	11 96       	adiw	r26, 0x01	; 1
    11b0:	f5 cf       	rjmp	.-22     	; 0x119c <follow_path+0x138>
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
		res = dir_next(dj);							/* Next entry */
    11b2:	c6 01       	movw	r24, r12
    11b4:	0e 94 75 05 	call	0xaea	; 0xaea <dir_next>
	} while (res == FR_OK);
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	51 f2       	breq	.-108    	; 0x1150 <follow_path+0xec>
    11bc:	ec 01       	movw	r28, r24
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
    11be:	c3 30       	cpi	r28, 0x03	; 3
    11c0:	d1 05       	cpc	r29, r1
    11c2:	61 f5       	brne	.+88     	; 0x121c <follow_path+0x1b8>
    11c4:	d6 01       	movw	r26, r12
    11c6:	12 96       	adiw	r26, 0x02	; 2
    11c8:	ed 91       	ld	r30, X+
    11ca:	fc 91       	ld	r31, X
    11cc:	13 97       	sbiw	r26, 0x03	; 3
    11ce:	83 85       	ldd	r24, Z+11	; 0x0b
    11d0:	88 23       	and	r24, r24
    11d2:	11 f1       	breq	.+68     	; 0x1218 <follow_path+0x1b4>
    11d4:	23 c0       	rjmp	.+70     	; 0x121c <follow_path+0x1b8>
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			dir = FatFs->buf;				/* There is next segment. Follow the sub directory */
    11d6:	e0 91 63 01 	lds	r30, 0x0163
    11da:	f0 91 64 01 	lds	r31, 0x0164
    11de:	06 80       	ldd	r0, Z+6	; 0x06
    11e0:	f7 81       	ldd	r31, Z+7	; 0x07
    11e2:	e0 2d       	mov	r30, r0
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    11e4:	83 85       	ldd	r24, Z+11	; 0x0b
    11e6:	84 ff       	sbrs	r24, 4
    11e8:	17 c0       	rjmp	.+46     	; 0x1218 <follow_path+0x1b4>
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    11ea:	a7 0c       	add	r10, r7
    11ec:	b1 1c       	adc	r11, r1
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			dir = FatFs->buf;				/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust =
    11ee:	84 89       	ldd	r24, Z+20	; 0x14
    11f0:	95 89       	ldd	r25, Z+21	; 0x15
    11f2:	a0 e0       	ldi	r26, 0x00	; 0
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	dc 01       	movw	r26, r24
    11f8:	99 27       	eor	r25, r25
    11fa:	88 27       	eor	r24, r24
    11fc:	22 8d       	ldd	r18, Z+26	; 0x1a
    11fe:	33 8d       	ldd	r19, Z+27	; 0x1b
    1200:	40 e0       	ldi	r20, 0x00	; 0
    1202:	50 e0       	ldi	r21, 0x00	; 0
    1204:	82 2b       	or	r24, r18
    1206:	93 2b       	or	r25, r19
    1208:	a4 2b       	or	r26, r20
    120a:	b5 2b       	or	r27, r21
    120c:	f6 01       	movw	r30, r12
    120e:	84 83       	std	Z+4, r24	; 0x04
    1210:	95 83       	std	Z+5, r25	; 0x05
    1212:	a6 83       	std	Z+6, r26	; 0x06
    1214:	b7 83       	std	Z+7, r27	; 0x07
    1216:	55 cf       	rjmp	.-342    	; 0x10c2 <follow_path+0x5e>
#if _FS_FAT32
				((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | 
#endif
				LD_WORD(dir+DIR_FstClusLO);
		}
    1218:	c4 e0       	ldi	r28, 0x04	; 4
    121a:	d0 e0       	ldi	r29, 0x00	; 0
	}

	return res;
}
    121c:	ce 01       	movw	r24, r28
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	ef e0       	ldi	r30, 0x0F	; 15
    1224:	0c 94 c9 10 	jmp	0x2192	; 0x2192 <__epilogue_restores__+0x6>
			dj->sclust =
#if _FS_FAT32
				((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | 
#endif
				LD_WORD(dir+DIR_FstClusLO);
		}
    1228:	c3 e0       	ldi	r28, 0x03	; 3
    122a:	d0 e0       	ldi	r29, 0x00	; 0
    122c:	c8 cf       	rjmp	.-112    	; 0x11be <follow_path+0x15a>
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
    122e:	d6 01       	movw	r26, r12
    1230:	12 96       	adiw	r26, 0x02	; 2
    1232:	ed 91       	ld	r30, X+
    1234:	fc 91       	ld	r31, X
    1236:	13 97       	sbiw	r26, 0x03	; 3
    1238:	83 85       	ldd	r24, Z+11	; 0x0b
    123a:	88 23       	and	r24, r24
    123c:	61 f2       	breq	.-104    	; 0x11d6 <follow_path+0x172>
    123e:	ee cf       	rjmp	.-36     	; 0x121c <follow_path+0x1b8>

00001240 <pf_opendir>:

FRESULT pf_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const char *path	/* Pointer to the directory path */
)
{
    1240:	ac e2       	ldi	r26, 0x2C	; 44
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e6 e2       	ldi	r30, 0x26	; 38
    1246:	f9 e0       	ldi	r31, 0x09	; 9
    1248:	0c 94 b6 10 	jmp	0x216c	; 0x216c <__prologue_saves__+0x18>
    124c:	8c 01       	movw	r16, r24
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
    124e:	e0 91 63 01 	lds	r30, 0x0163
    1252:	f0 91 64 01 	lds	r31, 0x0164


	if (!fs) {				/* Check file system */
    1256:	30 97       	sbiw	r30, 0x00	; 0
    1258:	19 f4       	brne	.+6      	; 0x1260 <pf_opendir+0x20>
    125a:	26 e0       	ldi	r18, 0x06	; 6
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	36 c0       	rjmp	.+108    	; 0x12cc <pf_opendir+0x8c>
		res = FR_NOT_ENABLED;
	} else {
		fs->buf = dir;
    1260:	3d e0       	ldi	r19, 0x0D	; 13
    1262:	e3 2e       	mov	r14, r19
    1264:	f1 2c       	mov	r15, r1
    1266:	ec 0e       	add	r14, r28
    1268:	fd 1e       	adc	r15, r29
    126a:	f7 82       	std	Z+7, r15	; 0x07
    126c:	e6 82       	std	Z+6, r14	; 0x06
		dj->fn = sp;
    126e:	ce 01       	movw	r24, r28
    1270:	01 96       	adiw	r24, 0x01	; 1
    1272:	f8 01       	movw	r30, r16
    1274:	93 83       	std	Z+3, r25	; 0x03
    1276:	82 83       	std	Z+2, r24	; 0x02
		res = follow_path(dj, path);			/* Follow the path to the directory */
    1278:	c8 01       	movw	r24, r16
    127a:	0e 94 32 08 	call	0x1064	; 0x1064 <follow_path>
    127e:	9c 01       	movw	r18, r24
		if (res == FR_OK) {						/* Follow completed */
    1280:	00 97       	sbiw	r24, 0x00	; 0
    1282:	f9 f4       	brne	.+62     	; 0x12c2 <pf_opendir+0x82>
			if (dir[0]) {						/* It is not the root dir */
    1284:	8d 85       	ldd	r24, Y+13	; 0x0d
    1286:	88 23       	and	r24, r24
    1288:	c1 f0       	breq	.+48     	; 0x12ba <pf_opendir+0x7a>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    128a:	88 8d       	ldd	r24, Y+24	; 0x18
    128c:	84 ff       	sbrs	r24, 4
    128e:	1c c0       	rjmp	.+56     	; 0x12c8 <pf_opendir+0x88>
					dj->sclust =
    1290:	f7 01       	movw	r30, r14
    1292:	84 89       	ldd	r24, Z+20	; 0x14
    1294:	95 89       	ldd	r25, Z+21	; 0x15
    1296:	a0 e0       	ldi	r26, 0x00	; 0
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	dc 01       	movw	r26, r24
    129c:	99 27       	eor	r25, r25
    129e:	88 27       	eor	r24, r24
    12a0:	22 8d       	ldd	r18, Z+26	; 0x1a
    12a2:	33 8d       	ldd	r19, Z+27	; 0x1b
    12a4:	40 e0       	ldi	r20, 0x00	; 0
    12a6:	50 e0       	ldi	r21, 0x00	; 0
    12a8:	82 2b       	or	r24, r18
    12aa:	93 2b       	or	r25, r19
    12ac:	a4 2b       	or	r26, r20
    12ae:	b5 2b       	or	r27, r21
    12b0:	f8 01       	movw	r30, r16
    12b2:	84 83       	std	Z+4, r24	; 0x04
    12b4:	95 83       	std	Z+5, r25	; 0x05
    12b6:	a6 83       	std	Z+6, r26	; 0x06
    12b8:	b7 83       	std	Z+7, r27	; 0x07
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK)
				res = dir_rewind(dj);			/* Rewind dir */
    12ba:	c8 01       	movw	r24, r16
    12bc:	0e 94 28 04 	call	0x850	; 0x850 <dir_rewind>
    12c0:	9c 01       	movw	r18, r24
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    12c2:	23 30       	cpi	r18, 0x03	; 3
    12c4:	31 05       	cpc	r19, r1
    12c6:	11 f4       	brne	.+4      	; 0x12cc <pf_opendir+0x8c>
    12c8:	24 e0       	ldi	r18, 0x04	; 4
    12ca:	30 e0       	ldi	r19, 0x00	; 0
	}

	return res;
}
    12cc:	c9 01       	movw	r24, r18
    12ce:	ac 96       	adiw	r28, 0x2c	; 44
    12d0:	e6 e0       	ldi	r30, 0x06	; 6
    12d2:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <__epilogue_restores__+0x18>

000012d6 <pf_open>:
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
    12d6:	ac e3       	ldi	r26, 0x3C	; 60
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e1 e7       	ldi	r30, 0x71	; 113
    12dc:	f9 e0       	ldi	r31, 0x09	; 9
    12de:	0c 94 b6 10 	jmp	0x216c	; 0x216c <__prologue_saves__+0x18>
    12e2:	bc 01       	movw	r22, r24
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
    12e4:	00 91 63 01 	lds	r16, 0x0163
    12e8:	10 91 64 01 	lds	r17, 0x0164


	if (!fs)						/* Check file system */
    12ec:	01 15       	cp	r16, r1
    12ee:	11 05       	cpc	r17, r1
    12f0:	19 f4       	brne	.+6      	; 0x12f8 <pf_open+0x22>
    12f2:	66 e0       	ldi	r22, 0x06	; 6
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	42 c0       	rjmp	.+132    	; 0x137c <pf_open+0xa6>
		return FR_NOT_ENABLED;

	fs->flag = 0;
    12f8:	f8 01       	movw	r30, r16
    12fa:	12 82       	std	Z+2, r1	; 0x02
	fs->buf = dir;
    12fc:	5d e1       	ldi	r21, 0x1D	; 29
    12fe:	e5 2e       	mov	r14, r21
    1300:	f1 2c       	mov	r15, r1
    1302:	ec 0e       	add	r14, r28
    1304:	fd 1e       	adc	r15, r29
    1306:	f7 82       	std	Z+7, r15	; 0x07
    1308:	e6 82       	std	Z+6, r14	; 0x06
	dj.fn = sp;
    130a:	ce 01       	movw	r24, r28
    130c:	01 96       	adiw	r24, 0x01	; 1
    130e:	98 8b       	std	Y+16, r25	; 0x10
    1310:	8f 87       	std	Y+15, r24	; 0x0f
	res = follow_path(&dj, path);	/* Follow the file path */
    1312:	ce 01       	movw	r24, r28
    1314:	0d 96       	adiw	r24, 0x0d	; 13
    1316:	0e 94 32 08 	call	0x1064	; 0x1064 <follow_path>
    131a:	bc 01       	movw	r22, r24
	if (res != FR_OK) return res;	/* Follow failed */
    131c:	00 97       	sbiw	r24, 0x00	; 0
    131e:	71 f5       	brne	.+92     	; 0x137c <pf_open+0xa6>
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    1320:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1322:	88 23       	and	r24, r24
    1324:	49 f1       	breq	.+82     	; 0x1378 <pf_open+0xa2>
    1326:	88 a5       	ldd	r24, Y+40	; 0x28
    1328:	84 fd       	sbrc	r24, 4
    132a:	26 c0       	rjmp	.+76     	; 0x1378 <pf_open+0xa2>
		return FR_NO_FILE;

	fs->org_clust =						/* File start cluster */
    132c:	f7 01       	movw	r30, r14
    132e:	84 89       	ldd	r24, Z+20	; 0x14
    1330:	95 89       	ldd	r25, Z+21	; 0x15
    1332:	a0 e0       	ldi	r26, 0x00	; 0
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	dc 01       	movw	r26, r24
    1338:	99 27       	eor	r25, r25
    133a:	88 27       	eor	r24, r24
    133c:	22 8d       	ldd	r18, Z+26	; 0x1a
    133e:	33 8d       	ldd	r19, Z+27	; 0x1b
    1340:	40 e0       	ldi	r20, 0x00	; 0
    1342:	50 e0       	ldi	r21, 0x00	; 0
    1344:	82 2b       	or	r24, r18
    1346:	93 2b       	or	r25, r19
    1348:	a4 2b       	or	r26, r20
    134a:	b5 2b       	or	r27, r21
    134c:	f8 01       	movw	r30, r16
    134e:	80 a3       	std	Z+32, r24	; 0x20
    1350:	91 a3       	std	Z+33, r25	; 0x21
    1352:	a2 a3       	std	Z+34, r26	; 0x22
    1354:	b3 a3       	std	Z+35, r27	; 0x23
#if _FS_FAT32
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) |
#endif
		LD_WORD(dir+DIR_FstClusLO);
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    1356:	f7 01       	movw	r30, r14
    1358:	84 8d       	ldd	r24, Z+28	; 0x1c
    135a:	95 8d       	ldd	r25, Z+29	; 0x1d
    135c:	a6 8d       	ldd	r26, Z+30	; 0x1e
    135e:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1360:	f8 01       	movw	r30, r16
    1362:	84 8f       	std	Z+28, r24	; 0x1c
    1364:	95 8f       	std	Z+29, r25	; 0x1d
    1366:	a6 8f       	std	Z+30, r26	; 0x1e
    1368:	b7 8f       	std	Z+31, r27	; 0x1f
	fs->fptr = 0;						/* File pointer */
    136a:	10 8e       	std	Z+24, r1	; 0x18
    136c:	11 8e       	std	Z+25, r1	; 0x19
    136e:	12 8e       	std	Z+26, r1	; 0x1a
    1370:	13 8e       	std	Z+27, r1	; 0x1b
	fs->flag = FA_OPENED;
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	82 83       	std	Z+2, r24	; 0x02
    1376:	02 c0       	rjmp	.+4      	; 0x137c <pf_open+0xa6>

	return FR_OK;
    1378:	63 e0       	ldi	r22, 0x03	; 3
    137a:	70 e0       	ldi	r23, 0x00	; 0
}
    137c:	cb 01       	movw	r24, r22
    137e:	ec 96       	adiw	r28, 0x3c	; 60
    1380:	e6 e0       	ldi	r30, 0x06	; 6
    1382:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <__epilogue_restores__+0x18>

00001386 <pf_read>:
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	WORD btr,		/* Number of bytes to read */
	WORD* br		/* Pointer to number of bytes read */
)
{
    1386:	a0 e0       	ldi	r26, 0x00	; 0
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e9 ec       	ldi	r30, 0xC9	; 201
    138c:	f9 e0       	ldi	r31, 0x09	; 9
    138e:	0c 94 ac 10 	jmp	0x2158	; 0x2158 <__prologue_saves__+0x4>
    1392:	3c 01       	movw	r6, r24
    1394:	6b 01       	movw	r12, r22
    1396:	4a 01       	movw	r8, r20
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	BYTE *rbuff = buff;
	WORD rcnt;
	FATFS *fs = FatFs;
    1398:	c0 91 63 01 	lds	r28, 0x0163
    139c:	d0 91 64 01 	lds	r29, 0x0164


	*br = 0;
    13a0:	fa 01       	movw	r30, r20
    13a2:	11 82       	std	Z+1, r1	; 0x01
    13a4:	10 82       	st	Z, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    13a6:	20 97       	sbiw	r28, 0x00	; 0
    13a8:	19 f4       	brne	.+6      	; 0x13b0 <pf_read+0x2a>
    13aa:	26 e0       	ldi	r18, 0x06	; 6
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	dd c0       	rjmp	.+442    	; 0x156a <pf_read+0x1e4>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	80 fd       	sbrc	r24, 0
    13b4:	03 c0       	rjmp	.+6      	; 0x13bc <pf_read+0x36>
    13b6:	25 e0       	ldi	r18, 0x05	; 5
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	d7 c0       	rjmp	.+430    	; 0x156a <pf_read+0x1e4>
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
    13bc:	2c 8d       	ldd	r18, Y+28	; 0x1c
    13be:	3d 8d       	ldd	r19, Y+29	; 0x1d
    13c0:	4e 8d       	ldd	r20, Y+30	; 0x1e
    13c2:	5f 8d       	ldd	r21, Y+31	; 0x1f
    13c4:	88 8d       	ldd	r24, Y+24	; 0x18
    13c6:	99 8d       	ldd	r25, Y+25	; 0x19
    13c8:	aa 8d       	ldd	r26, Y+26	; 0x1a
    13ca:	bb 8d       	ldd	r27, Y+27	; 0x1b
    13cc:	28 1b       	sub	r18, r24
    13ce:	39 0b       	sbc	r19, r25
    13d0:	4a 0b       	sbc	r20, r26
    13d2:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */
    13d4:	cb 01       	movw	r24, r22
    13d6:	a0 e0       	ldi	r26, 0x00	; 0
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	28 17       	cp	r18, r24
    13dc:	39 07       	cpc	r19, r25
    13de:	4a 07       	cpc	r20, r26
    13e0:	5b 07       	cpc	r21, r27
    13e2:	08 f4       	brcc	.+2      	; 0x13e6 <pf_read+0x60>
    13e4:	69 01       	movw	r12, r18
)
{
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	BYTE *rbuff = buff;
    13e6:	53 01       	movw	r10, r6
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
			fs->dsect = sect + fs->csect++;
		}
		rcnt = 512 - ((WORD)fs->fptr % 512);		/* Get partial sector data from sector buffer */
    13e8:	41 2c       	mov	r4, r1
    13ea:	f2 e0       	ldi	r31, 0x02	; 2
    13ec:	5f 2e       	mov	r5, r31
    13ee:	b3 c0       	rjmp	.+358    	; 0x1556 <pf_read+0x1d0>

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
    13f0:	e8 8c       	ldd	r14, Y+24	; 0x18
    13f2:	f9 8c       	ldd	r15, Y+25	; 0x19
    13f4:	0a 8d       	ldd	r16, Y+26	; 0x1a
    13f6:	1b 8d       	ldd	r17, Y+27	; 0x1b
    13f8:	d8 01       	movw	r26, r16
    13fa:	c7 01       	movw	r24, r14
    13fc:	91 70       	andi	r25, 0x01	; 1
    13fe:	a0 70       	andi	r26, 0x00	; 0
    1400:	b0 70       	andi	r27, 0x00	; 0
    1402:	00 97       	sbiw	r24, 0x00	; 0
    1404:	a1 05       	cpc	r26, r1
    1406:	b1 05       	cpc	r27, r1
    1408:	09 f0       	breq	.+2      	; 0x140c <pf_read+0x86>
    140a:	6b c0       	rjmp	.+214    	; 0x14e2 <pf_read+0x15c>
			if ((fs->fptr / 512 % fs->csize) == 0) {	/* On the cluster boundary? */
    140c:	c8 01       	movw	r24, r16
    140e:	b7 01       	movw	r22, r14
    1410:	e9 e0       	ldi	r30, 0x09	; 9
    1412:	96 95       	lsr	r25
    1414:	87 95       	ror	r24
    1416:	77 95       	ror	r23
    1418:	67 95       	ror	r22
    141a:	ea 95       	dec	r30
    141c:	d1 f7       	brne	.-12     	; 0x1412 <pf_read+0x8c>
    141e:	29 81       	ldd	r18, Y+1	; 0x01
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	40 e0       	ldi	r20, 0x00	; 0
    1424:	50 e0       	ldi	r21, 0x00	; 0
    1426:	0e 94 6d 10 	call	0x20da	; 0x20da <__udivmodsi4>
    142a:	61 15       	cp	r22, r1
    142c:	71 05       	cpc	r23, r1
    142e:	81 05       	cpc	r24, r1
    1430:	91 05       	cpc	r25, r1
    1432:	d9 f4       	brne	.+54     	; 0x146a <pf_read+0xe4>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
    1434:	e1 14       	cp	r14, r1
    1436:	f1 04       	cpc	r15, r1
    1438:	01 05       	cpc	r16, r1
    143a:	11 05       	cpc	r17, r1
    143c:	29 f4       	brne	.+10     	; 0x1448 <pf_read+0xc2>
    143e:	68 a1       	ldd	r22, Y+32	; 0x20
    1440:	79 a1       	ldd	r23, Y+33	; 0x21
    1442:	8a a1       	ldd	r24, Y+34	; 0x22
    1444:	9b a1       	ldd	r25, Y+35	; 0x23
    1446:	06 c0       	rjmp	.+12     	; 0x1454 <pf_read+0xce>
    1448:	6c a1       	ldd	r22, Y+36	; 0x24
    144a:	7d a1       	ldd	r23, Y+37	; 0x25
    144c:	8e a1       	ldd	r24, Y+38	; 0x26
    144e:	9f a1       	ldd	r25, Y+39	; 0x27
    1450:	0e 94 a4 04 	call	0x948	; 0x948 <get_fat>
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fr_abort;
    1454:	62 30       	cpi	r22, 0x02	; 2
    1456:	71 05       	cpc	r23, r1
    1458:	81 05       	cpc	r24, r1
    145a:	91 05       	cpc	r25, r1
    145c:	08 f4       	brcc	.+2      	; 0x1460 <pf_read+0xda>
    145e:	82 c0       	rjmp	.+260    	; 0x1564 <pf_read+0x1de>
				fs->curr_clust = clst;				/* Update current cluster */
    1460:	6c a3       	std	Y+36, r22	; 0x24
    1462:	7d a3       	std	Y+37, r23	; 0x25
    1464:	8e a3       	std	Y+38, r24	; 0x26
    1466:	9f a3       	std	Y+39, r25	; 0x27
				fs->csect = 0;						/* Reset sector offset in the cluster */
    1468:	1b 82       	std	Y+3, r1	; 0x03
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    146a:	00 91 63 01 	lds	r16, 0x0163
    146e:	10 91 64 01 	lds	r17, 0x0164


	clst -= 2;
    1472:	2c a1       	ldd	r18, Y+36	; 0x24
    1474:	3d a1       	ldd	r19, Y+37	; 0x25
    1476:	4e a1       	ldd	r20, Y+38	; 0x26
    1478:	5f a1       	ldd	r21, Y+39	; 0x27
    147a:	22 50       	subi	r18, 0x02	; 2
    147c:	30 40       	sbci	r19, 0x00	; 0
    147e:	40 40       	sbci	r20, 0x00	; 0
    1480:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1482:	f8 01       	movw	r30, r16
    1484:	80 85       	ldd	r24, Z+8	; 0x08
    1486:	91 85       	ldd	r25, Z+9	; 0x09
    1488:	a2 85       	ldd	r26, Z+10	; 0x0a
    148a:	b3 85       	ldd	r27, Z+11	; 0x0b
    148c:	02 97       	sbiw	r24, 0x02	; 2
    148e:	a1 09       	sbc	r26, r1
    1490:	b1 09       	sbc	r27, r1
    1492:	28 17       	cp	r18, r24
    1494:	39 07       	cpc	r19, r25
    1496:	4a 07       	cpc	r20, r26
    1498:	5b 07       	cpc	r21, r27
    149a:	08 f0       	brcs	.+2      	; 0x149e <pf_read+0x118>
    149c:	63 c0       	rjmp	.+198    	; 0x1564 <pf_read+0x1de>
	return (DWORD)clst * fs->csize + fs->database;
    149e:	61 81       	ldd	r22, Z+1	; 0x01
    14a0:	70 e0       	ldi	r23, 0x00	; 0
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	0e 94 2e 10 	call	0x205c	; 0x205c <__mulsi3>
    14aa:	9b 01       	movw	r18, r22
    14ac:	ac 01       	movw	r20, r24
    14ae:	f8 01       	movw	r30, r16
    14b0:	84 89       	ldd	r24, Z+20	; 0x14
    14b2:	95 89       	ldd	r25, Z+21	; 0x15
    14b4:	a6 89       	ldd	r26, Z+22	; 0x16
    14b6:	b7 89       	ldd	r27, Z+23	; 0x17
    14b8:	28 0f       	add	r18, r24
    14ba:	39 1f       	adc	r19, r25
    14bc:	4a 1f       	adc	r20, r26
    14be:	5b 1f       	adc	r21, r27
				if (clst <= 1) goto fr_abort;
				fs->curr_clust = clst;				/* Update current cluster */
				fs->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
    14c0:	21 15       	cp	r18, r1
    14c2:	31 05       	cpc	r19, r1
    14c4:	41 05       	cpc	r20, r1
    14c6:	51 05       	cpc	r21, r1
    14c8:	09 f4       	brne	.+2      	; 0x14cc <pf_read+0x146>
    14ca:	4c c0       	rjmp	.+152    	; 0x1564 <pf_read+0x1de>
			fs->dsect = sect + fs->csect++;
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	28 0f       	add	r18, r24
    14d0:	31 1d       	adc	r19, r1
    14d2:	41 1d       	adc	r20, r1
    14d4:	51 1d       	adc	r21, r1
    14d6:	28 a7       	std	Y+40, r18	; 0x28
    14d8:	39 a7       	std	Y+41, r19	; 0x29
    14da:	4a a7       	std	Y+42, r20	; 0x2a
    14dc:	5b a7       	std	Y+43, r21	; 0x2b
    14de:	8f 5f       	subi	r24, 0xFF	; 255
    14e0:	8b 83       	std	Y+3, r24	; 0x03
		}
		rcnt = 512 - ((WORD)fs->fptr % 512);		/* Get partial sector data from sector buffer */
    14e2:	08 8d       	ldd	r16, Y+24	; 0x18
    14e4:	19 8d       	ldd	r17, Y+25	; 0x19
    14e6:	2a 8d       	ldd	r18, Y+26	; 0x1a
    14e8:	3b 8d       	ldd	r19, Y+27	; 0x1b
    14ea:	c8 01       	movw	r24, r16
    14ec:	91 70       	andi	r25, 0x01	; 1
    14ee:	a2 01       	movw	r20, r4
    14f0:	48 1b       	sub	r20, r24
    14f2:	59 0b       	sbc	r21, r25
    14f4:	76 01       	movw	r14, r12
    14f6:	4c 15       	cp	r20, r12
    14f8:	5d 05       	cpc	r21, r13
    14fa:	08 f4       	brcc	.+2      	; 0x14fe <pf_read+0x178>
    14fc:	7a 01       	movw	r14, r20
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
    14fe:	61 14       	cp	r6, r1
    1500:	71 04       	cpc	r7, r1
    1502:	19 f4       	brne	.+6      	; 0x150a <pf_read+0x184>
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	01 c0       	rjmp	.+2      	; 0x150c <pf_read+0x186>
    150a:	c5 01       	movw	r24, r10
    150c:	48 a5       	ldd	r20, Y+40	; 0x28
    150e:	59 a5       	ldd	r21, Y+41	; 0x29
    1510:	6a a5       	ldd	r22, Y+42	; 0x2a
    1512:	7b a5       	ldd	r23, Y+43	; 0x2b
    1514:	98 01       	movw	r18, r16
    1516:	31 70       	andi	r19, 0x01	; 1
    1518:	87 01       	movw	r16, r14
    151a:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <disk_readp>
		if (dr) goto fr_abort;
    151e:	89 2b       	or	r24, r25
    1520:	09 f5       	brne	.+66     	; 0x1564 <pf_read+0x1de>
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
    1522:	c7 01       	movw	r24, r14
    1524:	a0 e0       	ldi	r26, 0x00	; 0
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	28 8d       	ldd	r18, Y+24	; 0x18
    152a:	39 8d       	ldd	r19, Y+25	; 0x19
    152c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    152e:	5b 8d       	ldd	r21, Y+27	; 0x1b
    1530:	28 0f       	add	r18, r24
    1532:	39 1f       	adc	r19, r25
    1534:	4a 1f       	adc	r20, r26
    1536:	5b 1f       	adc	r21, r27
    1538:	28 8f       	std	Y+24, r18	; 0x18
    153a:	39 8f       	std	Y+25, r19	; 0x19
    153c:	4a 8f       	std	Y+26, r20	; 0x1a
    153e:	5b 8f       	std	Y+27, r21	; 0x1b
    1540:	ae 0c       	add	r10, r14
    1542:	bf 1c       	adc	r11, r15
		btr -= rcnt; *br += rcnt;
    1544:	ce 18       	sub	r12, r14
    1546:	df 08       	sbc	r13, r15
    1548:	f4 01       	movw	r30, r8
    154a:	80 81       	ld	r24, Z
    154c:	91 81       	ldd	r25, Z+1	; 0x01
    154e:	8e 0d       	add	r24, r14
    1550:	9f 1d       	adc	r25, r15
    1552:	91 83       	std	Z+1, r25	; 0x01
    1554:	80 83       	st	Z, r24
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
    1556:	c1 14       	cp	r12, r1
    1558:	d1 04       	cpc	r13, r1
    155a:	09 f0       	breq	.+2      	; 0x155e <pf_read+0x1d8>
    155c:	49 cf       	rjmp	.-366    	; 0x13f0 <pf_read+0x6a>
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	03 c0       	rjmp	.+6      	; 0x156a <pf_read+0x1e4>
	}

	return FR_OK;

fr_abort:
	fs->flag = 0;
    1564:	1a 82       	std	Y+2, r1	; 0x02
    1566:	21 e0       	ldi	r18, 0x01	; 1
    1568:	30 e0       	ldi	r19, 0x00	; 0
	return FR_DISK_ERR;
}
    156a:	c9 01       	movw	r24, r18
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	e0 e1       	ldi	r30, 0x10	; 16
    1572:	0c 94 c8 10 	jmp	0x2190	; 0x2190 <__epilogue_restores__+0x4>

00001576 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    1576:	a0 e0       	ldi	r26, 0x00	; 0
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e1 ec       	ldi	r30, 0xC1	; 193
    157c:	fa e0       	ldi	r31, 0x0A	; 10
    157e:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <__prologue_saves__+0x10>
    1582:	b8 2e       	mov	r11, r24
    1584:	a9 2e       	mov	r10, r25
    1586:	6a 01       	movw	r12, r20
    1588:	7b 01       	movw	r14, r22
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
    158a:	2e ef       	ldi	r18, 0xFE	; 254
    158c:	31 e0       	ldi	r19, 0x01	; 1
    158e:	02 e0       	ldi	r16, 0x02	; 2
    1590:	10 e0       	ldi	r17, 0x00	; 0
    1592:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <disk_readp>
    1596:	89 2b       	or	r24, r25
    1598:	11 f0       	breq	.+4      	; 0x159e <check_fs+0x28>
    159a:	23 e0       	ldi	r18, 0x03	; 3
    159c:	33 c0       	rjmp	.+102    	; 0x1604 <check_fs+0x8e>
		return 3;
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
    159e:	cb 2d       	mov	r28, r11
    15a0:	da 2d       	mov	r29, r10
    15a2:	88 81       	ld	r24, Y
    15a4:	99 81       	ldd	r25, Y+1	; 0x01
    15a6:	85 55       	subi	r24, 0x55	; 85
    15a8:	9a 4a       	sbci	r25, 0xAA	; 170
    15aa:	11 f0       	breq	.+4      	; 0x15b0 <check_fs+0x3a>
    15ac:	22 e0       	ldi	r18, 0x02	; 2
    15ae:	2a c0       	rjmp	.+84     	; 0x1604 <check_fs+0x8e>
		return 2;

	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
    15b0:	8b 2d       	mov	r24, r11
    15b2:	9a 2d       	mov	r25, r10
    15b4:	b7 01       	movw	r22, r14
    15b6:	a6 01       	movw	r20, r12
    15b8:	26 e3       	ldi	r18, 0x36	; 54
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	02 e0       	ldi	r16, 0x02	; 2
    15be:	10 e0       	ldi	r17, 0x00	; 0
    15c0:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <disk_readp>
    15c4:	89 2b       	or	r24, r25
    15c6:	39 f4       	brne	.+14     	; 0x15d6 <check_fs+0x60>
    15c8:	88 81       	ld	r24, Y
    15ca:	99 81       	ldd	r25, Y+1	; 0x01
    15cc:	86 54       	subi	r24, 0x46	; 70
    15ce:	91 44       	sbci	r25, 0x41	; 65
    15d0:	11 f4       	brne	.+4      	; 0x15d6 <check_fs+0x60>
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	17 c0       	rjmp	.+46     	; 0x1604 <check_fs+0x8e>
		return 0;
#if _FS_FAT32
	if (!disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
    15d6:	8b 2d       	mov	r24, r11
    15d8:	9a 2d       	mov	r25, r10
    15da:	b7 01       	movw	r22, r14
    15dc:	a6 01       	movw	r20, r12
    15de:	22 e5       	ldi	r18, 0x52	; 82
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	02 e0       	ldi	r16, 0x02	; 2
    15e4:	10 e0       	ldi	r17, 0x00	; 0
    15e6:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <disk_readp>
    15ea:	89 2b       	or	r24, r25
    15ec:	11 f0       	breq	.+4      	; 0x15f2 <check_fs+0x7c>
    15ee:	21 e0       	ldi	r18, 0x01	; 1
    15f0:	09 c0       	rjmp	.+18     	; 0x1604 <check_fs+0x8e>
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	88 81       	ld	r24, Y
    15f6:	99 81       	ldd	r25, Y+1	; 0x01
    15f8:	86 54       	subi	r24, 0x46	; 70
    15fa:	91 44       	sbci	r25, 0x41	; 65
    15fc:	09 f4       	brne	.+2      	; 0x1600 <check_fs+0x8a>
    15fe:	21 e0       	ldi	r18, 0x01	; 1
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	28 27       	eor	r18, r24
		return 0;
#endif
	return 1;
}
    1604:	82 2f       	mov	r24, r18
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	ea e0       	ldi	r30, 0x0A	; 10
    160c:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__epilogue_restores__+0x10>

00001610 <pf_write>:
FRESULT pf_write (
	const void* buff,	/* Pointer to the data to be written */
	WORD btw,			/* Number of bytes to write (0:Finalize the current write operation) */
	WORD* bw			/* Pointer to number of bytes written */
)
{
    1610:	a0 e0       	ldi	r26, 0x00	; 0
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	ee e0       	ldi	r30, 0x0E	; 14
    1616:	fb e0       	ldi	r31, 0x0B	; 11
    1618:	0c 94 ac 10 	jmp	0x2158	; 0x2158 <__prologue_saves__+0x4>
    161c:	fc 01       	movw	r30, r24
    161e:	5b 01       	movw	r10, r22
    1620:	3a 01       	movw	r6, r20
	CLUST clst;
	DWORD sect, remain;
	const BYTE *p = buff;
	WORD wcnt;
	FATFS *fs = FatFs;
    1622:	c0 91 63 01 	lds	r28, 0x0163
    1626:	d0 91 64 01 	lds	r29, 0x0164


	*bw = 0;
    162a:	da 01       	movw	r26, r20
    162c:	1d 92       	st	X+, r1
    162e:	1c 92       	st	X, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    1630:	20 97       	sbiw	r28, 0x00	; 0
    1632:	19 f4       	brne	.+6      	; 0x163a <pf_write+0x2a>
    1634:	26 e0       	ldi	r18, 0x06	; 6
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	0b c1       	rjmp	.+534    	; 0x1850 <pf_write+0x240>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	80 fd       	sbrc	r24, 0
    1640:	03 c0       	rjmp	.+6      	; 0x1648 <pf_write+0x38>
    1642:	25 e0       	ldi	r18, 0x05	; 5
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	04 c1       	rjmp	.+520    	; 0x1850 <pf_write+0x240>
    1648:	80 74       	andi	r24, 0x40	; 64
    164a:	90 70       	andi	r25, 0x00	; 0
		return FR_NOT_OPENED;

	if (!btw) {		/* Finalize request */
    164c:	61 15       	cp	r22, r1
    164e:	71 05       	cpc	r23, r1
    1650:	89 f4       	brne	.+34     	; 0x1674 <pf_write+0x64>
		if ((fs->flag & FA__WIP) && disk_writep(0, 0)) goto fw_abort;
    1652:	89 2b       	or	r24, r25
    1654:	59 f0       	breq	.+22     	; 0x166c <pf_write+0x5c>
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	40 e0       	ldi	r20, 0x00	; 0
    165c:	50 e0       	ldi	r21, 0x00	; 0
    165e:	60 e0       	ldi	r22, 0x00	; 0
    1660:	70 e0       	ldi	r23, 0x00	; 0
    1662:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <disk_writep>
    1666:	89 2b       	or	r24, r25
    1668:	09 f0       	breq	.+2      	; 0x166c <pf_write+0x5c>
    166a:	ef c0       	rjmp	.+478    	; 0x184a <pf_write+0x23a>
		fs->flag &= ~FA__WIP;
    166c:	8a 81       	ldd	r24, Y+2	; 0x02
    166e:	8f 7b       	andi	r24, 0xBF	; 191
    1670:	8a 83       	std	Y+2, r24	; 0x02
    1672:	e8 c0       	rjmp	.+464    	; 0x1844 <pf_write+0x234>
		return FR_OK;
	} else {		/* Write data request */
		if (!(fs->flag & FA__WIP))		/* Round down fptr to the sector boundary */
    1674:	89 2b       	or	r24, r25
    1676:	51 f4       	brne	.+20     	; 0x168c <pf_write+0x7c>
			fs->fptr &= 0xFFFFFE00;
    1678:	88 8d       	ldd	r24, Y+24	; 0x18
    167a:	99 8d       	ldd	r25, Y+25	; 0x19
    167c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    167e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1680:	80 70       	andi	r24, 0x00	; 0
    1682:	9e 7f       	andi	r25, 0xFE	; 254
    1684:	88 8f       	std	Y+24, r24	; 0x18
    1686:	99 8f       	std	Y+25, r25	; 0x19
    1688:	aa 8f       	std	Y+26, r26	; 0x1a
    168a:	bb 8f       	std	Y+27, r27	; 0x1b
	}
	remain = fs->fsize - fs->fptr;
    168c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    168e:	3d 8d       	ldd	r19, Y+29	; 0x1d
    1690:	4e 8d       	ldd	r20, Y+30	; 0x1e
    1692:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1694:	88 8d       	ldd	r24, Y+24	; 0x18
    1696:	99 8d       	ldd	r25, Y+25	; 0x19
    1698:	aa 8d       	ldd	r26, Y+26	; 0x1a
    169a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    169c:	28 1b       	sub	r18, r24
    169e:	39 0b       	sbc	r19, r25
    16a0:	4a 0b       	sbc	r20, r26
    16a2:	5b 0b       	sbc	r21, r27
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */
    16a4:	c5 01       	movw	r24, r10
    16a6:	a0 e0       	ldi	r26, 0x00	; 0
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	28 17       	cp	r18, r24
    16ac:	39 07       	cpc	r19, r25
    16ae:	4a 07       	cpc	r20, r26
    16b0:	5b 07       	cpc	r21, r27
    16b2:	08 f4       	brcc	.+2      	; 0x16b6 <pf_write+0xa6>
    16b4:	59 01       	movw	r10, r18
	WORD* bw			/* Pointer to number of bytes written */
)
{
	CLUST clst;
	DWORD sect, remain;
	const BYTE *p = buff;
    16b6:	4f 01       	movw	r8, r30
			if (!sect) goto fw_abort;
			fs->dsect = sect + fs->csect++;
			if (disk_writep(0, fs->dsect)) goto fw_abort;	/* Initiate a sector write operation */
			fs->flag |= FA__WIP;
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
    16b8:	41 2c       	mov	r4, r1
    16ba:	b2 e0       	ldi	r27, 0x02	; 2
    16bc:	5b 2e       	mov	r5, r27
    16be:	be c0       	rjmp	.+380    	; 0x183c <pf_write+0x22c>
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */

	while (btw)	{									/* Repeat until all data transferred */
		if (((WORD)fs->fptr % 512) == 0) {				/* On the sector boundary? */
    16c0:	e8 8c       	ldd	r14, Y+24	; 0x18
    16c2:	f9 8c       	ldd	r15, Y+25	; 0x19
    16c4:	0a 8d       	ldd	r16, Y+26	; 0x1a
    16c6:	1b 8d       	ldd	r17, Y+27	; 0x1b
    16c8:	c7 01       	movw	r24, r14
    16ca:	91 70       	andi	r25, 0x01	; 1
    16cc:	89 2b       	or	r24, r25
    16ce:	09 f0       	breq	.+2      	; 0x16d2 <pf_write+0xc2>
    16d0:	77 c0       	rjmp	.+238    	; 0x17c0 <pf_write+0x1b0>
			if ((fs->fptr / 512 % fs->csize) == 0) {	/* On the cluster boundary? */
    16d2:	c8 01       	movw	r24, r16
    16d4:	b7 01       	movw	r22, r14
    16d6:	a9 e0       	ldi	r26, 0x09	; 9
    16d8:	96 95       	lsr	r25
    16da:	87 95       	ror	r24
    16dc:	77 95       	ror	r23
    16de:	67 95       	ror	r22
    16e0:	aa 95       	dec	r26
    16e2:	d1 f7       	brne	.-12     	; 0x16d8 <pf_write+0xc8>
    16e4:	29 81       	ldd	r18, Y+1	; 0x01
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	40 e0       	ldi	r20, 0x00	; 0
    16ea:	50 e0       	ldi	r21, 0x00	; 0
    16ec:	0e 94 6d 10 	call	0x20da	; 0x20da <__udivmodsi4>
    16f0:	61 15       	cp	r22, r1
    16f2:	71 05       	cpc	r23, r1
    16f4:	81 05       	cpc	r24, r1
    16f6:	91 05       	cpc	r25, r1
    16f8:	d9 f4       	brne	.+54     	; 0x1730 <pf_write+0x120>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
    16fa:	e1 14       	cp	r14, r1
    16fc:	f1 04       	cpc	r15, r1
    16fe:	01 05       	cpc	r16, r1
    1700:	11 05       	cpc	r17, r1
    1702:	29 f4       	brne	.+10     	; 0x170e <pf_write+0xfe>
    1704:	68 a1       	ldd	r22, Y+32	; 0x20
    1706:	79 a1       	ldd	r23, Y+33	; 0x21
    1708:	8a a1       	ldd	r24, Y+34	; 0x22
    170a:	9b a1       	ldd	r25, Y+35	; 0x23
    170c:	06 c0       	rjmp	.+12     	; 0x171a <pf_write+0x10a>
    170e:	6c a1       	ldd	r22, Y+36	; 0x24
    1710:	7d a1       	ldd	r23, Y+37	; 0x25
    1712:	8e a1       	ldd	r24, Y+38	; 0x26
    1714:	9f a1       	ldd	r25, Y+39	; 0x27
    1716:	0e 94 a4 04 	call	0x948	; 0x948 <get_fat>
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fw_abort;
    171a:	62 30       	cpi	r22, 0x02	; 2
    171c:	71 05       	cpc	r23, r1
    171e:	81 05       	cpc	r24, r1
    1720:	91 05       	cpc	r25, r1
    1722:	08 f4       	brcc	.+2      	; 0x1726 <pf_write+0x116>
    1724:	92 c0       	rjmp	.+292    	; 0x184a <pf_write+0x23a>
				fs->curr_clust = clst;				/* Update current cluster */
    1726:	6c a3       	std	Y+36, r22	; 0x24
    1728:	7d a3       	std	Y+37, r23	; 0x25
    172a:	8e a3       	std	Y+38, r24	; 0x26
    172c:	9f a3       	std	Y+39, r25	; 0x27
				fs->csect = 0;						/* Reset sector offset in the cluster */
    172e:	1b 82       	std	Y+3, r1	; 0x03
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    1730:	00 91 63 01 	lds	r16, 0x0163
    1734:	10 91 64 01 	lds	r17, 0x0164


	clst -= 2;
    1738:	2c a1       	ldd	r18, Y+36	; 0x24
    173a:	3d a1       	ldd	r19, Y+37	; 0x25
    173c:	4e a1       	ldd	r20, Y+38	; 0x26
    173e:	5f a1       	ldd	r21, Y+39	; 0x27
    1740:	22 50       	subi	r18, 0x02	; 2
    1742:	30 40       	sbci	r19, 0x00	; 0
    1744:	40 40       	sbci	r20, 0x00	; 0
    1746:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1748:	f8 01       	movw	r30, r16
    174a:	80 85       	ldd	r24, Z+8	; 0x08
    174c:	91 85       	ldd	r25, Z+9	; 0x09
    174e:	a2 85       	ldd	r26, Z+10	; 0x0a
    1750:	b3 85       	ldd	r27, Z+11	; 0x0b
    1752:	02 97       	sbiw	r24, 0x02	; 2
    1754:	a1 09       	sbc	r26, r1
    1756:	b1 09       	sbc	r27, r1
    1758:	28 17       	cp	r18, r24
    175a:	39 07       	cpc	r19, r25
    175c:	4a 07       	cpc	r20, r26
    175e:	5b 07       	cpc	r21, r27
    1760:	08 f0       	brcs	.+2      	; 0x1764 <pf_write+0x154>
    1762:	73 c0       	rjmp	.+230    	; 0x184a <pf_write+0x23a>
	return (DWORD)clst * fs->csize + fs->database;
    1764:	61 81       	ldd	r22, Z+1	; 0x01
    1766:	70 e0       	ldi	r23, 0x00	; 0
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	0e 94 2e 10 	call	0x205c	; 0x205c <__mulsi3>
    1770:	9b 01       	movw	r18, r22
    1772:	ac 01       	movw	r20, r24
    1774:	f8 01       	movw	r30, r16
    1776:	84 89       	ldd	r24, Z+20	; 0x14
    1778:	95 89       	ldd	r25, Z+21	; 0x15
    177a:	a6 89       	ldd	r26, Z+22	; 0x16
    177c:	b7 89       	ldd	r27, Z+23	; 0x17
    177e:	28 0f       	add	r18, r24
    1780:	39 1f       	adc	r19, r25
    1782:	4a 1f       	adc	r20, r26
    1784:	5b 1f       	adc	r21, r27
				if (clst <= 1) goto fw_abort;
				fs->curr_clust = clst;				/* Update current cluster */
				fs->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fw_abort;
    1786:	21 15       	cp	r18, r1
    1788:	31 05       	cpc	r19, r1
    178a:	41 05       	cpc	r20, r1
    178c:	51 05       	cpc	r21, r1
    178e:	09 f4       	brne	.+2      	; 0x1792 <pf_write+0x182>
    1790:	5c c0       	rjmp	.+184    	; 0x184a <pf_write+0x23a>
			fs->dsect = sect + fs->csect++;
    1792:	8b 81       	ldd	r24, Y+3	; 0x03
    1794:	ba 01       	movw	r22, r20
    1796:	a9 01       	movw	r20, r18
    1798:	48 0f       	add	r20, r24
    179a:	51 1d       	adc	r21, r1
    179c:	61 1d       	adc	r22, r1
    179e:	71 1d       	adc	r23, r1
    17a0:	48 a7       	std	Y+40, r20	; 0x28
    17a2:	59 a7       	std	Y+41, r21	; 0x29
    17a4:	6a a7       	std	Y+42, r22	; 0x2a
    17a6:	7b a7       	std	Y+43, r23	; 0x2b
    17a8:	8f 5f       	subi	r24, 0xFF	; 255
    17aa:	8b 83       	std	Y+3, r24	; 0x03
			if (disk_writep(0, fs->dsect)) goto fw_abort;	/* Initiate a sector write operation */
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <disk_writep>
    17b4:	89 2b       	or	r24, r25
    17b6:	09 f0       	breq	.+2      	; 0x17ba <pf_write+0x1aa>
    17b8:	48 c0       	rjmp	.+144    	; 0x184a <pf_write+0x23a>
			fs->flag |= FA__WIP;
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	80 64       	ori	r24, 0x40	; 64
    17be:	8a 83       	std	Y+2, r24	; 0x02
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
    17c0:	88 8d       	ldd	r24, Y+24	; 0x18
    17c2:	99 8d       	ldd	r25, Y+25	; 0x19
    17c4:	91 70       	andi	r25, 0x01	; 1
    17c6:	92 01       	movw	r18, r4
    17c8:	28 1b       	sub	r18, r24
    17ca:	39 0b       	sbc	r19, r25
    17cc:	65 01       	movw	r12, r10
    17ce:	2a 15       	cp	r18, r10
    17d0:	3b 05       	cpc	r19, r11
    17d2:	08 f4       	brcc	.+2      	; 0x17d6 <pf_write+0x1c6>
    17d4:	69 01       	movw	r12, r18
		if (wcnt > btw) wcnt = btw;
		if (disk_writep(p, wcnt)) goto fw_abort;	/* Send data to the sector */
    17d6:	76 01       	movw	r14, r12
    17d8:	00 e0       	ldi	r16, 0x00	; 0
    17da:	10 e0       	ldi	r17, 0x00	; 0
    17dc:	c4 01       	movw	r24, r8
    17de:	b8 01       	movw	r22, r16
    17e0:	a7 01       	movw	r20, r14
    17e2:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <disk_writep>
    17e6:	89 2b       	or	r24, r25
    17e8:	81 f5       	brne	.+96     	; 0x184a <pf_write+0x23a>
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
    17ea:	88 8d       	ldd	r24, Y+24	; 0x18
    17ec:	99 8d       	ldd	r25, Y+25	; 0x19
    17ee:	aa 8d       	ldd	r26, Y+26	; 0x1a
    17f0:	bb 8d       	ldd	r27, Y+27	; 0x1b
    17f2:	8e 0d       	add	r24, r14
    17f4:	9f 1d       	adc	r25, r15
    17f6:	a0 1f       	adc	r26, r16
    17f8:	b1 1f       	adc	r27, r17
    17fa:	9c 01       	movw	r18, r24
    17fc:	88 8f       	std	Y+24, r24	; 0x18
    17fe:	99 8f       	std	Y+25, r25	; 0x19
    1800:	aa 8f       	std	Y+26, r26	; 0x1a
    1802:	bb 8f       	std	Y+27, r27	; 0x1b
		btw -= wcnt; *bw += wcnt;
    1804:	d3 01       	movw	r26, r6
    1806:	8d 91       	ld	r24, X+
    1808:	9c 91       	ld	r25, X
    180a:	11 97       	sbiw	r26, 0x01	; 1
    180c:	8c 0d       	add	r24, r12
    180e:	9d 1d       	adc	r25, r13
    1810:	8d 93       	st	X+, r24
    1812:	9c 93       	st	X, r25
		if (((WORD)fs->fptr % 512) == 0) {
    1814:	31 70       	andi	r19, 0x01	; 1
    1816:	23 2b       	or	r18, r19
    1818:	69 f4       	brne	.+26     	; 0x1834 <pf_write+0x224>
			if (disk_writep(0, 0)) goto fw_abort;	/* Finalize the currtent secter write operation */
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	40 e0       	ldi	r20, 0x00	; 0
    1820:	50 e0       	ldi	r21, 0x00	; 0
    1822:	60 e0       	ldi	r22, 0x00	; 0
    1824:	70 e0       	ldi	r23, 0x00	; 0
    1826:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <disk_writep>
    182a:	89 2b       	or	r24, r25
    182c:	71 f4       	brne	.+28     	; 0x184a <pf_write+0x23a>
			fs->flag &= ~FA__WIP;
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	8f 7b       	andi	r24, 0xBF	; 191
    1832:	8a 83       	std	Y+2, r24	; 0x02
			fs->flag |= FA__WIP;
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
		if (wcnt > btw) wcnt = btw;
		if (disk_writep(p, wcnt)) goto fw_abort;	/* Send data to the sector */
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
    1834:	8c 0c       	add	r8, r12
    1836:	9d 1c       	adc	r9, r13
		btw -= wcnt; *bw += wcnt;
    1838:	ac 18       	sub	r10, r12
    183a:	bd 08       	sbc	r11, r13
			fs->fptr &= 0xFFFFFE00;
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */

	while (btw)	{									/* Repeat until all data transferred */
    183c:	a1 14       	cp	r10, r1
    183e:	b1 04       	cpc	r11, r1
    1840:	09 f0       	breq	.+2      	; 0x1844 <pf_write+0x234>
    1842:	3e cf       	rjmp	.-388    	; 0x16c0 <pf_write+0xb0>
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	03 c0       	rjmp	.+6      	; 0x1850 <pf_write+0x240>
	}

	return FR_OK;

fw_abort:
	fs->flag = 0;
    184a:	1a 82       	std	Y+2, r1	; 0x02
    184c:	21 e0       	ldi	r18, 0x01	; 1
    184e:	30 e0       	ldi	r19, 0x00	; 0
	return FR_DISK_ERR;
}
    1850:	c9 01       	movw	r24, r18
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	e0 e1       	ldi	r30, 0x10	; 16
    1858:	0c 94 c8 10 	jmp	0x2190	; 0x2190 <__epilogue_restores__+0x4>

0000185c <pf_mount>:
/*-----------------------------------------------------------------------*/

FRESULT pf_mount (
	FATFS *fs		/* Pointer to new file system object (NULL: Unmount) */
)
{
    185c:	a4 e2       	ldi	r26, 0x24	; 36
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	e4 e3       	ldi	r30, 0x34	; 52
    1862:	fc e0       	ldi	r31, 0x0C	; 12
    1864:	0c 94 ae 10 	jmp	0x215c	; 0x215c <__prologue_saves__+0x8>
    1868:	5c 01       	movw	r10, r24
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
    186a:	10 92 64 01 	sts	0x0164, r1
    186e:	10 92 63 01 	sts	0x0163, r1
	if (!fs) return FR_OK;				/* Unregister fs object */
    1872:	00 97       	sbiw	r24, 0x00	; 0
    1874:	09 f4       	brne	.+2      	; 0x1878 <pf_mount+0x1c>
    1876:	ee c0       	rjmp	.+476    	; 0x1a54 <pf_mount+0x1f8>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
    1878:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <disk_initialize>
    187c:	80 ff       	sbrs	r24, 0
    187e:	03 c0       	rjmp	.+6      	; 0x1886 <pf_mount+0x2a>
    1880:	22 e0       	ldi	r18, 0x02	; 2
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	ef c0       	rjmp	.+478    	; 0x1a64 <pf_mount+0x208>
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
    1886:	4e 01       	movw	r8, r28
    1888:	08 94       	sec
    188a:	81 1c       	adc	r8, r1
    188c:	91 1c       	adc	r9, r1
    188e:	c4 01       	movw	r24, r8
    1890:	40 e0       	ldi	r20, 0x00	; 0
    1892:	50 e0       	ldi	r21, 0x00	; 0
    1894:	60 e0       	ldi	r22, 0x00	; 0
    1896:	70 e0       	ldi	r23, 0x00	; 0
    1898:	0e 94 bb 0a 	call	0x1576	; 0x1576 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
    189c:	81 30       	cpi	r24, 0x01	; 1
    189e:	21 f0       	breq	.+8      	; 0x18a8 <pf_mount+0x4c>
    18a0:	cc 24       	eor	r12, r12
    18a2:	dd 24       	eor	r13, r13
    18a4:	76 01       	movw	r14, r12
    18a6:	1b c0       	rjmp	.+54     	; 0x18de <pf_mount+0x82>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
    18a8:	c4 01       	movw	r24, r8
    18aa:	40 e0       	ldi	r20, 0x00	; 0
    18ac:	50 e0       	ldi	r21, 0x00	; 0
    18ae:	60 e0       	ldi	r22, 0x00	; 0
    18b0:	70 e0       	ldi	r23, 0x00	; 0
    18b2:	2e eb       	ldi	r18, 0xBE	; 190
    18b4:	31 e0       	ldi	r19, 0x01	; 1
    18b6:	00 e1       	ldi	r16, 0x10	; 16
    18b8:	10 e0       	ldi	r17, 0x00	; 0
    18ba:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <disk_readp>
    18be:	89 2b       	or	r24, r25
    18c0:	09 f0       	breq	.+2      	; 0x18c4 <pf_mount+0x68>
    18c2:	cb c0       	rjmp	.+406    	; 0x1a5a <pf_mount+0x1fe>
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
    18c4:	8d 81       	ldd	r24, Y+5	; 0x05
    18c6:	88 23       	and	r24, r24
    18c8:	09 f4       	brne	.+2      	; 0x18cc <pf_mount+0x70>
    18ca:	ca c0       	rjmp	.+404    	; 0x1a60 <pf_mount+0x204>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
    18cc:	c9 84       	ldd	r12, Y+9	; 0x09
    18ce:	da 84       	ldd	r13, Y+10	; 0x0a
    18d0:	eb 84       	ldd	r14, Y+11	; 0x0b
    18d2:	fc 84       	ldd	r15, Y+12	; 0x0c
				fmt = check_fs(buf, bsect);	/* Check the partition */
    18d4:	c4 01       	movw	r24, r8
    18d6:	b7 01       	movw	r22, r14
    18d8:	a6 01       	movw	r20, r12
    18da:	0e 94 bb 0a 	call	0x1576	; 0x1576 <check_fs>
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    18de:	83 30       	cpi	r24, 0x03	; 3
    18e0:	09 f4       	brne	.+2      	; 0x18e4 <pf_mount+0x88>
    18e2:	bb c0       	rjmp	.+374    	; 0x1a5a <pf_mount+0x1fe>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    18e4:	88 23       	and	r24, r24
    18e6:	09 f0       	breq	.+2      	; 0x18ea <pf_mount+0x8e>
    18e8:	bb c0       	rjmp	.+374    	; 0x1a60 <pf_mount+0x204>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
    18ea:	ce 01       	movw	r24, r28
    18ec:	01 96       	adiw	r24, 0x01	; 1
    18ee:	b7 01       	movw	r22, r14
    18f0:	a6 01       	movw	r20, r12
    18f2:	2d e0       	ldi	r18, 0x0D	; 13
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	04 e2       	ldi	r16, 0x24	; 36
    18f8:	10 e0       	ldi	r17, 0x00	; 0
    18fa:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <disk_readp>
    18fe:	89 2b       	or	r24, r25
    1900:	09 f0       	breq	.+2      	; 0x1904 <pf_mount+0xa8>
    1902:	ab c0       	rjmp	.+342    	; 0x1a5a <pf_mount+0x1fe>

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
    1904:	8a 85       	ldd	r24, Y+10	; 0x0a
    1906:	9b 85       	ldd	r25, Y+11	; 0x0b
    1908:	bc 01       	movw	r22, r24
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	90 e0       	ldi	r25, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
    190e:	61 15       	cp	r22, r1
    1910:	71 05       	cpc	r23, r1
    1912:	81 05       	cpc	r24, r1
    1914:	91 05       	cpc	r25, r1
    1916:	21 f4       	brne	.+8      	; 0x1920 <pf_mount+0xc4>
    1918:	68 8d       	ldd	r22, Y+24	; 0x18
    191a:	79 8d       	ldd	r23, Y+25	; 0x19
    191c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    191e:	9b 8d       	ldd	r25, Y+27	; 0x1b

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
    1920:	2c 81       	ldd	r18, Y+4	; 0x04
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	40 e0       	ldi	r20, 0x00	; 0
    1926:	50 e0       	ldi	r21, 0x00	; 0
    1928:	0e 94 2e 10 	call	0x205c	; 0x205c <__mulsi3>
    192c:	3b 01       	movw	r6, r22
    192e:	4c 01       	movw	r8, r24
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    1930:	8a 81       	ldd	r24, Y+2	; 0x02
    1932:	9b 81       	ldd	r25, Y+3	; 0x03
    1934:	a0 e0       	ldi	r26, 0x00	; 0
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	c8 0e       	add	r12, r24
    193a:	d9 1e       	adc	r13, r25
    193c:	ea 1e       	adc	r14, r26
    193e:	fb 1e       	adc	r15, r27
    1940:	f5 01       	movw	r30, r10
    1942:	c4 86       	std	Z+12, r12	; 0x0c
    1944:	d5 86       	std	Z+13, r13	; 0x0d
    1946:	e6 86       	std	Z+14, r14	; 0x0e
    1948:	f7 86       	std	Z+15, r15	; 0x0f
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
    194a:	89 81       	ldd	r24, Y+1	; 0x01
    194c:	81 83       	std	Z+1, r24	; 0x01
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
    194e:	2d 81       	ldd	r18, Y+5	; 0x05
    1950:	3e 81       	ldd	r19, Y+6	; 0x06
    1952:	35 83       	std	Z+5, r19	; 0x05
    1954:	24 83       	std	Z+4, r18	; 0x04
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
    1956:	8f 81       	ldd	r24, Y+7	; 0x07
    1958:	98 85       	ldd	r25, Y+8	; 0x08
    195a:	7c 01       	movw	r14, r24
    195c:	00 e0       	ldi	r16, 0x00	; 0
    195e:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
    1960:	e1 14       	cp	r14, r1
    1962:	f1 04       	cpc	r15, r1
    1964:	01 05       	cpc	r16, r1
    1966:	11 05       	cpc	r17, r1
    1968:	21 f4       	brne	.+8      	; 0x1972 <pf_mount+0x116>
    196a:	ec 88       	ldd	r14, Y+20	; 0x14
    196c:	fd 88       	ldd	r15, Y+21	; 0x15
    196e:	0e 89       	ldd	r16, Y+22	; 0x16
    1970:	1f 89       	ldd	r17, Y+23	; 0x17
	mclst = (tsect						/* Last cluster# + 1 */
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	9b 81       	ldd	r25, Y+3	; 0x03
    1976:	a0 e0       	ldi	r26, 0x00	; 0
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	e8 1a       	sub	r14, r24
    197c:	f9 0a       	sbc	r15, r25
    197e:	0a 0b       	sbc	r16, r26
    1980:	1b 0b       	sbc	r17, r27
    1982:	e6 18       	sub	r14, r6
    1984:	f7 08       	sbc	r15, r7
    1986:	08 09       	sbc	r16, r8
    1988:	19 09       	sbc	r17, r9
    198a:	44 e0       	ldi	r20, 0x04	; 4
    198c:	36 95       	lsr	r19
    198e:	27 95       	ror	r18
    1990:	4a 95       	dec	r20
    1992:	e1 f7       	brne	.-8      	; 0x198c <pf_mount+0x130>
    1994:	c9 01       	movw	r24, r18
    1996:	a0 e0       	ldi	r26, 0x00	; 0
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	e8 1a       	sub	r14, r24
    199c:	f9 0a       	sbc	r15, r25
    199e:	0a 0b       	sbc	r16, r26
    19a0:	1b 0b       	sbc	r17, r27
    19a2:	f5 01       	movw	r30, r10
    19a4:	21 81       	ldd	r18, Z+1	; 0x01
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	40 e0       	ldi	r20, 0x00	; 0
    19aa:	50 e0       	ldi	r21, 0x00	; 0
    19ac:	c8 01       	movw	r24, r16
    19ae:	b7 01       	movw	r22, r14
    19b0:	0e 94 6d 10 	call	0x20da	; 0x20da <__udivmodsi4>
    19b4:	2e 5f       	subi	r18, 0xFE	; 254
    19b6:	3f 4f       	sbci	r19, 0xFF	; 255
    19b8:	4f 4f       	sbci	r20, 0xFF	; 255
    19ba:	5f 4f       	sbci	r21, 0xFF	; 255
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->max_clust = (CLUST)mclst;
    19bc:	f5 01       	movw	r30, r10
    19be:	20 87       	std	Z+8, r18	; 0x08
    19c0:	31 87       	std	Z+9, r19	; 0x09
    19c2:	42 87       	std	Z+10, r20	; 0x0a
    19c4:	53 87       	std	Z+11, r21	; 0x0b

	fmt = FS_FAT12;							/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;		/* Number of clusters >= 0xFF5 */
    19c6:	27 3f       	cpi	r18, 0xF7	; 247
    19c8:	ff e0       	ldi	r31, 0x0F	; 15
    19ca:	3f 07       	cpc	r19, r31
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	4f 07       	cpc	r20, r31
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	5f 07       	cpc	r21, r31
    19d4:	10 f4       	brcc	.+4      	; 0x19da <pf_mount+0x17e>
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	08 c0       	rjmp	.+16     	; 0x19ea <pf_mount+0x18e>
	if (mclst >= 0xFFF7)					/* Number of clusters >= 0xFFF5 */
    19da:	27 5f       	subi	r18, 0xF7	; 247
    19dc:	3f 4f       	sbci	r19, 0xFF	; 255
    19de:	40 40       	sbci	r20, 0x00	; 0
    19e0:	50 40       	sbci	r21, 0x00	; 0
    19e2:	10 f0       	brcs	.+4      	; 0x19e8 <pf_mount+0x18c>
    19e4:	83 e0       	ldi	r24, 0x03	; 3
    19e6:	01 c0       	rjmp	.+2      	; 0x19ea <pf_mount+0x18e>
    19e8:	82 e0       	ldi	r24, 0x02	; 2
		fmt = FS_FAT32;
#else
		return FR_NO_FILESYSTEM;
#endif

	fs->fs_type = fmt;		/* FAT sub-type */
    19ea:	f5 01       	movw	r30, r10
    19ec:	80 83       	st	Z, r24
#if _FS_FAT32
	if (fmt == FS_FAT32)
    19ee:	83 30       	cpi	r24, 0x03	; 3
    19f0:	29 f4       	brne	.+10     	; 0x19fc <pf_mount+0x1a0>
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
    19f2:	88 a1       	ldd	r24, Y+32	; 0x20
    19f4:	99 a1       	ldd	r25, Y+33	; 0x21
    19f6:	aa a1       	ldd	r26, Y+34	; 0x22
    19f8:	bb a1       	ldd	r27, Y+35	; 0x23
    19fa:	09 c0       	rjmp	.+18     	; 0x1a0e <pf_mount+0x1b2>
	else
#endif
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    19fc:	f5 01       	movw	r30, r10
    19fe:	84 85       	ldd	r24, Z+12	; 0x0c
    1a00:	95 85       	ldd	r25, Z+13	; 0x0d
    1a02:	a6 85       	ldd	r26, Z+14	; 0x0e
    1a04:	b7 85       	ldd	r27, Z+15	; 0x0f
    1a06:	86 0d       	add	r24, r6
    1a08:	97 1d       	adc	r25, r7
    1a0a:	a8 1d       	adc	r26, r8
    1a0c:	b9 1d       	adc	r27, r9
    1a0e:	80 8b       	std	Z+16, r24	; 0x10
    1a10:	91 8b       	std	Z+17, r25	; 0x11
    1a12:	a2 8b       	std	Z+18, r26	; 0x12
    1a14:	b3 8b       	std	Z+19, r27	; 0x13
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    1a16:	f5 01       	movw	r30, r10
    1a18:	84 81       	ldd	r24, Z+4	; 0x04
    1a1a:	95 81       	ldd	r25, Z+5	; 0x05
    1a1c:	24 e0       	ldi	r18, 0x04	; 4
    1a1e:	96 95       	lsr	r25
    1a20:	87 95       	ror	r24
    1a22:	2a 95       	dec	r18
    1a24:	e1 f7       	brne	.-8      	; 0x1a1e <pf_mount+0x1c2>
    1a26:	a0 e0       	ldi	r26, 0x00	; 0
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	24 85       	ldd	r18, Z+12	; 0x0c
    1a2c:	35 85       	ldd	r19, Z+13	; 0x0d
    1a2e:	46 85       	ldd	r20, Z+14	; 0x0e
    1a30:	57 85       	ldd	r21, Z+15	; 0x0f
    1a32:	82 0f       	add	r24, r18
    1a34:	93 1f       	adc	r25, r19
    1a36:	a4 1f       	adc	r26, r20
    1a38:	b5 1f       	adc	r27, r21
    1a3a:	86 0d       	add	r24, r6
    1a3c:	97 1d       	adc	r25, r7
    1a3e:	a8 1d       	adc	r26, r8
    1a40:	b9 1d       	adc	r27, r9
    1a42:	84 8b       	std	Z+20, r24	; 0x14
    1a44:	95 8b       	std	Z+21, r25	; 0x15
    1a46:	a6 8b       	std	Z+22, r26	; 0x16
    1a48:	b7 8b       	std	Z+23, r27	; 0x17

	fs->flag = 0;
    1a4a:	12 82       	std	Z+2, r1	; 0x02
	FatFs = fs;
    1a4c:	b0 92 64 01 	sts	0x0164, r11
    1a50:	a0 92 63 01 	sts	0x0163, r10
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	05 c0       	rjmp	.+10     	; 0x1a64 <pf_mount+0x208>

	return FR_OK;
    1a5a:	21 e0       	ldi	r18, 0x01	; 1
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <pf_mount+0x208>
    1a60:	27 e0       	ldi	r18, 0x07	; 7
    1a62:	30 e0       	ldi	r19, 0x00	; 0
}
    1a64:	c9 01       	movw	r24, r18
    1a66:	a4 96       	adiw	r28, 0x24	; 36
    1a68:	ee e0       	ldi	r30, 0x0E	; 14
    1a6a:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__epilogue_restores__+0x8>

00001a6e <init_spi>:
/*-----------------------------------------------------------------------*/
void init_spi (void)
{
	WORD tmr;

	DESELECT();												// set default CS pin	
    1a6e:	5e 9a       	sbi	0x0b, 6	; 11
    1a70:	84 ec       	ldi	r24, 0xC4	; 196
    1a72:	99 e0       	ldi	r25, 0x09	; 9
	tmr = 2500;
	do
		asm volatile ("nop");
    1a74:	00 00       	nop
	while (--tmr);
    1a76:	01 97       	sbiw	r24, 0x01	; 1
    1a78:	e9 f7       	brne	.-6      	; 0x1a74 <init_spi+0x6>
	
	// Set spi direction: MOSI and SCK as output, MISO as input
	SPI_DDR |= (1 << DD_MOSI);
    1a7a:	25 9a       	sbi	0x04, 5	; 4
	SPI_DDR |= (1 << DD_SCK);
    1a7c:	27 9a       	sbi	0x04, 7	; 4
	
	// CS pin as output
	SD_CS_DDR |= (1 << SD_CS_PIN);
    1a7e:	56 9a       	sbi	0x0a, 6	; 10
    
	// Initialize SPI port, SPI enabled as master
    SPCR = (1<<SPE) | (1<<MSTR);
    1a80:	80 e5       	ldi	r24, 0x50	; 80
    1a82:	8c bd       	out	0x2c, r24	; 44
	
	// Set SPI at double speed
	SPSR |= (1 << SPI2X);
    1a84:	8d b5       	in	r24, 0x2d	; 45
    1a86:	81 60       	ori	r24, 0x01	; 1
    1a88:	8d bd       	out	0x2d, r24	; 45
}
    1a8a:	08 95       	ret

00001a8c <rcv_spi_m>:

BYTE rcv_spi_m(void)
{
	//send a dummy byte (0xFF) in order to receive a byte from the slave
	SPDR = 0xFF;
    1a8c:	8f ef       	ldi	r24, 0xFF	; 255
    1a8e:	8e bd       	out	0x2e, r24	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    1a90:	0d b4       	in	r0, 0x2d	; 45
    1a92:	07 fe       	sbrs	r0, 7
    1a94:	fd cf       	rjmp	.-6      	; 0x1a90 <rcv_spi_m+0x4>
	;
	
	//return the read byte
	return SPDR;
    1a96:	8e b5       	in	r24, 0x2e	; 46
	
}
    1a98:	08 95       	ret

00001a9a <xmit_spi>:
void xmit_spi(BYTE dat)
{
	//TODO
	//send a byte to the slave
	SPDR = dat;
    1a9a:	8e bd       	out	0x2e, r24	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    1a9c:	0d b4       	in	r0, 0x2d	; 45
    1a9e:	07 fe       	sbrs	r0, 7
    1aa0:	fd cf       	rjmp	.-6      	; 0x1a9c <xmit_spi+0x2>
	;
	//wait for it to be serialized
}
    1aa2:	08 95       	ret

00001aa4 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    1aa4:	df 92       	push	r13
    1aa6:	ef 92       	push	r14
    1aa8:	ff 92       	push	r15
    1aaa:	0f 93       	push	r16
    1aac:	1f 93       	push	r17
    1aae:	d8 2e       	mov	r13, r24
    1ab0:	7a 01       	movw	r14, r20
    1ab2:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    1ab4:	87 ff       	sbrs	r24, 7
    1ab6:	0c c0       	rjmp	.+24     	; 0x1ad0 <send_cmd+0x2c>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    1ab8:	87 e7       	ldi	r24, 0x77	; 119
    1aba:	40 e0       	ldi	r20, 0x00	; 0
    1abc:	50 e0       	ldi	r21, 0x00	; 0
    1abe:	60 e0       	ldi	r22, 0x00	; 0
    1ac0:	70 e0       	ldi	r23, 0x00	; 0
    1ac2:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <send_cmd>
		if (res > 1) return res;
    1ac6:	82 30       	cpi	r24, 0x02	; 2
    1ac8:	08 f0       	brcs	.+2      	; 0x1acc <send_cmd+0x28>
    1aca:	49 c0       	rjmp	.+146    	; 0x1b5e <send_cmd+0xba>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    1acc:	8f e7       	ldi	r24, 0x7F	; 127
    1ace:	d8 22       	and	r13, r24
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card */
	DESELECT();
    1ad0:	5e 9a       	sbi	0x0b, 6	; 11
	rcv_spi();
    1ad2:	8f ef       	ldi	r24, 0xFF	; 255
    1ad4:	8e bd       	out	0x2e, r24	; 46
    1ad6:	0d b4       	in	r0, 0x2d	; 45
    1ad8:	07 fe       	sbrs	r0, 7
    1ada:	fd cf       	rjmp	.-6      	; 0x1ad6 <send_cmd+0x32>
    1adc:	8e b5       	in	r24, 0x2e	; 46
	SELECT();
    1ade:	5e 98       	cbi	0x0b, 6	; 11
	rcv_spi();
    1ae0:	8f ef       	ldi	r24, 0xFF	; 255
    1ae2:	8e bd       	out	0x2e, r24	; 46
    1ae4:	0d b4       	in	r0, 0x2d	; 45
    1ae6:	07 fe       	sbrs	r0, 7
    1ae8:	fd cf       	rjmp	.-6      	; 0x1ae4 <send_cmd+0x40>
    1aea:	8e b5       	in	r24, 0x2e	; 46
}
void xmit_spi(BYTE dat)
{
	//TODO
	//send a byte to the slave
	SPDR = dat;
    1aec:	de bc       	out	0x2e, r13	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    1aee:	0d b4       	in	r0, 0x2d	; 45
    1af0:	07 fe       	sbrs	r0, 7
    1af2:	fd cf       	rjmp	.-6      	; 0x1aee <send_cmd+0x4a>
	SELECT();
	rcv_spi();

	/* Send a command packet */
	xmit_spi(cmd);						/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    1af4:	81 2f       	mov	r24, r17
    1af6:	99 27       	eor	r25, r25
    1af8:	aa 27       	eor	r26, r26
    1afa:	bb 27       	eor	r27, r27
}
void xmit_spi(BYTE dat)
{
	//TODO
	//send a byte to the slave
	SPDR = dat;
    1afc:	8e bd       	out	0x2e, r24	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    1afe:	0d b4       	in	r0, 0x2d	; 45
    1b00:	07 fe       	sbrs	r0, 7
    1b02:	fd cf       	rjmp	.-6      	; 0x1afe <send_cmd+0x5a>
	rcv_spi();

	/* Send a command packet */
	xmit_spi(cmd);						/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    1b04:	c8 01       	movw	r24, r16
    1b06:	aa 27       	eor	r26, r26
    1b08:	bb 27       	eor	r27, r27
}
void xmit_spi(BYTE dat)
{
	//TODO
	//send a byte to the slave
	SPDR = dat;
    1b0a:	8e bd       	out	0x2e, r24	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    1b0c:	0d b4       	in	r0, 0x2d	; 45
    1b0e:	07 fe       	sbrs	r0, 7
    1b10:	fd cf       	rjmp	.-6      	; 0x1b0c <send_cmd+0x68>

	/* Send a command packet */
	xmit_spi(cmd);						/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    1b12:	bb 27       	eor	r27, r27
    1b14:	a1 2f       	mov	r26, r17
    1b16:	90 2f       	mov	r25, r16
    1b18:	8f 2d       	mov	r24, r15
}
void xmit_spi(BYTE dat)
{
	//TODO
	//send a byte to the slave
	SPDR = dat;
    1b1a:	8e bd       	out	0x2e, r24	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    1b1c:	0d b4       	in	r0, 0x2d	; 45
    1b1e:	07 fe       	sbrs	r0, 7
    1b20:	fd cf       	rjmp	.-6      	; 0x1b1c <send_cmd+0x78>
}
void xmit_spi(BYTE dat)
{
	//TODO
	//send a byte to the slave
	SPDR = dat;
    1b22:	ee bc       	out	0x2e, r14	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    1b24:	0d b4       	in	r0, 0x2d	; 45
    1b26:	07 fe       	sbrs	r0, 7
    1b28:	fd cf       	rjmp	.-6      	; 0x1b24 <send_cmd+0x80>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    1b2a:	80 e4       	ldi	r24, 0x40	; 64
    1b2c:	d8 16       	cp	r13, r24
    1b2e:	11 f4       	brne	.+4      	; 0x1b34 <send_cmd+0x90>
    1b30:	85 e9       	ldi	r24, 0x95	; 149
    1b32:	06 c0       	rjmp	.+12     	; 0x1b40 <send_cmd+0x9c>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    1b34:	88 e4       	ldi	r24, 0x48	; 72
    1b36:	d8 16       	cp	r13, r24
    1b38:	11 f4       	brne	.+4      	; 0x1b3e <send_cmd+0x9a>
    1b3a:	87 e8       	ldi	r24, 0x87	; 135
    1b3c:	01 c0       	rjmp	.+2      	; 0x1b40 <send_cmd+0x9c>
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
}
void xmit_spi(BYTE dat)
{
	//TODO
	//send a byte to the slave
	SPDR = dat;
    1b40:	8e bd       	out	0x2e, r24	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    1b42:	0d b4       	in	r0, 0x2d	; 45
    1b44:	07 fe       	sbrs	r0, 7
    1b46:	fd cf       	rjmp	.-6      	; 0x1b42 <send_cmd+0x9e>
    1b48:	9a e0       	ldi	r25, 0x0A	; 10
	xmit_spi(n);

	/* Receive a command response */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = rcv_spi();
    1b4a:	2f ef       	ldi	r18, 0xFF	; 255
    1b4c:	2e bd       	out	0x2e, r18	; 46
    1b4e:	0d b4       	in	r0, 0x2d	; 45
    1b50:	07 fe       	sbrs	r0, 7
    1b52:	fd cf       	rjmp	.-6      	; 0x1b4e <send_cmd+0xaa>
    1b54:	8e b5       	in	r24, 0x2e	; 46
	} while ((res & 0x80) && --n);
    1b56:	87 ff       	sbrs	r24, 7
    1b58:	02 c0       	rjmp	.+4      	; 0x1b5e <send_cmd+0xba>
    1b5a:	91 50       	subi	r25, 0x01	; 1
    1b5c:	b9 f7       	brne	.-18     	; 0x1b4c <send_cmd+0xa8>

	return res;			/* Return with the response value */
}
    1b5e:	1f 91       	pop	r17
    1b60:	0f 91       	pop	r16
    1b62:	ff 90       	pop	r15
    1b64:	ef 90       	pop	r14
    1b66:	df 90       	pop	r13
    1b68:	08 95       	ret

00001b6a <disk_readp>:
	BYTE *buff,		/* Pointer to the read buffer (NULL:Read bytes are forwarded to the stream) */
	DWORD lba,		/* Sector number (LBA) */
	WORD ofs,		/* Byte offset to read from (0..511) */
	WORD cnt		/* Number of bytes to read (ofs + cnt mus be <= 512) */
)
{
    1b6a:	ef 92       	push	r14
    1b6c:	ff 92       	push	r15
    1b6e:	0f 93       	push	r16
    1b70:	1f 93       	push	r17
    1b72:	cf 93       	push	r28
    1b74:	df 93       	push	r29
    1b76:	7c 01       	movw	r14, r24
    1b78:	e9 01       	movw	r28, r18
	DRESULT res;
	BYTE rc;
	WORD bc;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert to byte address if needed */
    1b7a:	80 91 67 01 	lds	r24, 0x0167
    1b7e:	83 fd       	sbrc	r24, 3
    1b80:	07 c0       	rjmp	.+14     	; 0x1b90 <disk_readp+0x26>
    1b82:	39 e0       	ldi	r19, 0x09	; 9
    1b84:	44 0f       	add	r20, r20
    1b86:	55 1f       	adc	r21, r21
    1b88:	66 1f       	adc	r22, r22
    1b8a:	77 1f       	adc	r23, r23
    1b8c:	3a 95       	dec	r19
    1b8e:	d1 f7       	brne	.-12     	; 0x1b84 <disk_readp+0x1a>

	res = RES_ERROR;
	if (send_cmd(CMD17, lba) == 0) {		/* READ_SINGLE_BLOCK */
    1b90:	81 e5       	ldi	r24, 0x51	; 81
    1b92:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <send_cmd>
    1b96:	88 23       	and	r24, r24
    1b98:	09 f0       	breq	.+2      	; 0x1b9c <disk_readp+0x32>
    1b9a:	3f c0       	rjmp	.+126    	; 0x1c1a <disk_readp+0xb0>
    1b9c:	80 e3       	ldi	r24, 0x30	; 48
    1b9e:	95 e7       	ldi	r25, 0x75	; 117

		bc = 30000;
		do {							/* Wait for data packet in timeout of 100ms */
			rc = rcv_spi();
    1ba0:	3f ef       	ldi	r19, 0xFF	; 255
    1ba2:	3e bd       	out	0x2e, r19	; 46
    1ba4:	0d b4       	in	r0, 0x2d	; 45
    1ba6:	07 fe       	sbrs	r0, 7
    1ba8:	fd cf       	rjmp	.-6      	; 0x1ba4 <disk_readp+0x3a>
    1baa:	2e b5       	in	r18, 0x2e	; 46
		} while (rc == 0xFF && --bc);
    1bac:	2f 3f       	cpi	r18, 0xFF	; 255
    1bae:	19 f4       	brne	.+6      	; 0x1bb6 <disk_readp+0x4c>
    1bb0:	01 97       	sbiw	r24, 0x01	; 1
    1bb2:	b9 f7       	brne	.-18     	; 0x1ba2 <disk_readp+0x38>
    1bb4:	32 c0       	rjmp	.+100    	; 0x1c1a <disk_readp+0xb0>

		if (rc == 0xFE) {				/* A data packet arrived */
    1bb6:	2e 3f       	cpi	r18, 0xFE	; 254
    1bb8:	81 f5       	brne	.+96     	; 0x1c1a <disk_readp+0xb0>
			bc = 514 - ofs - cnt;
    1bba:	22 27       	eor	r18, r18
    1bbc:	33 27       	eor	r19, r19
    1bbe:	2c 1b       	sub	r18, r28
    1bc0:	3d 0b       	sbc	r19, r29
    1bc2:	2e 5f       	subi	r18, 0xFE	; 254
    1bc4:	3d 4f       	sbci	r19, 0xFD	; 253
    1bc6:	20 1b       	sub	r18, r16
    1bc8:	31 0b       	sbc	r19, r17

			/* Skip leading bytes */
			if (ofs) {
    1bca:	20 97       	sbiw	r28, 0x00	; 0
    1bcc:	41 f0       	breq	.+16     	; 0x1bde <disk_readp+0x74>
				do rcv_spi(); while (--ofs);
    1bce:	8f ef       	ldi	r24, 0xFF	; 255
    1bd0:	8e bd       	out	0x2e, r24	; 46
    1bd2:	0d b4       	in	r0, 0x2d	; 45
    1bd4:	07 fe       	sbrs	r0, 7
    1bd6:	fd cf       	rjmp	.-6      	; 0x1bd2 <disk_readp+0x68>
    1bd8:	9e b5       	in	r25, 0x2e	; 46
    1bda:	21 97       	sbiw	r28, 0x01	; 1
    1bdc:	c9 f7       	brne	.-14     	; 0x1bd0 <disk_readp+0x66>
			}

			/* Receive a part of the sector */
			if (buff) {	/* Store data to the memory */
    1bde:	e1 14       	cp	r14, r1
    1be0:	f1 04       	cpc	r15, r1
    1be2:	79 f0       	breq	.+30     	; 0x1c02 <disk_readp+0x98>
				do
					*buff++ = rcv_spi();
    1be4:	9f ef       	ldi	r25, 0xFF	; 255
    1be6:	9e bd       	out	0x2e, r25	; 46
    1be8:	0d b4       	in	r0, 0x2d	; 45
    1bea:	07 fe       	sbrs	r0, 7
    1bec:	fd cf       	rjmp	.-6      	; 0x1be8 <disk_readp+0x7e>
    1bee:	8e b5       	in	r24, 0x2e	; 46
    1bf0:	f7 01       	movw	r30, r14
    1bf2:	80 83       	st	Z, r24
				while (--cnt);
    1bf4:	01 50       	subi	r16, 0x01	; 1
    1bf6:	10 40       	sbci	r17, 0x00	; 0
    1bf8:	21 f0       	breq	.+8      	; 0x1c02 <disk_readp+0x98>
			}

			/* Receive a part of the sector */
			if (buff) {	/* Store data to the memory */
				do
					*buff++ = rcv_spi();
    1bfa:	08 94       	sec
    1bfc:	e1 1c       	adc	r14, r1
    1bfe:	f1 1c       	adc	r15, r1
    1c00:	f2 cf       	rjmp	.-28     	; 0x1be6 <disk_readp+0x7c>
				while (--cnt);
			} 
			
			/* Skip trailing bytes and CRC */
			do rcv_spi(); while (--bc);
    1c02:	8f ef       	ldi	r24, 0xFF	; 255
    1c04:	8e bd       	out	0x2e, r24	; 46
    1c06:	0d b4       	in	r0, 0x2d	; 45
    1c08:	07 fe       	sbrs	r0, 7
    1c0a:	fd cf       	rjmp	.-6      	; 0x1c06 <disk_readp+0x9c>
    1c0c:	9e b5       	in	r25, 0x2e	; 46
    1c0e:	21 50       	subi	r18, 0x01	; 1
    1c10:	30 40       	sbci	r19, 0x00	; 0
    1c12:	c1 f7       	brne	.-16     	; 0x1c04 <disk_readp+0x9a>
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	02 c0       	rjmp	.+4      	; 0x1c1e <disk_readp+0xb4>
    1c1a:	21 e0       	ldi	r18, 0x01	; 1
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	DESELECT();
    1c1e:	5e 9a       	sbi	0x0b, 6	; 11
	rcv_spi();
    1c20:	8f ef       	ldi	r24, 0xFF	; 255
    1c22:	8e bd       	out	0x2e, r24	; 46
    1c24:	0d b4       	in	r0, 0x2d	; 45
    1c26:	07 fe       	sbrs	r0, 7
    1c28:	fd cf       	rjmp	.-6      	; 0x1c24 <disk_readp+0xba>
    1c2a:	8e b5       	in	r24, 0x2e	; 46
	}

	release_spi();

	return res;
}
    1c2c:	c9 01       	movw	r24, r18
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
    1c32:	e6 e0       	ldi	r30, 0x06	; 6
    1c34:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <__epilogue_restores__+0x18>

00001c38 <disk_writep>:

DRESULT disk_writep (
	const BYTE *buff,	/* Pointer to the bytes to be written (NULL:Initiate/Finalize sector write) */
	DWORD sa			/* Number of bytes to send, Sector number (LBA) or zero */
)
{
    1c38:	fc 01       	movw	r30, r24
	static WORD wc;


	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
    1c3a:	00 97       	sbiw	r24, 0x00	; 0
    1c3c:	09 f1       	breq	.+66     	; 0x1c80 <disk_writep+0x48>
		bc = (WORD)sa;
    1c3e:	20 91 65 01 	lds	r18, 0x0165
    1c42:	30 91 66 01 	lds	r19, 0x0166
    1c46:	0a c0       	rjmp	.+20     	; 0x1c5c <disk_writep+0x24>
		while (bc && wc) {		/* Send data bytes to the card */
			xmit_spi(*buff++);
    1c48:	80 81       	ld	r24, Z
}
void xmit_spi(BYTE dat)
{
	//TODO
	//send a byte to the slave
	SPDR = dat;
    1c4a:	8e bd       	out	0x2e, r24	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    1c4c:	0d b4       	in	r0, 0x2d	; 45
    1c4e:	07 fe       	sbrs	r0, 7
    1c50:	fd cf       	rjmp	.-6      	; 0x1c4c <disk_writep+0x14>
	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
		bc = (WORD)sa;
		while (bc && wc) {		/* Send data bytes to the card */
			xmit_spi(*buff++);
    1c52:	31 96       	adiw	r30, 0x01	; 1
			wc--; bc--;
    1c54:	41 50       	subi	r20, 0x01	; 1
    1c56:	50 40       	sbci	r21, 0x00	; 0
    1c58:	21 50       	subi	r18, 0x01	; 1
    1c5a:	30 40       	sbci	r19, 0x00	; 0

	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
		bc = (WORD)sa;
		while (bc && wc) {		/* Send data bytes to the card */
    1c5c:	41 15       	cp	r20, r1
    1c5e:	51 05       	cpc	r21, r1
    1c60:	29 f4       	brne	.+10     	; 0x1c6c <disk_writep+0x34>
    1c62:	30 93 66 01 	sts	0x0166, r19
    1c66:	20 93 65 01 	sts	0x0165, r18
    1c6a:	07 c0       	rjmp	.+14     	; 0x1c7a <disk_writep+0x42>
    1c6c:	21 15       	cp	r18, r1
    1c6e:	31 05       	cpc	r19, r1
    1c70:	59 f7       	brne	.-42     	; 0x1c48 <disk_writep+0x10>
    1c72:	10 92 66 01 	sts	0x0166, r1
    1c76:	10 92 65 01 	sts	0x0165, r1
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	5d c0       	rjmp	.+186    	; 0x1d3a <disk_writep+0x102>
			xmit_spi(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
	} else {
		if (sa) {	/* Initiate sector write process */
    1c80:	41 15       	cp	r20, r1
    1c82:	51 05       	cpc	r21, r1
    1c84:	61 05       	cpc	r22, r1
    1c86:	71 05       	cpc	r23, r1
    1c88:	21 f1       	breq	.+72     	; 0x1cd2 <disk_writep+0x9a>
			if (!(CardType & CT_BLOCK)) sa *= 512;	/* Convert to byte address if needed */
    1c8a:	80 91 67 01 	lds	r24, 0x0167
    1c8e:	83 fd       	sbrc	r24, 3
    1c90:	07 c0       	rjmp	.+14     	; 0x1ca0 <disk_writep+0x68>
    1c92:	e9 e0       	ldi	r30, 0x09	; 9
    1c94:	44 0f       	add	r20, r20
    1c96:	55 1f       	adc	r21, r21
    1c98:	66 1f       	adc	r22, r22
    1c9a:	77 1f       	adc	r23, r23
    1c9c:	ea 95       	dec	r30
    1c9e:	d1 f7       	brne	.-12     	; 0x1c94 <disk_writep+0x5c>
			if (send_cmd(CMD24, sa) == 0) {			/* WRITE_SINGLE_BLOCK */
    1ca0:	88 e5       	ldi	r24, 0x58	; 88
    1ca2:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <send_cmd>
    1ca6:	88 23       	and	r24, r24
    1ca8:	19 f0       	breq	.+6      	; 0x1cb0 <disk_writep+0x78>
    1caa:	21 e0       	ldi	r18, 0x01	; 1
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	45 c0       	rjmp	.+138    	; 0x1d3a <disk_writep+0x102>
}
void xmit_spi(BYTE dat)
{
	//TODO
	//send a byte to the slave
	SPDR = dat;
    1cb0:	8f ef       	ldi	r24, 0xFF	; 255
    1cb2:	8e bd       	out	0x2e, r24	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    1cb4:	0d b4       	in	r0, 0x2d	; 45
    1cb6:	07 fe       	sbrs	r0, 7
    1cb8:	fd cf       	rjmp	.-6      	; 0x1cb4 <disk_writep+0x7c>
}
void xmit_spi(BYTE dat)
{
	//TODO
	//send a byte to the slave
	SPDR = dat;
    1cba:	8e ef       	ldi	r24, 0xFE	; 254
    1cbc:	8e bd       	out	0x2e, r24	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    1cbe:	0d b4       	in	r0, 0x2d	; 45
    1cc0:	07 fe       	sbrs	r0, 7
    1cc2:	fd cf       	rjmp	.-6      	; 0x1cbe <disk_writep+0x86>
	} else {
		if (sa) {	/* Initiate sector write process */
			if (!(CardType & CT_BLOCK)) sa *= 512;	/* Convert to byte address if needed */
			if (send_cmd(CMD24, sa) == 0) {			/* WRITE_SINGLE_BLOCK */
				xmit_spi(0xFF); xmit_spi(0xFE);		/* Data block header */
				wc = 512;							/* Set byte counter */
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	92 e0       	ldi	r25, 0x02	; 2
    1cc8:	90 93 66 01 	sts	0x0166, r25
    1ccc:	80 93 65 01 	sts	0x0165, r24
    1cd0:	d4 cf       	rjmp	.-88     	; 0x1c7a <disk_writep+0x42>
				res = RES_OK;
			}
		} else {	/* Finalize sector write process */
			bc = wc + 2;
    1cd2:	80 91 65 01 	lds	r24, 0x0165
    1cd6:	90 91 66 01 	lds	r25, 0x0166
    1cda:	02 96       	adiw	r24, 0x02	; 2
    1cdc:	05 c0       	rjmp	.+10     	; 0x1ce8 <disk_writep+0xb0>
}
void xmit_spi(BYTE dat)
{
	//TODO
	//send a byte to the slave
	SPDR = dat;
    1cde:	1e bc       	out	0x2e, r1	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    1ce0:	0d b4       	in	r0, 0x2d	; 45
    1ce2:	07 fe       	sbrs	r0, 7
    1ce4:	fd cf       	rjmp	.-6      	; 0x1ce0 <disk_writep+0xa8>
    1ce6:	01 97       	sbiw	r24, 0x01	; 1
				wc = 512;							/* Set byte counter */
				res = RES_OK;
			}
		} else {	/* Finalize sector write process */
			bc = wc + 2;
			while (bc--) xmit_spi(0);	/* Fill left bytes and CRC with zeros */
    1ce8:	00 97       	sbiw	r24, 0x00	; 0
    1cea:	c9 f7       	brne	.-14     	; 0x1cde <disk_writep+0xa6>
			if ((rcv_spi() & 0x1F) == 0x05) {	/* Receive data resp and wait for end of write process in timeout of 300ms */
    1cec:	8f ef       	ldi	r24, 0xFF	; 255
    1cee:	8e bd       	out	0x2e, r24	; 46
    1cf0:	0d b4       	in	r0, 0x2d	; 45
    1cf2:	07 fe       	sbrs	r0, 7
    1cf4:	fd cf       	rjmp	.-6      	; 0x1cf0 <disk_writep+0xb8>
    1cf6:	8e b5       	in	r24, 0x2e	; 46
    1cf8:	8f 71       	andi	r24, 0x1F	; 31
    1cfa:	85 30       	cpi	r24, 0x05	; 5
    1cfc:	a9 f4       	brne	.+42     	; 0x1d28 <disk_writep+0xf0>
    1cfe:	48 ee       	ldi	r20, 0xE8	; 232
    1d00:	5d ef       	ldi	r21, 0xFD	; 253
				for (bc = 65000; rcv_spi() != 0xFF && bc; bc--) ;	/* Wait ready */
    1d02:	9f ef       	ldi	r25, 0xFF	; 255
    1d04:	02 c0       	rjmp	.+4      	; 0x1d0a <disk_writep+0xd2>
    1d06:	41 50       	subi	r20, 0x01	; 1
    1d08:	50 40       	sbci	r21, 0x00	; 0
    1d0a:	9e bd       	out	0x2e, r25	; 46
    1d0c:	0d b4       	in	r0, 0x2d	; 45
    1d0e:	07 fe       	sbrs	r0, 7
    1d10:	fd cf       	rjmp	.-6      	; 0x1d0c <disk_writep+0xd4>
    1d12:	8e b5       	in	r24, 0x2e	; 46
    1d14:	8f 3f       	cpi	r24, 0xFF	; 255
    1d16:	21 f0       	breq	.+8      	; 0x1d20 <disk_writep+0xe8>
    1d18:	41 15       	cp	r20, r1
    1d1a:	51 05       	cpc	r21, r1
    1d1c:	a1 f7       	brne	.-24     	; 0x1d06 <disk_writep+0xce>
    1d1e:	04 c0       	rjmp	.+8      	; 0x1d28 <disk_writep+0xf0>
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	45 2b       	or	r20, r21
    1d26:	11 f4       	brne	.+4      	; 0x1d2c <disk_writep+0xf4>
    1d28:	21 e0       	ldi	r18, 0x01	; 1
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	DESELECT();
    1d2c:	5e 9a       	sbi	0x0b, 6	; 11
	rcv_spi();
    1d2e:	8f ef       	ldi	r24, 0xFF	; 255
    1d30:	8e bd       	out	0x2e, r24	; 46
    1d32:	0d b4       	in	r0, 0x2d	; 45
    1d34:	07 fe       	sbrs	r0, 7
    1d36:	fd cf       	rjmp	.-6      	; 0x1d32 <disk_writep+0xfa>
    1d38:	8e b5       	in	r24, 0x2e	; 46
			release_spi();
		}
	}

	return res;
}
    1d3a:	c9 01       	movw	r24, r18
    1d3c:	08 95       	ret

00001d3e <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (void)
{
    1d3e:	a4 e0       	ldi	r26, 0x04	; 4
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	e5 ea       	ldi	r30, 0xA5	; 165
    1d44:	fe e0       	ldi	r31, 0x0E	; 14
    1d46:	0c 94 b4 10 	jmp	0x2168	; 0x2168 <__prologue_saves__+0x14>
	BYTE n, cmd, ty, ocr[4];
	WORD tmr;


	init_spi();
    1d4a:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <init_spi>

#if _WRITE_FUNC
	if (MMC_SEL) disk_writep(0, 0);		/* Finalize write process if it is in progress */
    1d4e:	2c 99       	sbic	0x05, 4	; 5
    1d50:	08 c0       	rjmp	.+16     	; 0x1d62 <disk_initialize+0x24>
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	40 e0       	ldi	r20, 0x00	; 0
    1d58:	50 e0       	ldi	r21, 0x00	; 0
    1d5a:	60 e0       	ldi	r22, 0x00	; 0
    1d5c:	70 e0       	ldi	r23, 0x00	; 0
    1d5e:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <disk_writep>
    1d62:	84 e6       	ldi	r24, 0x64	; 100
#endif
	for (n = 100; n; n--) rcv_spi();	/* Dummy clocks */
    1d64:	9f ef       	ldi	r25, 0xFF	; 255
    1d66:	9e bd       	out	0x2e, r25	; 46
    1d68:	0d b4       	in	r0, 0x2d	; 45
    1d6a:	07 fe       	sbrs	r0, 7
    1d6c:	fd cf       	rjmp	.-6      	; 0x1d68 <disk_initialize+0x2a>
    1d6e:	2e b5       	in	r18, 0x2e	; 46
    1d70:	81 50       	subi	r24, 0x01	; 1
    1d72:	c9 f7       	brne	.-14     	; 0x1d66 <disk_initialize+0x28>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    1d74:	80 e4       	ldi	r24, 0x40	; 64
    1d76:	40 e0       	ldi	r20, 0x00	; 0
    1d78:	50 e0       	ldi	r21, 0x00	; 0
    1d7a:	60 e0       	ldi	r22, 0x00	; 0
    1d7c:	70 e0       	ldi	r23, 0x00	; 0
    1d7e:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <send_cmd>
    1d82:	81 30       	cpi	r24, 0x01	; 1
    1d84:	09 f0       	breq	.+2      	; 0x1d88 <disk_initialize+0x4a>
    1d86:	6e c0       	rjmp	.+220    	; 0x1e64 <disk_initialize+0x126>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
    1d88:	88 e4       	ldi	r24, 0x48	; 72
    1d8a:	4a ea       	ldi	r20, 0xAA	; 170
    1d8c:	51 e0       	ldi	r21, 0x01	; 1
    1d8e:	60 e0       	ldi	r22, 0x00	; 0
    1d90:	70 e0       	ldi	r23, 0x00	; 0
    1d92:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <send_cmd>
    1d96:	81 30       	cpi	r24, 0x01	; 1
    1d98:	09 f0       	breq	.+2      	; 0x1d9c <disk_initialize+0x5e>
    1d9a:	42 c0       	rjmp	.+132    	; 0x1e20 <disk_initialize+0xe2>
    1d9c:	6e 01       	movw	r12, r28
    1d9e:	08 94       	sec
    1da0:	c1 1c       	adc	r12, r1
    1da2:	d1 1c       	adc	r13, r1
    1da4:	76 01       	movw	r14, r12
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
    1da6:	9f ef       	ldi	r25, 0xFF	; 255
    1da8:	9e 01       	movw	r18, r28
    1daa:	2b 5f       	subi	r18, 0xFB	; 251
    1dac:	3f 4f       	sbci	r19, 0xFF	; 255
    1dae:	9e bd       	out	0x2e, r25	; 46
    1db0:	0d b4       	in	r0, 0x2d	; 45
    1db2:	07 fe       	sbrs	r0, 7
    1db4:	fd cf       	rjmp	.-6      	; 0x1db0 <disk_initialize+0x72>
    1db6:	8e b5       	in	r24, 0x2e	; 46
    1db8:	f7 01       	movw	r30, r14
    1dba:	81 93       	st	Z+, r24
    1dbc:	7f 01       	movw	r14, r30
    1dbe:	e2 17       	cp	r30, r18
    1dc0:	f3 07       	cpc	r31, r19
    1dc2:	a9 f7       	brne	.-22     	; 0x1dae <disk_initialize+0x70>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	81 30       	cpi	r24, 0x01	; 1
    1dc8:	09 f0       	breq	.+2      	; 0x1dcc <disk_initialize+0x8e>
    1dca:	4c c0       	rjmp	.+152    	; 0x1e64 <disk_initialize+0x126>
    1dcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dce:	8a 3a       	cpi	r24, 0xAA	; 170
    1dd0:	09 f0       	breq	.+2      	; 0x1dd4 <disk_initialize+0x96>
    1dd2:	48 c0       	rjmp	.+144    	; 0x1e64 <disk_initialize+0x126>
    1dd4:	00 ee       	ldi	r16, 0xE0	; 224
    1dd6:	1e e2       	ldi	r17, 0x2E	; 46
    1dd8:	04 c0       	rjmp	.+8      	; 0x1de2 <disk_initialize+0xa4>
				for (tmr = 12000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) ;	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    1dda:	01 50       	subi	r16, 0x01	; 1
    1ddc:	10 40       	sbci	r17, 0x00	; 0
    1dde:	09 f4       	brne	.+2      	; 0x1de2 <disk_initialize+0xa4>
    1de0:	41 c0       	rjmp	.+130    	; 0x1e64 <disk_initialize+0x126>
    1de2:	89 ee       	ldi	r24, 0xE9	; 233
    1de4:	40 e0       	ldi	r20, 0x00	; 0
    1de6:	50 e0       	ldi	r21, 0x00	; 0
    1de8:	60 e0       	ldi	r22, 0x00	; 0
    1dea:	70 e4       	ldi	r23, 0x40	; 64
    1dec:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <send_cmd>
    1df0:	88 23       	and	r24, r24
    1df2:	99 f7       	brne	.-26     	; 0x1dda <disk_initialize+0x9c>
    1df4:	49 c0       	rjmp	.+146    	; 0x1e88 <disk_initialize+0x14a>
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
    1df6:	9f ef       	ldi	r25, 0xFF	; 255
    1df8:	9e bd       	out	0x2e, r25	; 46
    1dfa:	0d b4       	in	r0, 0x2d	; 45
    1dfc:	07 fe       	sbrs	r0, 7
    1dfe:	fd cf       	rjmp	.-6      	; 0x1dfa <disk_initialize+0xbc>
    1e00:	8e b5       	in	r24, 0x2e	; 46
    1e02:	f6 01       	movw	r30, r12
    1e04:	81 93       	st	Z+, r24
    1e06:	6f 01       	movw	r12, r30
    1e08:	ee 15       	cp	r30, r14
    1e0a:	ff 05       	cpc	r31, r15
    1e0c:	a9 f7       	brne	.-22     	; 0x1df8 <disk_initialize+0xba>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
    1e0e:	89 81       	ldd	r24, Y+1	; 0x01
    1e10:	86 fd       	sbrc	r24, 6
    1e12:	03 c0       	rjmp	.+6      	; 0x1e1a <disk_initialize+0xdc>
    1e14:	94 e0       	ldi	r25, 0x04	; 4
    1e16:	f9 2e       	mov	r15, r25
    1e18:	26 c0       	rjmp	.+76     	; 0x1e66 <disk_initialize+0x128>
    1e1a:	8c e0       	ldi	r24, 0x0C	; 12
    1e1c:	f8 2e       	mov	r15, r24
    1e1e:	23 c0       	rjmp	.+70     	; 0x1e66 <disk_initialize+0x128>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    1e20:	89 ee       	ldi	r24, 0xE9	; 233
    1e22:	40 e0       	ldi	r20, 0x00	; 0
    1e24:	50 e0       	ldi	r21, 0x00	; 0
    1e26:	60 e0       	ldi	r22, 0x00	; 0
    1e28:	70 e0       	ldi	r23, 0x00	; 0
    1e2a:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <send_cmd>
    1e2e:	82 30       	cpi	r24, 0x02	; 2
    1e30:	28 f0       	brcs	.+10     	; 0x1e3c <disk_initialize+0xfe>
    1e32:	b1 e4       	ldi	r27, 0x41	; 65
    1e34:	eb 2e       	mov	r14, r27
    1e36:	ff 24       	eor	r15, r15
    1e38:	f3 94       	inc	r15
    1e3a:	04 c0       	rjmp	.+8      	; 0x1e44 <disk_initialize+0x106>
    1e3c:	a9 ee       	ldi	r26, 0xE9	; 233
    1e3e:	ea 2e       	mov	r14, r26
    1e40:	f2 e0       	ldi	r31, 0x02	; 2
    1e42:	ff 2e       	mov	r15, r31
    1e44:	08 ea       	ldi	r16, 0xA8	; 168
    1e46:	11 e6       	ldi	r17, 0x61	; 97
    1e48:	03 c0       	rjmp	.+6      	; 0x1e50 <disk_initialize+0x112>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 25000; tmr && send_cmd(cmd, 0); tmr--) ;	/* Wait for leaving idle state */
    1e4a:	01 50       	subi	r16, 0x01	; 1
    1e4c:	10 40       	sbci	r17, 0x00	; 0
    1e4e:	51 f0       	breq	.+20     	; 0x1e64 <disk_initialize+0x126>
    1e50:	8e 2d       	mov	r24, r14
    1e52:	40 e0       	ldi	r20, 0x00	; 0
    1e54:	50 e0       	ldi	r21, 0x00	; 0
    1e56:	60 e0       	ldi	r22, 0x00	; 0
    1e58:	70 e0       	ldi	r23, 0x00	; 0
    1e5a:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <send_cmd>
    1e5e:	88 23       	and	r24, r24
    1e60:	a1 f7       	brne	.-24     	; 0x1e4a <disk_initialize+0x10c>
    1e62:	1d c0       	rjmp	.+58     	; 0x1e9e <disk_initialize+0x160>
    1e64:	ff 24       	eor	r15, r15
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    1e66:	f0 92 67 01 	sts	0x0167, r15
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	DESELECT();
    1e6a:	5e 9a       	sbi	0x0b, 6	; 11
	rcv_spi();
    1e6c:	8f ef       	ldi	r24, 0xFF	; 255
    1e6e:	8e bd       	out	0x2e, r24	; 46
    1e70:	0d b4       	in	r0, 0x2d	; 45
    1e72:	07 fe       	sbrs	r0, 7
    1e74:	fd cf       	rjmp	.-6      	; 0x1e70 <disk_initialize+0x132>
    1e76:	8e b5       	in	r24, 0x2e	; 46
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	ff 20       	and	r15, r15
    1e7c:	09 f4       	brne	.+2      	; 0x1e80 <disk_initialize+0x142>
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
	}
	CardType = ty;
	release_spi();

	return ty ? 0 : STA_NOINIT;
}
    1e80:	24 96       	adiw	r28, 0x04	; 4
    1e82:	e8 e0       	ldi	r30, 0x08	; 8
    1e84:	0c 94 d0 10 	jmp	0x21a0	; 0x21a0 <__epilogue_restores__+0x14>
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 12000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) ;	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    1e88:	8a e7       	ldi	r24, 0x7A	; 122
    1e8a:	40 e0       	ldi	r20, 0x00	; 0
    1e8c:	50 e0       	ldi	r21, 0x00	; 0
    1e8e:	60 e0       	ldi	r22, 0x00	; 0
    1e90:	70 e0       	ldi	r23, 0x00	; 0
    1e92:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <send_cmd>
    1e96:	88 23       	and	r24, r24
    1e98:	09 f4       	brne	.+2      	; 0x1e9c <disk_initialize+0x15e>
    1e9a:	ad cf       	rjmp	.-166    	; 0x1df6 <disk_initialize+0xb8>
    1e9c:	e3 cf       	rjmp	.-58     	; 0x1e64 <disk_initialize+0x126>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 25000; tmr && send_cmd(cmd, 0); tmr--) ;	/* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
    1e9e:	80 e5       	ldi	r24, 0x50	; 80
    1ea0:	40 e0       	ldi	r20, 0x00	; 0
    1ea2:	52 e0       	ldi	r21, 0x02	; 2
    1ea4:	60 e0       	ldi	r22, 0x00	; 0
    1ea6:	70 e0       	ldi	r23, 0x00	; 0
    1ea8:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <send_cmd>
    1eac:	88 23       	and	r24, r24
    1eae:	d1 f6       	brne	.-76     	; 0x1e64 <disk_initialize+0x126>
    1eb0:	da cf       	rjmp	.-76     	; 0x1e66 <disk_initialize+0x128>

00001eb2 <LCD_write>:
	RW_LOW();	// setam pinul RW pe low (suntem in modul de comenzi acum)
	LCD_write(_data);	// apelam procedura ce trimite byte-ul pe firele de date
}

void LCD_write(unsigned char _byte)
{
    1eb2:	a2 e0       	ldi	r26, 0x02	; 2
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	ef e5       	ldi	r30, 0x5F	; 95
    1eb8:	ff e0       	ldi	r31, 0x0F	; 15
    1eba:	0c 94 ba 10 	jmp	0x2174	; 0x2174 <__prologue_saves__+0x20>
    1ebe:	8a 83       	std	Y+2, r24	; 0x02
	// scriem cei mai semnificativi 4 biti pe firele de date
    unsigned char _byte2;
	
	_byte2 = _byte>>4;
    1ec0:	82 95       	swap	r24
    1ec2:	8f 70       	andi	r24, 0x0F	; 15
    1ec4:	89 83       	std	Y+1, r24	; 0x01

	LcdDATA_PORT &= ~(1<<LcdD4);
    1ec6:	44 98       	cbi	0x08, 4	; 8
	if ( bit_is_set( _byte2, 0 ) )
    1ec8:	fe 01       	movw	r30, r28
    1eca:	31 96       	adiw	r30, 0x01	; 1
    1ecc:	89 81       	ldd	r24, Y+1	; 0x01
    1ece:	80 fd       	sbrc	r24, 0
		LcdDATA_PORT |= (1<<LcdD4);
    1ed0:	44 9a       	sbi	0x08, 4	; 8
		
	LcdDATA_PORT &= ~(1<<LcdD5);
    1ed2:	45 98       	cbi	0x08, 5	; 8
	if ( bit_is_set( _byte2, 1 ) )
    1ed4:	80 81       	ld	r24, Z
    1ed6:	81 fd       	sbrc	r24, 1
		LcdDATA_PORT |= (1<<LcdD5);
    1ed8:	45 9a       	sbi	0x08, 5	; 8

	LcdDATA_PORT &= ~(1<<LcdD6);
    1eda:	46 98       	cbi	0x08, 6	; 8
	if ( bit_is_set( _byte2, 2 ) )
    1edc:	80 81       	ld	r24, Z
    1ede:	82 fd       	sbrc	r24, 2
		LcdDATA_PORT |= (1<<LcdD6);
    1ee0:	46 9a       	sbi	0x08, 6	; 8

	LcdDATA_PORT &= ~(1<<LcdD7);
    1ee2:	47 98       	cbi	0x08, 7	; 8
	if ( bit_is_set( _byte2, 3 ) )
    1ee4:	80 81       	ld	r24, Z
    1ee6:	83 fd       	sbrc	r24, 3
		LcdDATA_PORT |= (1<<LcdD7);
    1ee8:	47 9a       	sbi	0x08, 7	; 8
		
	ENABLE();	// Setam Pinul E pe high
    1eea:	43 9a       	sbi	0x08, 3	; 8
	LCD_waitInstructions(12);	// Asteptam o perioada de timp T
	DISABLE();	// Setam Pinul E pe low
    1eec:	43 98       	cbi	0x08, 3	; 8
	LCD_waitInstructions(12);	// Asteptam o perioada de timp T
	
	// scriem cei mai putin semnificativi 4 biti pe firele de date
	LcdDATA_PORT &= ~(1<<LcdD4);
    1eee:	44 98       	cbi	0x08, 4	; 8
	if ( bit_is_set( _byte, 0 ) )
    1ef0:	fe 01       	movw	r30, r28
    1ef2:	32 96       	adiw	r30, 0x02	; 2
    1ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef6:	80 fd       	sbrc	r24, 0
		LcdDATA_PORT |= (1<<LcdD4);
    1ef8:	44 9a       	sbi	0x08, 4	; 8
	
	LcdDATA_PORT &= ~(1<<LcdD5);
    1efa:	45 98       	cbi	0x08, 5	; 8
	if ( bit_is_set( _byte, 1 ) )
    1efc:	80 81       	ld	r24, Z
    1efe:	81 fd       	sbrc	r24, 1
		LcdDATA_PORT |= (1<<LcdD5);
    1f00:	45 9a       	sbi	0x08, 5	; 8

	LcdDATA_PORT &= ~(1<<LcdD6);
    1f02:	46 98       	cbi	0x08, 6	; 8
	if ( bit_is_set( _byte, 2 ) )
    1f04:	80 81       	ld	r24, Z
    1f06:	82 fd       	sbrc	r24, 2
		LcdDATA_PORT |= (1<<LcdD6);
    1f08:	46 9a       	sbi	0x08, 6	; 8

	LcdDATA_PORT &= ~(1<<LcdD7);
    1f0a:	47 98       	cbi	0x08, 7	; 8
	if ( bit_is_set( _byte, 3 ) )
    1f0c:	80 81       	ld	r24, Z
    1f0e:	83 fd       	sbrc	r24, 3
		LcdDATA_PORT |= (1<<LcdD7);
    1f10:	47 9a       	sbi	0x08, 7	; 8

	ENABLE();	// Setam Pinul E pe high
    1f12:	43 9a       	sbi	0x08, 3	; 8
	LCD_waitInstructions(12);	// Asteptam o perioada de timp T
	DISABLE();	// Setam Pinul E pe low
    1f14:	43 98       	cbi	0x08, 3	; 8
}
    1f16:	22 96       	adiw	r28, 0x02	; 2
    1f18:	e2 e0       	ldi	r30, 0x02	; 2
    1f1a:	0c 94 d6 10 	jmp	0x21ac	; 0x21ac <__epilogue_restores__+0x20>

00001f1e <LCD_writeData>:
    1f1e:	e0 e4       	ldi	r30, 0x40	; 64
    1f20:	fc e9       	ldi	r31, 0x9C	; 156
    1f22:	31 97       	sbiw	r30, 0x01	; 1
    1f24:	f1 f7       	brne	.-4      	; 0x1f22 <LCD_writeData+0x4>

/* Trimite date catre LCD pentru afisare	*/
void LCD_writeData(unsigned char _data)
{
	LCD_waitNotBusy();	// asteptam ca LCD-ul sa fie liber sa primeasca comenzile	
	RS_HIGH();	// setam pinul RS pe low (low=instructiuni, high=date)
    1f26:	41 9a       	sbi	0x08, 1	; 8
	RW_LOW();	// setam pinul RW pe low (suntem in modul de comenzi acum)
    1f28:	42 98       	cbi	0x08, 2	; 8
	LCD_write(_data);	// apelam procedura ce trimite byte-ul pe firele de date
    1f2a:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <LCD_write>
}
    1f2e:	08 95       	ret

00001f30 <LCD_writeInstruction>:
    1f30:	e0 e4       	ldi	r30, 0x40	; 64
    1f32:	fc e9       	ldi	r31, 0x9C	; 156
    1f34:	31 97       	sbiw	r30, 0x01	; 1
    1f36:	f1 f7       	brne	.-4      	; 0x1f34 <LCD_writeInstruction+0x4>

/* Trimite o instructiune catre lcd (vezi datasheet) */
void LCD_writeInstruction(unsigned char _instruction)
{				
	LCD_waitNotBusy();	// asteptam ca LCD-ul sa fie liber sa primeasca comenzile	
	RS_LOW();	// setam pinul RS pe low (low=instructiuni, high=date)
    1f38:	41 98       	cbi	0x08, 1	; 8
	RW_LOW();	// setam pinul RW pe low (suntem in modul de comenzi acum)
    1f3a:	42 98       	cbi	0x08, 2	; 8
	LCD_write(_instruction);	// apelam procedura ce trimite byte-ul pe firele de date
    1f3c:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <LCD_write>

}
    1f40:	08 95       	ret

00001f42 <LCD_init>:
 * IMPLEMENTARE API LCD.     *
 *****************************/

void LCD_init()
{
	LcdDATA_DDR |=  (1<<LcdD4)|(1<<LcdD5)|(1<<LcdD6)|(1<<LcdD7);	// Setam pinii de date ca pini de iesire
    1f42:	87 b1       	in	r24, 0x07	; 7
    1f44:	80 6f       	ori	r24, 0xF0	; 240
    1f46:	87 b9       	out	0x07, r24	; 7
	LcdCMD_DDR  |=  (1<<LcdRS)|(1<<LcdRW)|(1<<LcdE);				// Setam pinii de comenzi ca pini de iesire
    1f48:	87 b1       	in	r24, 0x07	; 7
    1f4a:	8e 60       	ori	r24, 0x0E	; 14
    1f4c:	87 b9       	out	0x07, r24	; 7
    1f4e:	80 e4       	ldi	r24, 0x40	; 64
    1f50:	9c e9       	ldi	r25, 0x9C	; 156
    1f52:	01 97       	sbiw	r24, 0x01	; 1
    1f54:	f1 f7       	brne	.-4      	; 0x1f52 <LCD_init+0x10>

	LCD_waitNotBusy();
	
	LcdCMD_PORT   &= ~(1<<LcdRS);								// Setam linia RS pe low
    1f56:	41 98       	cbi	0x08, 1	; 8
	LcdCMD_PORT   &= ~(1<<LcdRW);								// Setam linia RW pe low (acum suntem in modul de trimis instructiuni)
    1f58:	42 98       	cbi	0x08, 2	; 8
	LcdDATA_PORT  &= ~(1<<LcdD4)&~(1<<LcdD6)&~(1<<LcdD7); 		// Specificam ca vrem 4 fire de date, prima comanda (LcdD5 activ, restul nu)
    1f5a:	88 b1       	in	r24, 0x08	; 8
    1f5c:	8f 72       	andi	r24, 0x2F	; 47
    1f5e:	88 b9       	out	0x08, r24	; 8
	LcdDATA_PORT  |=  (1<<LcdD5);								// Setam pinii de comenzi ca pini de iesire
    1f60:	45 9a       	sbi	0x08, 5	; 8
	
	LcdCMD_PORT |=  (1<<LcdE);					// Setam linia E(nable) pe high; aceasta ii specifica LCD-ului sa preia datele
    1f62:	43 9a       	sbi	0x08, 3	; 8
	LCD_waitInstructions(12);					// Asteptam o perioada de timp T
	LcdCMD_PORT &= ~(1<<LcdE );					// Setam linia E(nable) pe low; transferul s-a terminat
    1f64:	43 98       	cbi	0x08, 3	; 8

	LCD_writeInstruction(LCD_INSTR_4wire); 		// Incarcam comanda: 4 bit data, 2 lines, 5x8 font
    1f66:	80 e2       	ldi	r24, 0x20	; 32
    1f68:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <LCD_writeInstruction>
	LCD_writeInstruction(LCD_INSTR_display); 	// Display On, Cursor On, Blinking On
    1f6c:	8c e0       	ldi	r24, 0x0C	; 12
    1f6e:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <LCD_writeInstruction>
	LCD_writeInstruction(0x06);					// Increment, no shift
    1f72:	86 e0       	ldi	r24, 0x06	; 6
    1f74:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <LCD_writeInstruction>
	LCD_writeInstruction(0x01);					// Clear Display
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <LCD_writeInstruction>
	
}
    1f7e:	08 95       	ret

00001f80 <LCD_waitNotBusy>:
    1f80:	80 e4       	ldi	r24, 0x40	; 64
    1f82:	9c e9       	ldi	r25, 0x9C	; 156
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	f1 f7       	brne	.-4      	; 0x1f84 <LCD_waitNotBusy+0x4>
		LcdCMD_PORT &= ~(1<<LcdE);						// Setam Pinul E pe low

		LcdDATA_DDR |= (1<<LcdD4 | 1<<LcdD5 | 1<<LcdD6 | 1<<LcdD7); // Setam Portul de LCD ca port de iesire la loc
	}
	*/
}
    1f88:	08 95       	ret

00001f8a <LCD_waitInstructions>:

void LCD_waitInstructions(unsigned char _instructions)
{
	while (_instructions--)
		;
}
    1f8a:	08 95       	ret

00001f8c <LCD_printDecimal2u>:


void LCD_printDecimal2u(unsigned int _n)
{
    1f8c:	0f 93       	push	r16
    1f8e:	1f 93       	push	r17
    1f90:	64 e6       	ldi	r22, 0x64	; 100
    1f92:	70 e0       	ldi	r23, 0x00	; 0
    1f94:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__udivmodhi4>
    1f98:	18 2f       	mov	r17, r24
    1f9a:	09 2f       	mov	r16, r25
	while(_n>=10){
		tmp++;
		_n-=10;
	}

	LCD_writeData(tmp+'0');
    1f9c:	6a e0       	ldi	r22, 0x0A	; 10
    1f9e:	70 e0       	ldi	r23, 0x00	; 0
    1fa0:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__udivmodhi4>
    1fa4:	86 2f       	mov	r24, r22
    1fa6:	80 5d       	subi	r24, 0xD0	; 208
    1fa8:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <LCD_writeData>
	LCD_writeData(_n+'0');
    1fac:	81 2f       	mov	r24, r17
    1fae:	90 2f       	mov	r25, r16
    1fb0:	6a e0       	ldi	r22, 0x0A	; 10
    1fb2:	70 e0       	ldi	r23, 0x00	; 0
    1fb4:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__udivmodhi4>
    1fb8:	80 5d       	subi	r24, 0xD0	; 208
    1fba:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <LCD_writeData>
}
    1fbe:	1f 91       	pop	r17
    1fc0:	0f 91       	pop	r16
    1fc2:	08 95       	ret

00001fc4 <LCD_printHexa>:

void LCD_printHexa(unsigned int _n)
{
    1fc4:	cf 93       	push	r28
    1fc6:	df 93       	push	r29
    1fc8:	ec 01       	movw	r28, r24
	unsigned char _tmp = _n>>4;
    1fca:	24 e0       	ldi	r18, 0x04	; 4
    1fcc:	96 95       	lsr	r25
    1fce:	87 95       	ror	r24
    1fd0:	2a 95       	dec	r18
    1fd2:	e1 f7       	brne	.-8      	; 0x1fcc <LCD_printHexa+0x8>
	if (_tmp>9)
    1fd4:	8a 30       	cpi	r24, 0x0A	; 10
    1fd6:	10 f0       	brcs	.+4      	; 0x1fdc <LCD_printHexa+0x18>
		_tmp += 'A'-10;
    1fd8:	89 5c       	subi	r24, 0xC9	; 201
    1fda:	01 c0       	rjmp	.+2      	; 0x1fde <LCD_printHexa+0x1a>
	else
		_tmp += '0';
    1fdc:	80 5d       	subi	r24, 0xD0	; 208
	LCD_writeData( _tmp );
    1fde:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <LCD_writeData>
	_tmp = _n & 0x0F;
    1fe2:	9e 01       	movw	r18, r28
    1fe4:	2f 70       	andi	r18, 0x0F	; 15
    1fe6:	82 2f       	mov	r24, r18
	if (_tmp>9)
    1fe8:	2a 30       	cpi	r18, 0x0A	; 10
    1fea:	10 f0       	brcs	.+4      	; 0x1ff0 <LCD_printHexa+0x2c>
		_tmp += 'A'-10;
    1fec:	89 5c       	subi	r24, 0xC9	; 201
    1fee:	01 c0       	rjmp	.+2      	; 0x1ff2 <LCD_printHexa+0x2e>
	else
		_tmp += '0';
    1ff0:	80 5d       	subi	r24, 0xD0	; 208
	LCD_writeData( _tmp );
    1ff2:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <LCD_writeData>
}
    1ff6:	df 91       	pop	r29
    1ff8:	cf 91       	pop	r28
    1ffa:	08 95       	ret

00001ffc <LCD_print>:


void LCD_print(char* _msg)
{
    1ffc:	0f 93       	push	r16
    1ffe:	1f 93       	push	r17
    2000:	cf 93       	push	r28
    2002:	df 93       	push	r29
    2004:	8c 01       	movw	r16, r24
    2006:	c0 e0       	ldi	r28, 0x00	; 0
    2008:	d0 e0       	ldi	r29, 0x00	; 0
    200a:	02 c0       	rjmp	.+4      	; 0x2010 <LCD_print+0x14>
	unsigned char i=0;
	for( ; _msg[i]!=0 && i<16; i++)
		LCD_writeData( _msg[i] );
    200c:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <LCD_writeData>


void LCD_print(char* _msg)
{
	unsigned char i=0;
	for( ; _msg[i]!=0 && i<16; i++)
    2010:	f8 01       	movw	r30, r16
    2012:	ec 0f       	add	r30, r28
    2014:	fd 1f       	adc	r31, r29
    2016:	80 81       	ld	r24, Z
    2018:	88 23       	and	r24, r24
    201a:	21 f0       	breq	.+8      	; 0x2024 <LCD_print+0x28>
    201c:	21 96       	adiw	r28, 0x01	; 1
    201e:	c1 31       	cpi	r28, 0x11	; 17
    2020:	d1 05       	cpc	r29, r1
    2022:	a1 f7       	brne	.-24     	; 0x200c <LCD_print+0x10>
		LCD_writeData( _msg[i] );
}
    2024:	df 91       	pop	r29
    2026:	cf 91       	pop	r28
    2028:	1f 91       	pop	r17
    202a:	0f 91       	pop	r16
    202c:	08 95       	ret

0000202e <LCD_print2>:

void LCD_print2(char* _msg1, char* _msg2)
{
    202e:	ef 92       	push	r14
    2030:	ff 92       	push	r15
    2032:	0f 93       	push	r16
    2034:	1f 93       	push	r17
    2036:	8c 01       	movw	r16, r24
    2038:	7b 01       	movw	r14, r22
	LCD_writeInstruction(LCD_INSTR_clearDisplay);
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <LCD_writeInstruction>
	LCD_print(_msg1);
    2040:	c8 01       	movw	r24, r16
    2042:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <LCD_print>
	LCD_writeInstruction(LCD_INSTR_nextLine);
    2046:	80 ec       	ldi	r24, 0xC0	; 192
    2048:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <LCD_writeInstruction>
	LCD_print(_msg2);
    204c:	c7 01       	movw	r24, r14
    204e:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <LCD_print>
}
    2052:	1f 91       	pop	r17
    2054:	0f 91       	pop	r16
    2056:	ff 90       	pop	r15
    2058:	ef 90       	pop	r14
    205a:	08 95       	ret

0000205c <__mulsi3>:
    205c:	62 9f       	mul	r22, r18
    205e:	d0 01       	movw	r26, r0
    2060:	73 9f       	mul	r23, r19
    2062:	f0 01       	movw	r30, r0
    2064:	82 9f       	mul	r24, r18
    2066:	e0 0d       	add	r30, r0
    2068:	f1 1d       	adc	r31, r1
    206a:	64 9f       	mul	r22, r20
    206c:	e0 0d       	add	r30, r0
    206e:	f1 1d       	adc	r31, r1
    2070:	92 9f       	mul	r25, r18
    2072:	f0 0d       	add	r31, r0
    2074:	83 9f       	mul	r24, r19
    2076:	f0 0d       	add	r31, r0
    2078:	74 9f       	mul	r23, r20
    207a:	f0 0d       	add	r31, r0
    207c:	65 9f       	mul	r22, r21
    207e:	f0 0d       	add	r31, r0
    2080:	99 27       	eor	r25, r25
    2082:	72 9f       	mul	r23, r18
    2084:	b0 0d       	add	r27, r0
    2086:	e1 1d       	adc	r30, r1
    2088:	f9 1f       	adc	r31, r25
    208a:	63 9f       	mul	r22, r19
    208c:	b0 0d       	add	r27, r0
    208e:	e1 1d       	adc	r30, r1
    2090:	f9 1f       	adc	r31, r25
    2092:	bd 01       	movw	r22, r26
    2094:	cf 01       	movw	r24, r30
    2096:	11 24       	eor	r1, r1
    2098:	08 95       	ret

0000209a <__udivmodqi4>:
    209a:	99 1b       	sub	r25, r25
    209c:	79 e0       	ldi	r23, 0x09	; 9
    209e:	04 c0       	rjmp	.+8      	; 0x20a8 <__udivmodqi4_ep>

000020a0 <__udivmodqi4_loop>:
    20a0:	99 1f       	adc	r25, r25
    20a2:	96 17       	cp	r25, r22
    20a4:	08 f0       	brcs	.+2      	; 0x20a8 <__udivmodqi4_ep>
    20a6:	96 1b       	sub	r25, r22

000020a8 <__udivmodqi4_ep>:
    20a8:	88 1f       	adc	r24, r24
    20aa:	7a 95       	dec	r23
    20ac:	c9 f7       	brne	.-14     	; 0x20a0 <__udivmodqi4_loop>
    20ae:	80 95       	com	r24
    20b0:	08 95       	ret

000020b2 <__udivmodhi4>:
    20b2:	aa 1b       	sub	r26, r26
    20b4:	bb 1b       	sub	r27, r27
    20b6:	51 e1       	ldi	r21, 0x11	; 17
    20b8:	07 c0       	rjmp	.+14     	; 0x20c8 <__udivmodhi4_ep>

000020ba <__udivmodhi4_loop>:
    20ba:	aa 1f       	adc	r26, r26
    20bc:	bb 1f       	adc	r27, r27
    20be:	a6 17       	cp	r26, r22
    20c0:	b7 07       	cpc	r27, r23
    20c2:	10 f0       	brcs	.+4      	; 0x20c8 <__udivmodhi4_ep>
    20c4:	a6 1b       	sub	r26, r22
    20c6:	b7 0b       	sbc	r27, r23

000020c8 <__udivmodhi4_ep>:
    20c8:	88 1f       	adc	r24, r24
    20ca:	99 1f       	adc	r25, r25
    20cc:	5a 95       	dec	r21
    20ce:	a9 f7       	brne	.-22     	; 0x20ba <__udivmodhi4_loop>
    20d0:	80 95       	com	r24
    20d2:	90 95       	com	r25
    20d4:	bc 01       	movw	r22, r24
    20d6:	cd 01       	movw	r24, r26
    20d8:	08 95       	ret

000020da <__udivmodsi4>:
    20da:	a1 e2       	ldi	r26, 0x21	; 33
    20dc:	1a 2e       	mov	r1, r26
    20de:	aa 1b       	sub	r26, r26
    20e0:	bb 1b       	sub	r27, r27
    20e2:	fd 01       	movw	r30, r26
    20e4:	0d c0       	rjmp	.+26     	; 0x2100 <__udivmodsi4_ep>

000020e6 <__udivmodsi4_loop>:
    20e6:	aa 1f       	adc	r26, r26
    20e8:	bb 1f       	adc	r27, r27
    20ea:	ee 1f       	adc	r30, r30
    20ec:	ff 1f       	adc	r31, r31
    20ee:	a2 17       	cp	r26, r18
    20f0:	b3 07       	cpc	r27, r19
    20f2:	e4 07       	cpc	r30, r20
    20f4:	f5 07       	cpc	r31, r21
    20f6:	20 f0       	brcs	.+8      	; 0x2100 <__udivmodsi4_ep>
    20f8:	a2 1b       	sub	r26, r18
    20fa:	b3 0b       	sbc	r27, r19
    20fc:	e4 0b       	sbc	r30, r20
    20fe:	f5 0b       	sbc	r31, r21

00002100 <__udivmodsi4_ep>:
    2100:	66 1f       	adc	r22, r22
    2102:	77 1f       	adc	r23, r23
    2104:	88 1f       	adc	r24, r24
    2106:	99 1f       	adc	r25, r25
    2108:	1a 94       	dec	r1
    210a:	69 f7       	brne	.-38     	; 0x20e6 <__udivmodsi4_loop>
    210c:	60 95       	com	r22
    210e:	70 95       	com	r23
    2110:	80 95       	com	r24
    2112:	90 95       	com	r25
    2114:	9b 01       	movw	r18, r22
    2116:	ac 01       	movw	r20, r24
    2118:	bd 01       	movw	r22, r26
    211a:	cf 01       	movw	r24, r30
    211c:	08 95       	ret

0000211e <__divmodsi4>:
    211e:	97 fb       	bst	r25, 7
    2120:	09 2e       	mov	r0, r25
    2122:	05 26       	eor	r0, r21
    2124:	0e d0       	rcall	.+28     	; 0x2142 <__divmodsi4_neg1>
    2126:	57 fd       	sbrc	r21, 7
    2128:	04 d0       	rcall	.+8      	; 0x2132 <__divmodsi4_neg2>
    212a:	d7 df       	rcall	.-82     	; 0x20da <__udivmodsi4>
    212c:	0a d0       	rcall	.+20     	; 0x2142 <__divmodsi4_neg1>
    212e:	00 1c       	adc	r0, r0
    2130:	38 f4       	brcc	.+14     	; 0x2140 <__divmodsi4_exit>

00002132 <__divmodsi4_neg2>:
    2132:	50 95       	com	r21
    2134:	40 95       	com	r20
    2136:	30 95       	com	r19
    2138:	21 95       	neg	r18
    213a:	3f 4f       	sbci	r19, 0xFF	; 255
    213c:	4f 4f       	sbci	r20, 0xFF	; 255
    213e:	5f 4f       	sbci	r21, 0xFF	; 255

00002140 <__divmodsi4_exit>:
    2140:	08 95       	ret

00002142 <__divmodsi4_neg1>:
    2142:	f6 f7       	brtc	.-4      	; 0x2140 <__divmodsi4_exit>
    2144:	90 95       	com	r25
    2146:	80 95       	com	r24
    2148:	70 95       	com	r23
    214a:	61 95       	neg	r22
    214c:	7f 4f       	sbci	r23, 0xFF	; 255
    214e:	8f 4f       	sbci	r24, 0xFF	; 255
    2150:	9f 4f       	sbci	r25, 0xFF	; 255
    2152:	08 95       	ret

00002154 <__prologue_saves__>:
    2154:	2f 92       	push	r2
    2156:	3f 92       	push	r3
    2158:	4f 92       	push	r4
    215a:	5f 92       	push	r5
    215c:	6f 92       	push	r6
    215e:	7f 92       	push	r7
    2160:	8f 92       	push	r8
    2162:	9f 92       	push	r9
    2164:	af 92       	push	r10
    2166:	bf 92       	push	r11
    2168:	cf 92       	push	r12
    216a:	df 92       	push	r13
    216c:	ef 92       	push	r14
    216e:	ff 92       	push	r15
    2170:	0f 93       	push	r16
    2172:	1f 93       	push	r17
    2174:	cf 93       	push	r28
    2176:	df 93       	push	r29
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
    217c:	ca 1b       	sub	r28, r26
    217e:	db 0b       	sbc	r29, r27
    2180:	0f b6       	in	r0, 0x3f	; 63
    2182:	f8 94       	cli
    2184:	de bf       	out	0x3e, r29	; 62
    2186:	0f be       	out	0x3f, r0	; 63
    2188:	cd bf       	out	0x3d, r28	; 61
    218a:	09 94       	ijmp

0000218c <__epilogue_restores__>:
    218c:	2a 88       	ldd	r2, Y+18	; 0x12
    218e:	39 88       	ldd	r3, Y+17	; 0x11
    2190:	48 88       	ldd	r4, Y+16	; 0x10
    2192:	5f 84       	ldd	r5, Y+15	; 0x0f
    2194:	6e 84       	ldd	r6, Y+14	; 0x0e
    2196:	7d 84       	ldd	r7, Y+13	; 0x0d
    2198:	8c 84       	ldd	r8, Y+12	; 0x0c
    219a:	9b 84       	ldd	r9, Y+11	; 0x0b
    219c:	aa 84       	ldd	r10, Y+10	; 0x0a
    219e:	b9 84       	ldd	r11, Y+9	; 0x09
    21a0:	c8 84       	ldd	r12, Y+8	; 0x08
    21a2:	df 80       	ldd	r13, Y+7	; 0x07
    21a4:	ee 80       	ldd	r14, Y+6	; 0x06
    21a6:	fd 80       	ldd	r15, Y+5	; 0x05
    21a8:	0c 81       	ldd	r16, Y+4	; 0x04
    21aa:	1b 81       	ldd	r17, Y+3	; 0x03
    21ac:	aa 81       	ldd	r26, Y+2	; 0x02
    21ae:	b9 81       	ldd	r27, Y+1	; 0x01
    21b0:	ce 0f       	add	r28, r30
    21b2:	d1 1d       	adc	r29, r1
    21b4:	0f b6       	in	r0, 0x3f	; 63
    21b6:	f8 94       	cli
    21b8:	de bf       	out	0x3e, r29	; 62
    21ba:	0f be       	out	0x3f, r0	; 63
    21bc:	cd bf       	out	0x3d, r28	; 61
    21be:	ed 01       	movw	r28, r26
    21c0:	08 95       	ret

000021c2 <strcat>:
    21c2:	fb 01       	movw	r30, r22
    21c4:	dc 01       	movw	r26, r24
    21c6:	0d 90       	ld	r0, X+
    21c8:	00 20       	and	r0, r0
    21ca:	e9 f7       	brne	.-6      	; 0x21c6 <strcat+0x4>
    21cc:	11 97       	sbiw	r26, 0x01	; 1
    21ce:	01 90       	ld	r0, Z+
    21d0:	0d 92       	st	X+, r0
    21d2:	00 20       	and	r0, r0
    21d4:	e1 f7       	brne	.-8      	; 0x21ce <strcat+0xc>
    21d6:	08 95       	ret

000021d8 <strstr>:
    21d8:	fb 01       	movw	r30, r22
    21da:	51 91       	ld	r21, Z+
    21dc:	55 23       	and	r21, r21
    21de:	a9 f0       	breq	.+42     	; 0x220a <strstr+0x32>
    21e0:	bf 01       	movw	r22, r30
    21e2:	dc 01       	movw	r26, r24
    21e4:	4d 91       	ld	r20, X+
    21e6:	45 17       	cp	r20, r21
    21e8:	41 11       	cpse	r20, r1
    21ea:	e1 f7       	brne	.-8      	; 0x21e4 <strstr+0xc>
    21ec:	59 f4       	brne	.+22     	; 0x2204 <strstr+0x2c>
    21ee:	cd 01       	movw	r24, r26
    21f0:	01 90       	ld	r0, Z+
    21f2:	00 20       	and	r0, r0
    21f4:	49 f0       	breq	.+18     	; 0x2208 <strstr+0x30>
    21f6:	4d 91       	ld	r20, X+
    21f8:	40 15       	cp	r20, r0
    21fa:	41 11       	cpse	r20, r1
    21fc:	c9 f3       	breq	.-14     	; 0x21f0 <strstr+0x18>
    21fe:	fb 01       	movw	r30, r22
    2200:	41 11       	cpse	r20, r1
    2202:	ef cf       	rjmp	.-34     	; 0x21e2 <strstr+0xa>
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	01 97       	sbiw	r24, 0x01	; 1
    220a:	08 95       	ret

0000220c <sprintf>:
    220c:	ae e0       	ldi	r26, 0x0E	; 14
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	ec e0       	ldi	r30, 0x0C	; 12
    2212:	f1 e1       	ldi	r31, 0x11	; 17
    2214:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__prologue_saves__+0x1c>
    2218:	0d 89       	ldd	r16, Y+21	; 0x15
    221a:	1e 89       	ldd	r17, Y+22	; 0x16
    221c:	86 e0       	ldi	r24, 0x06	; 6
    221e:	8c 83       	std	Y+4, r24	; 0x04
    2220:	1a 83       	std	Y+2, r17	; 0x02
    2222:	09 83       	std	Y+1, r16	; 0x01
    2224:	8f ef       	ldi	r24, 0xFF	; 255
    2226:	9f e7       	ldi	r25, 0x7F	; 127
    2228:	9e 83       	std	Y+6, r25	; 0x06
    222a:	8d 83       	std	Y+5, r24	; 0x05
    222c:	9e 01       	movw	r18, r28
    222e:	27 5e       	subi	r18, 0xE7	; 231
    2230:	3f 4f       	sbci	r19, 0xFF	; 255
    2232:	ce 01       	movw	r24, r28
    2234:	01 96       	adiw	r24, 0x01	; 1
    2236:	6f 89       	ldd	r22, Y+23	; 0x17
    2238:	78 8d       	ldd	r23, Y+24	; 0x18
    223a:	a9 01       	movw	r20, r18
    223c:	0e 94 2a 11 	call	0x2254	; 0x2254 <vfprintf>
    2240:	2f 81       	ldd	r18, Y+7	; 0x07
    2242:	38 85       	ldd	r19, Y+8	; 0x08
    2244:	02 0f       	add	r16, r18
    2246:	13 1f       	adc	r17, r19
    2248:	f8 01       	movw	r30, r16
    224a:	10 82       	st	Z, r1
    224c:	2e 96       	adiw	r28, 0x0e	; 14
    224e:	e4 e0       	ldi	r30, 0x04	; 4
    2250:	0c 94 d4 10 	jmp	0x21a8	; 0x21a8 <__epilogue_restores__+0x1c>

00002254 <vfprintf>:
    2254:	ab e0       	ldi	r26, 0x0B	; 11
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	e0 e3       	ldi	r30, 0x30	; 48
    225a:	f1 e1       	ldi	r31, 0x11	; 17
    225c:	0c 94 aa 10 	jmp	0x2154	; 0x2154 <__prologue_saves__>
    2260:	3c 01       	movw	r6, r24
    2262:	2b 01       	movw	r4, r22
    2264:	5a 01       	movw	r10, r20
    2266:	fc 01       	movw	r30, r24
    2268:	17 82       	std	Z+7, r1	; 0x07
    226a:	16 82       	std	Z+6, r1	; 0x06
    226c:	83 81       	ldd	r24, Z+3	; 0x03
    226e:	81 fd       	sbrc	r24, 1
    2270:	03 c0       	rjmp	.+6      	; 0x2278 <vfprintf+0x24>
    2272:	6f ef       	ldi	r22, 0xFF	; 255
    2274:	7f ef       	ldi	r23, 0xFF	; 255
    2276:	c6 c1       	rjmp	.+908    	; 0x2604 <vfprintf+0x3b0>
    2278:	9a e0       	ldi	r25, 0x0A	; 10
    227a:	89 2e       	mov	r8, r25
    227c:	1e 01       	movw	r2, r28
    227e:	08 94       	sec
    2280:	21 1c       	adc	r2, r1
    2282:	31 1c       	adc	r3, r1
    2284:	f3 01       	movw	r30, r6
    2286:	23 81       	ldd	r18, Z+3	; 0x03
    2288:	f2 01       	movw	r30, r4
    228a:	23 fd       	sbrc	r18, 3
    228c:	85 91       	lpm	r24, Z+
    228e:	23 ff       	sbrs	r18, 3
    2290:	81 91       	ld	r24, Z+
    2292:	2f 01       	movw	r4, r30
    2294:	88 23       	and	r24, r24
    2296:	09 f4       	brne	.+2      	; 0x229a <vfprintf+0x46>
    2298:	b2 c1       	rjmp	.+868    	; 0x25fe <vfprintf+0x3aa>
    229a:	85 32       	cpi	r24, 0x25	; 37
    229c:	39 f4       	brne	.+14     	; 0x22ac <vfprintf+0x58>
    229e:	23 fd       	sbrc	r18, 3
    22a0:	85 91       	lpm	r24, Z+
    22a2:	23 ff       	sbrs	r18, 3
    22a4:	81 91       	ld	r24, Z+
    22a6:	2f 01       	movw	r4, r30
    22a8:	85 32       	cpi	r24, 0x25	; 37
    22aa:	29 f4       	brne	.+10     	; 0x22b6 <vfprintf+0x62>
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	b3 01       	movw	r22, r6
    22b0:	0e 94 1d 13 	call	0x263a	; 0x263a <fputc>
    22b4:	e7 cf       	rjmp	.-50     	; 0x2284 <vfprintf+0x30>
    22b6:	98 2f       	mov	r25, r24
    22b8:	ff 24       	eor	r15, r15
    22ba:	ee 24       	eor	r14, r14
    22bc:	99 24       	eor	r9, r9
    22be:	ff e1       	ldi	r31, 0x1F	; 31
    22c0:	ff 15       	cp	r31, r15
    22c2:	d0 f0       	brcs	.+52     	; 0x22f8 <vfprintf+0xa4>
    22c4:	9b 32       	cpi	r25, 0x2B	; 43
    22c6:	69 f0       	breq	.+26     	; 0x22e2 <vfprintf+0x8e>
    22c8:	9c 32       	cpi	r25, 0x2C	; 44
    22ca:	28 f4       	brcc	.+10     	; 0x22d6 <vfprintf+0x82>
    22cc:	90 32       	cpi	r25, 0x20	; 32
    22ce:	59 f0       	breq	.+22     	; 0x22e6 <vfprintf+0x92>
    22d0:	93 32       	cpi	r25, 0x23	; 35
    22d2:	91 f4       	brne	.+36     	; 0x22f8 <vfprintf+0xa4>
    22d4:	0e c0       	rjmp	.+28     	; 0x22f2 <vfprintf+0x9e>
    22d6:	9d 32       	cpi	r25, 0x2D	; 45
    22d8:	49 f0       	breq	.+18     	; 0x22ec <vfprintf+0x98>
    22da:	90 33       	cpi	r25, 0x30	; 48
    22dc:	69 f4       	brne	.+26     	; 0x22f8 <vfprintf+0xa4>
    22de:	41 e0       	ldi	r20, 0x01	; 1
    22e0:	24 c0       	rjmp	.+72     	; 0x232a <vfprintf+0xd6>
    22e2:	52 e0       	ldi	r21, 0x02	; 2
    22e4:	f5 2a       	or	r15, r21
    22e6:	84 e0       	ldi	r24, 0x04	; 4
    22e8:	f8 2a       	or	r15, r24
    22ea:	28 c0       	rjmp	.+80     	; 0x233c <vfprintf+0xe8>
    22ec:	98 e0       	ldi	r25, 0x08	; 8
    22ee:	f9 2a       	or	r15, r25
    22f0:	25 c0       	rjmp	.+74     	; 0x233c <vfprintf+0xe8>
    22f2:	e0 e1       	ldi	r30, 0x10	; 16
    22f4:	fe 2a       	or	r15, r30
    22f6:	22 c0       	rjmp	.+68     	; 0x233c <vfprintf+0xe8>
    22f8:	f7 fc       	sbrc	r15, 7
    22fa:	29 c0       	rjmp	.+82     	; 0x234e <vfprintf+0xfa>
    22fc:	89 2f       	mov	r24, r25
    22fe:	80 53       	subi	r24, 0x30	; 48
    2300:	8a 30       	cpi	r24, 0x0A	; 10
    2302:	70 f4       	brcc	.+28     	; 0x2320 <vfprintf+0xcc>
    2304:	f6 fe       	sbrs	r15, 6
    2306:	05 c0       	rjmp	.+10     	; 0x2312 <vfprintf+0xbe>
    2308:	98 9c       	mul	r9, r8
    230a:	90 2c       	mov	r9, r0
    230c:	11 24       	eor	r1, r1
    230e:	98 0e       	add	r9, r24
    2310:	15 c0       	rjmp	.+42     	; 0x233c <vfprintf+0xe8>
    2312:	e8 9c       	mul	r14, r8
    2314:	e0 2c       	mov	r14, r0
    2316:	11 24       	eor	r1, r1
    2318:	e8 0e       	add	r14, r24
    231a:	f0 e2       	ldi	r31, 0x20	; 32
    231c:	ff 2a       	or	r15, r31
    231e:	0e c0       	rjmp	.+28     	; 0x233c <vfprintf+0xe8>
    2320:	9e 32       	cpi	r25, 0x2E	; 46
    2322:	29 f4       	brne	.+10     	; 0x232e <vfprintf+0xda>
    2324:	f6 fc       	sbrc	r15, 6
    2326:	6b c1       	rjmp	.+726    	; 0x25fe <vfprintf+0x3aa>
    2328:	40 e4       	ldi	r20, 0x40	; 64
    232a:	f4 2a       	or	r15, r20
    232c:	07 c0       	rjmp	.+14     	; 0x233c <vfprintf+0xe8>
    232e:	9c 36       	cpi	r25, 0x6C	; 108
    2330:	19 f4       	brne	.+6      	; 0x2338 <vfprintf+0xe4>
    2332:	50 e8       	ldi	r21, 0x80	; 128
    2334:	f5 2a       	or	r15, r21
    2336:	02 c0       	rjmp	.+4      	; 0x233c <vfprintf+0xe8>
    2338:	98 36       	cpi	r25, 0x68	; 104
    233a:	49 f4       	brne	.+18     	; 0x234e <vfprintf+0xfa>
    233c:	f2 01       	movw	r30, r4
    233e:	23 fd       	sbrc	r18, 3
    2340:	95 91       	lpm	r25, Z+
    2342:	23 ff       	sbrs	r18, 3
    2344:	91 91       	ld	r25, Z+
    2346:	2f 01       	movw	r4, r30
    2348:	99 23       	and	r25, r25
    234a:	09 f0       	breq	.+2      	; 0x234e <vfprintf+0xfa>
    234c:	b8 cf       	rjmp	.-144    	; 0x22be <vfprintf+0x6a>
    234e:	89 2f       	mov	r24, r25
    2350:	85 54       	subi	r24, 0x45	; 69
    2352:	83 30       	cpi	r24, 0x03	; 3
    2354:	18 f0       	brcs	.+6      	; 0x235c <vfprintf+0x108>
    2356:	80 52       	subi	r24, 0x20	; 32
    2358:	83 30       	cpi	r24, 0x03	; 3
    235a:	38 f4       	brcc	.+14     	; 0x236a <vfprintf+0x116>
    235c:	44 e0       	ldi	r20, 0x04	; 4
    235e:	50 e0       	ldi	r21, 0x00	; 0
    2360:	a4 0e       	add	r10, r20
    2362:	b5 1e       	adc	r11, r21
    2364:	5f e3       	ldi	r21, 0x3F	; 63
    2366:	59 83       	std	Y+1, r21	; 0x01
    2368:	0f c0       	rjmp	.+30     	; 0x2388 <vfprintf+0x134>
    236a:	93 36       	cpi	r25, 0x63	; 99
    236c:	31 f0       	breq	.+12     	; 0x237a <vfprintf+0x126>
    236e:	93 37       	cpi	r25, 0x73	; 115
    2370:	79 f0       	breq	.+30     	; 0x2390 <vfprintf+0x13c>
    2372:	93 35       	cpi	r25, 0x53	; 83
    2374:	09 f0       	breq	.+2      	; 0x2378 <vfprintf+0x124>
    2376:	56 c0       	rjmp	.+172    	; 0x2424 <vfprintf+0x1d0>
    2378:	20 c0       	rjmp	.+64     	; 0x23ba <vfprintf+0x166>
    237a:	f5 01       	movw	r30, r10
    237c:	80 81       	ld	r24, Z
    237e:	89 83       	std	Y+1, r24	; 0x01
    2380:	42 e0       	ldi	r20, 0x02	; 2
    2382:	50 e0       	ldi	r21, 0x00	; 0
    2384:	a4 0e       	add	r10, r20
    2386:	b5 1e       	adc	r11, r21
    2388:	61 01       	movw	r12, r2
    238a:	01 e0       	ldi	r16, 0x01	; 1
    238c:	10 e0       	ldi	r17, 0x00	; 0
    238e:	12 c0       	rjmp	.+36     	; 0x23b4 <vfprintf+0x160>
    2390:	f5 01       	movw	r30, r10
    2392:	c0 80       	ld	r12, Z
    2394:	d1 80       	ldd	r13, Z+1	; 0x01
    2396:	f6 fc       	sbrc	r15, 6
    2398:	03 c0       	rjmp	.+6      	; 0x23a0 <vfprintf+0x14c>
    239a:	6f ef       	ldi	r22, 0xFF	; 255
    239c:	7f ef       	ldi	r23, 0xFF	; 255
    239e:	02 c0       	rjmp	.+4      	; 0x23a4 <vfprintf+0x150>
    23a0:	69 2d       	mov	r22, r9
    23a2:	70 e0       	ldi	r23, 0x00	; 0
    23a4:	42 e0       	ldi	r20, 0x02	; 2
    23a6:	50 e0       	ldi	r21, 0x00	; 0
    23a8:	a4 0e       	add	r10, r20
    23aa:	b5 1e       	adc	r11, r21
    23ac:	c6 01       	movw	r24, r12
    23ae:	0e 94 12 13 	call	0x2624	; 0x2624 <strnlen>
    23b2:	8c 01       	movw	r16, r24
    23b4:	5f e7       	ldi	r21, 0x7F	; 127
    23b6:	f5 22       	and	r15, r21
    23b8:	14 c0       	rjmp	.+40     	; 0x23e2 <vfprintf+0x18e>
    23ba:	f5 01       	movw	r30, r10
    23bc:	c0 80       	ld	r12, Z
    23be:	d1 80       	ldd	r13, Z+1	; 0x01
    23c0:	f6 fc       	sbrc	r15, 6
    23c2:	03 c0       	rjmp	.+6      	; 0x23ca <vfprintf+0x176>
    23c4:	6f ef       	ldi	r22, 0xFF	; 255
    23c6:	7f ef       	ldi	r23, 0xFF	; 255
    23c8:	02 c0       	rjmp	.+4      	; 0x23ce <vfprintf+0x17a>
    23ca:	69 2d       	mov	r22, r9
    23cc:	70 e0       	ldi	r23, 0x00	; 0
    23ce:	42 e0       	ldi	r20, 0x02	; 2
    23d0:	50 e0       	ldi	r21, 0x00	; 0
    23d2:	a4 0e       	add	r10, r20
    23d4:	b5 1e       	adc	r11, r21
    23d6:	c6 01       	movw	r24, r12
    23d8:	0e 94 07 13 	call	0x260e	; 0x260e <strnlen_P>
    23dc:	8c 01       	movw	r16, r24
    23de:	50 e8       	ldi	r21, 0x80	; 128
    23e0:	f5 2a       	or	r15, r21
    23e2:	f3 fe       	sbrs	r15, 3
    23e4:	07 c0       	rjmp	.+14     	; 0x23f4 <vfprintf+0x1a0>
    23e6:	1a c0       	rjmp	.+52     	; 0x241c <vfprintf+0x1c8>
    23e8:	80 e2       	ldi	r24, 0x20	; 32
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	b3 01       	movw	r22, r6
    23ee:	0e 94 1d 13 	call	0x263a	; 0x263a <fputc>
    23f2:	ea 94       	dec	r14
    23f4:	8e 2d       	mov	r24, r14
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	08 17       	cp	r16, r24
    23fa:	19 07       	cpc	r17, r25
    23fc:	a8 f3       	brcs	.-22     	; 0x23e8 <vfprintf+0x194>
    23fe:	0e c0       	rjmp	.+28     	; 0x241c <vfprintf+0x1c8>
    2400:	f6 01       	movw	r30, r12
    2402:	f7 fc       	sbrc	r15, 7
    2404:	85 91       	lpm	r24, Z+
    2406:	f7 fe       	sbrs	r15, 7
    2408:	81 91       	ld	r24, Z+
    240a:	6f 01       	movw	r12, r30
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	b3 01       	movw	r22, r6
    2410:	0e 94 1d 13 	call	0x263a	; 0x263a <fputc>
    2414:	e1 10       	cpse	r14, r1
    2416:	ea 94       	dec	r14
    2418:	01 50       	subi	r16, 0x01	; 1
    241a:	10 40       	sbci	r17, 0x00	; 0
    241c:	01 15       	cp	r16, r1
    241e:	11 05       	cpc	r17, r1
    2420:	79 f7       	brne	.-34     	; 0x2400 <vfprintf+0x1ac>
    2422:	ea c0       	rjmp	.+468    	; 0x25f8 <vfprintf+0x3a4>
    2424:	94 36       	cpi	r25, 0x64	; 100
    2426:	11 f0       	breq	.+4      	; 0x242c <vfprintf+0x1d8>
    2428:	99 36       	cpi	r25, 0x69	; 105
    242a:	69 f5       	brne	.+90     	; 0x2486 <vfprintf+0x232>
    242c:	f7 fe       	sbrs	r15, 7
    242e:	08 c0       	rjmp	.+16     	; 0x2440 <vfprintf+0x1ec>
    2430:	f5 01       	movw	r30, r10
    2432:	20 81       	ld	r18, Z
    2434:	31 81       	ldd	r19, Z+1	; 0x01
    2436:	42 81       	ldd	r20, Z+2	; 0x02
    2438:	53 81       	ldd	r21, Z+3	; 0x03
    243a:	84 e0       	ldi	r24, 0x04	; 4
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	0a c0       	rjmp	.+20     	; 0x2454 <vfprintf+0x200>
    2440:	f5 01       	movw	r30, r10
    2442:	80 81       	ld	r24, Z
    2444:	91 81       	ldd	r25, Z+1	; 0x01
    2446:	9c 01       	movw	r18, r24
    2448:	44 27       	eor	r20, r20
    244a:	37 fd       	sbrc	r19, 7
    244c:	40 95       	com	r20
    244e:	54 2f       	mov	r21, r20
    2450:	82 e0       	ldi	r24, 0x02	; 2
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	a8 0e       	add	r10, r24
    2456:	b9 1e       	adc	r11, r25
    2458:	9f e6       	ldi	r25, 0x6F	; 111
    245a:	f9 22       	and	r15, r25
    245c:	57 ff       	sbrs	r21, 7
    245e:	09 c0       	rjmp	.+18     	; 0x2472 <vfprintf+0x21e>
    2460:	50 95       	com	r21
    2462:	40 95       	com	r20
    2464:	30 95       	com	r19
    2466:	21 95       	neg	r18
    2468:	3f 4f       	sbci	r19, 0xFF	; 255
    246a:	4f 4f       	sbci	r20, 0xFF	; 255
    246c:	5f 4f       	sbci	r21, 0xFF	; 255
    246e:	e0 e8       	ldi	r30, 0x80	; 128
    2470:	fe 2a       	or	r15, r30
    2472:	ca 01       	movw	r24, r20
    2474:	b9 01       	movw	r22, r18
    2476:	a1 01       	movw	r20, r2
    2478:	2a e0       	ldi	r18, 0x0A	; 10
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	0e 94 49 13 	call	0x2692	; 0x2692 <__ultoa_invert>
    2480:	d8 2e       	mov	r13, r24
    2482:	d2 18       	sub	r13, r2
    2484:	40 c0       	rjmp	.+128    	; 0x2506 <vfprintf+0x2b2>
    2486:	95 37       	cpi	r25, 0x75	; 117
    2488:	29 f4       	brne	.+10     	; 0x2494 <vfprintf+0x240>
    248a:	1f 2d       	mov	r17, r15
    248c:	1f 7e       	andi	r17, 0xEF	; 239
    248e:	2a e0       	ldi	r18, 0x0A	; 10
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	1d c0       	rjmp	.+58     	; 0x24ce <vfprintf+0x27a>
    2494:	1f 2d       	mov	r17, r15
    2496:	19 7f       	andi	r17, 0xF9	; 249
    2498:	9f 36       	cpi	r25, 0x6F	; 111
    249a:	61 f0       	breq	.+24     	; 0x24b4 <vfprintf+0x260>
    249c:	90 37       	cpi	r25, 0x70	; 112
    249e:	20 f4       	brcc	.+8      	; 0x24a8 <vfprintf+0x254>
    24a0:	98 35       	cpi	r25, 0x58	; 88
    24a2:	09 f0       	breq	.+2      	; 0x24a6 <vfprintf+0x252>
    24a4:	ac c0       	rjmp	.+344    	; 0x25fe <vfprintf+0x3aa>
    24a6:	0f c0       	rjmp	.+30     	; 0x24c6 <vfprintf+0x272>
    24a8:	90 37       	cpi	r25, 0x70	; 112
    24aa:	39 f0       	breq	.+14     	; 0x24ba <vfprintf+0x266>
    24ac:	98 37       	cpi	r25, 0x78	; 120
    24ae:	09 f0       	breq	.+2      	; 0x24b2 <vfprintf+0x25e>
    24b0:	a6 c0       	rjmp	.+332    	; 0x25fe <vfprintf+0x3aa>
    24b2:	04 c0       	rjmp	.+8      	; 0x24bc <vfprintf+0x268>
    24b4:	28 e0       	ldi	r18, 0x08	; 8
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	0a c0       	rjmp	.+20     	; 0x24ce <vfprintf+0x27a>
    24ba:	10 61       	ori	r17, 0x10	; 16
    24bc:	14 fd       	sbrc	r17, 4
    24be:	14 60       	ori	r17, 0x04	; 4
    24c0:	20 e1       	ldi	r18, 0x10	; 16
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	04 c0       	rjmp	.+8      	; 0x24ce <vfprintf+0x27a>
    24c6:	14 fd       	sbrc	r17, 4
    24c8:	16 60       	ori	r17, 0x06	; 6
    24ca:	20 e1       	ldi	r18, 0x10	; 16
    24cc:	32 e0       	ldi	r19, 0x02	; 2
    24ce:	17 ff       	sbrs	r17, 7
    24d0:	08 c0       	rjmp	.+16     	; 0x24e2 <vfprintf+0x28e>
    24d2:	f5 01       	movw	r30, r10
    24d4:	60 81       	ld	r22, Z
    24d6:	71 81       	ldd	r23, Z+1	; 0x01
    24d8:	82 81       	ldd	r24, Z+2	; 0x02
    24da:	93 81       	ldd	r25, Z+3	; 0x03
    24dc:	44 e0       	ldi	r20, 0x04	; 4
    24de:	50 e0       	ldi	r21, 0x00	; 0
    24e0:	08 c0       	rjmp	.+16     	; 0x24f2 <vfprintf+0x29e>
    24e2:	f5 01       	movw	r30, r10
    24e4:	80 81       	ld	r24, Z
    24e6:	91 81       	ldd	r25, Z+1	; 0x01
    24e8:	bc 01       	movw	r22, r24
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	42 e0       	ldi	r20, 0x02	; 2
    24f0:	50 e0       	ldi	r21, 0x00	; 0
    24f2:	a4 0e       	add	r10, r20
    24f4:	b5 1e       	adc	r11, r21
    24f6:	a1 01       	movw	r20, r2
    24f8:	0e 94 49 13 	call	0x2692	; 0x2692 <__ultoa_invert>
    24fc:	d8 2e       	mov	r13, r24
    24fe:	d2 18       	sub	r13, r2
    2500:	8f e7       	ldi	r24, 0x7F	; 127
    2502:	f8 2e       	mov	r15, r24
    2504:	f1 22       	and	r15, r17
    2506:	f6 fe       	sbrs	r15, 6
    2508:	0b c0       	rjmp	.+22     	; 0x2520 <vfprintf+0x2cc>
    250a:	5e ef       	ldi	r21, 0xFE	; 254
    250c:	f5 22       	and	r15, r21
    250e:	d9 14       	cp	r13, r9
    2510:	38 f4       	brcc	.+14     	; 0x2520 <vfprintf+0x2cc>
    2512:	f4 fe       	sbrs	r15, 4
    2514:	07 c0       	rjmp	.+14     	; 0x2524 <vfprintf+0x2d0>
    2516:	f2 fc       	sbrc	r15, 2
    2518:	05 c0       	rjmp	.+10     	; 0x2524 <vfprintf+0x2d0>
    251a:	8f ee       	ldi	r24, 0xEF	; 239
    251c:	f8 22       	and	r15, r24
    251e:	02 c0       	rjmp	.+4      	; 0x2524 <vfprintf+0x2d0>
    2520:	1d 2d       	mov	r17, r13
    2522:	01 c0       	rjmp	.+2      	; 0x2526 <vfprintf+0x2d2>
    2524:	19 2d       	mov	r17, r9
    2526:	f4 fe       	sbrs	r15, 4
    2528:	0d c0       	rjmp	.+26     	; 0x2544 <vfprintf+0x2f0>
    252a:	fe 01       	movw	r30, r28
    252c:	ed 0d       	add	r30, r13
    252e:	f1 1d       	adc	r31, r1
    2530:	80 81       	ld	r24, Z
    2532:	80 33       	cpi	r24, 0x30	; 48
    2534:	19 f4       	brne	.+6      	; 0x253c <vfprintf+0x2e8>
    2536:	99 ee       	ldi	r25, 0xE9	; 233
    2538:	f9 22       	and	r15, r25
    253a:	08 c0       	rjmp	.+16     	; 0x254c <vfprintf+0x2f8>
    253c:	1f 5f       	subi	r17, 0xFF	; 255
    253e:	f2 fe       	sbrs	r15, 2
    2540:	05 c0       	rjmp	.+10     	; 0x254c <vfprintf+0x2f8>
    2542:	03 c0       	rjmp	.+6      	; 0x254a <vfprintf+0x2f6>
    2544:	8f 2d       	mov	r24, r15
    2546:	86 78       	andi	r24, 0x86	; 134
    2548:	09 f0       	breq	.+2      	; 0x254c <vfprintf+0x2f8>
    254a:	1f 5f       	subi	r17, 0xFF	; 255
    254c:	0f 2d       	mov	r16, r15
    254e:	f3 fc       	sbrc	r15, 3
    2550:	14 c0       	rjmp	.+40     	; 0x257a <vfprintf+0x326>
    2552:	f0 fe       	sbrs	r15, 0
    2554:	0f c0       	rjmp	.+30     	; 0x2574 <vfprintf+0x320>
    2556:	1e 15       	cp	r17, r14
    2558:	10 f0       	brcs	.+4      	; 0x255e <vfprintf+0x30a>
    255a:	9d 2c       	mov	r9, r13
    255c:	0b c0       	rjmp	.+22     	; 0x2574 <vfprintf+0x320>
    255e:	9d 2c       	mov	r9, r13
    2560:	9e 0c       	add	r9, r14
    2562:	91 1a       	sub	r9, r17
    2564:	1e 2d       	mov	r17, r14
    2566:	06 c0       	rjmp	.+12     	; 0x2574 <vfprintf+0x320>
    2568:	80 e2       	ldi	r24, 0x20	; 32
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	b3 01       	movw	r22, r6
    256e:	0e 94 1d 13 	call	0x263a	; 0x263a <fputc>
    2572:	1f 5f       	subi	r17, 0xFF	; 255
    2574:	1e 15       	cp	r17, r14
    2576:	c0 f3       	brcs	.-16     	; 0x2568 <vfprintf+0x314>
    2578:	04 c0       	rjmp	.+8      	; 0x2582 <vfprintf+0x32e>
    257a:	1e 15       	cp	r17, r14
    257c:	10 f4       	brcc	.+4      	; 0x2582 <vfprintf+0x32e>
    257e:	e1 1a       	sub	r14, r17
    2580:	01 c0       	rjmp	.+2      	; 0x2584 <vfprintf+0x330>
    2582:	ee 24       	eor	r14, r14
    2584:	04 ff       	sbrs	r16, 4
    2586:	0f c0       	rjmp	.+30     	; 0x25a6 <vfprintf+0x352>
    2588:	80 e3       	ldi	r24, 0x30	; 48
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	b3 01       	movw	r22, r6
    258e:	0e 94 1d 13 	call	0x263a	; 0x263a <fputc>
    2592:	02 ff       	sbrs	r16, 2
    2594:	1d c0       	rjmp	.+58     	; 0x25d0 <vfprintf+0x37c>
    2596:	01 fd       	sbrc	r16, 1
    2598:	03 c0       	rjmp	.+6      	; 0x25a0 <vfprintf+0x34c>
    259a:	88 e7       	ldi	r24, 0x78	; 120
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	0e c0       	rjmp	.+28     	; 0x25bc <vfprintf+0x368>
    25a0:	88 e5       	ldi	r24, 0x58	; 88
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	0b c0       	rjmp	.+22     	; 0x25bc <vfprintf+0x368>
    25a6:	80 2f       	mov	r24, r16
    25a8:	86 78       	andi	r24, 0x86	; 134
    25aa:	91 f0       	breq	.+36     	; 0x25d0 <vfprintf+0x37c>
    25ac:	01 ff       	sbrs	r16, 1
    25ae:	02 c0       	rjmp	.+4      	; 0x25b4 <vfprintf+0x360>
    25b0:	8b e2       	ldi	r24, 0x2B	; 43
    25b2:	01 c0       	rjmp	.+2      	; 0x25b6 <vfprintf+0x362>
    25b4:	80 e2       	ldi	r24, 0x20	; 32
    25b6:	f7 fc       	sbrc	r15, 7
    25b8:	8d e2       	ldi	r24, 0x2D	; 45
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	b3 01       	movw	r22, r6
    25be:	0e 94 1d 13 	call	0x263a	; 0x263a <fputc>
    25c2:	06 c0       	rjmp	.+12     	; 0x25d0 <vfprintf+0x37c>
    25c4:	80 e3       	ldi	r24, 0x30	; 48
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	b3 01       	movw	r22, r6
    25ca:	0e 94 1d 13 	call	0x263a	; 0x263a <fputc>
    25ce:	9a 94       	dec	r9
    25d0:	d9 14       	cp	r13, r9
    25d2:	c0 f3       	brcs	.-16     	; 0x25c4 <vfprintf+0x370>
    25d4:	da 94       	dec	r13
    25d6:	f1 01       	movw	r30, r2
    25d8:	ed 0d       	add	r30, r13
    25da:	f1 1d       	adc	r31, r1
    25dc:	80 81       	ld	r24, Z
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	b3 01       	movw	r22, r6
    25e2:	0e 94 1d 13 	call	0x263a	; 0x263a <fputc>
    25e6:	dd 20       	and	r13, r13
    25e8:	a9 f7       	brne	.-22     	; 0x25d4 <vfprintf+0x380>
    25ea:	06 c0       	rjmp	.+12     	; 0x25f8 <vfprintf+0x3a4>
    25ec:	80 e2       	ldi	r24, 0x20	; 32
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	b3 01       	movw	r22, r6
    25f2:	0e 94 1d 13 	call	0x263a	; 0x263a <fputc>
    25f6:	ea 94       	dec	r14
    25f8:	ee 20       	and	r14, r14
    25fa:	c1 f7       	brne	.-16     	; 0x25ec <vfprintf+0x398>
    25fc:	43 ce       	rjmp	.-890    	; 0x2284 <vfprintf+0x30>
    25fe:	f3 01       	movw	r30, r6
    2600:	66 81       	ldd	r22, Z+6	; 0x06
    2602:	77 81       	ldd	r23, Z+7	; 0x07
    2604:	cb 01       	movw	r24, r22
    2606:	2b 96       	adiw	r28, 0x0b	; 11
    2608:	e2 e1       	ldi	r30, 0x12	; 18
    260a:	0c 94 c6 10 	jmp	0x218c	; 0x218c <__epilogue_restores__>

0000260e <strnlen_P>:
    260e:	fc 01       	movw	r30, r24
    2610:	05 90       	lpm	r0, Z+
    2612:	61 50       	subi	r22, 0x01	; 1
    2614:	70 40       	sbci	r23, 0x00	; 0
    2616:	01 10       	cpse	r0, r1
    2618:	d8 f7       	brcc	.-10     	; 0x2610 <strnlen_P+0x2>
    261a:	80 95       	com	r24
    261c:	90 95       	com	r25
    261e:	8e 0f       	add	r24, r30
    2620:	9f 1f       	adc	r25, r31
    2622:	08 95       	ret

00002624 <strnlen>:
    2624:	fc 01       	movw	r30, r24
    2626:	61 50       	subi	r22, 0x01	; 1
    2628:	70 40       	sbci	r23, 0x00	; 0
    262a:	01 90       	ld	r0, Z+
    262c:	01 10       	cpse	r0, r1
    262e:	d8 f7       	brcc	.-10     	; 0x2626 <strnlen+0x2>
    2630:	80 95       	com	r24
    2632:	90 95       	com	r25
    2634:	8e 0f       	add	r24, r30
    2636:	9f 1f       	adc	r25, r31
    2638:	08 95       	ret

0000263a <fputc>:
    263a:	0f 93       	push	r16
    263c:	1f 93       	push	r17
    263e:	cf 93       	push	r28
    2640:	df 93       	push	r29
    2642:	8c 01       	movw	r16, r24
    2644:	eb 01       	movw	r28, r22
    2646:	8b 81       	ldd	r24, Y+3	; 0x03
    2648:	81 ff       	sbrs	r24, 1
    264a:	1b c0       	rjmp	.+54     	; 0x2682 <fputc+0x48>
    264c:	82 ff       	sbrs	r24, 2
    264e:	0d c0       	rjmp	.+26     	; 0x266a <fputc+0x30>
    2650:	2e 81       	ldd	r18, Y+6	; 0x06
    2652:	3f 81       	ldd	r19, Y+7	; 0x07
    2654:	8c 81       	ldd	r24, Y+4	; 0x04
    2656:	9d 81       	ldd	r25, Y+5	; 0x05
    2658:	28 17       	cp	r18, r24
    265a:	39 07       	cpc	r19, r25
    265c:	64 f4       	brge	.+24     	; 0x2676 <fputc+0x3c>
    265e:	e8 81       	ld	r30, Y
    2660:	f9 81       	ldd	r31, Y+1	; 0x01
    2662:	01 93       	st	Z+, r16
    2664:	f9 83       	std	Y+1, r31	; 0x01
    2666:	e8 83       	st	Y, r30
    2668:	06 c0       	rjmp	.+12     	; 0x2676 <fputc+0x3c>
    266a:	e8 85       	ldd	r30, Y+8	; 0x08
    266c:	f9 85       	ldd	r31, Y+9	; 0x09
    266e:	80 2f       	mov	r24, r16
    2670:	09 95       	icall
    2672:	89 2b       	or	r24, r25
    2674:	31 f4       	brne	.+12     	; 0x2682 <fputc+0x48>
    2676:	8e 81       	ldd	r24, Y+6	; 0x06
    2678:	9f 81       	ldd	r25, Y+7	; 0x07
    267a:	01 96       	adiw	r24, 0x01	; 1
    267c:	9f 83       	std	Y+7, r25	; 0x07
    267e:	8e 83       	std	Y+6, r24	; 0x06
    2680:	02 c0       	rjmp	.+4      	; 0x2686 <fputc+0x4c>
    2682:	0f ef       	ldi	r16, 0xFF	; 255
    2684:	1f ef       	ldi	r17, 0xFF	; 255
    2686:	c8 01       	movw	r24, r16
    2688:	df 91       	pop	r29
    268a:	cf 91       	pop	r28
    268c:	1f 91       	pop	r17
    268e:	0f 91       	pop	r16
    2690:	08 95       	ret

00002692 <__ultoa_invert>:
    2692:	fa 01       	movw	r30, r20
    2694:	aa 27       	eor	r26, r26
    2696:	28 30       	cpi	r18, 0x08	; 8
    2698:	51 f1       	breq	.+84     	; 0x26ee <__ultoa_invert+0x5c>
    269a:	20 31       	cpi	r18, 0x10	; 16
    269c:	81 f1       	breq	.+96     	; 0x26fe <__ultoa_invert+0x6c>
    269e:	e8 94       	clt
    26a0:	6f 93       	push	r22
    26a2:	6e 7f       	andi	r22, 0xFE	; 254
    26a4:	6e 5f       	subi	r22, 0xFE	; 254
    26a6:	7f 4f       	sbci	r23, 0xFF	; 255
    26a8:	8f 4f       	sbci	r24, 0xFF	; 255
    26aa:	9f 4f       	sbci	r25, 0xFF	; 255
    26ac:	af 4f       	sbci	r26, 0xFF	; 255
    26ae:	b1 e0       	ldi	r27, 0x01	; 1
    26b0:	3e d0       	rcall	.+124    	; 0x272e <__ultoa_invert+0x9c>
    26b2:	b4 e0       	ldi	r27, 0x04	; 4
    26b4:	3c d0       	rcall	.+120    	; 0x272e <__ultoa_invert+0x9c>
    26b6:	67 0f       	add	r22, r23
    26b8:	78 1f       	adc	r23, r24
    26ba:	89 1f       	adc	r24, r25
    26bc:	9a 1f       	adc	r25, r26
    26be:	a1 1d       	adc	r26, r1
    26c0:	68 0f       	add	r22, r24
    26c2:	79 1f       	adc	r23, r25
    26c4:	8a 1f       	adc	r24, r26
    26c6:	91 1d       	adc	r25, r1
    26c8:	a1 1d       	adc	r26, r1
    26ca:	6a 0f       	add	r22, r26
    26cc:	71 1d       	adc	r23, r1
    26ce:	81 1d       	adc	r24, r1
    26d0:	91 1d       	adc	r25, r1
    26d2:	a1 1d       	adc	r26, r1
    26d4:	20 d0       	rcall	.+64     	; 0x2716 <__ultoa_invert+0x84>
    26d6:	09 f4       	brne	.+2      	; 0x26da <__ultoa_invert+0x48>
    26d8:	68 94       	set
    26da:	3f 91       	pop	r19
    26dc:	2a e0       	ldi	r18, 0x0A	; 10
    26de:	26 9f       	mul	r18, r22
    26e0:	11 24       	eor	r1, r1
    26e2:	30 19       	sub	r19, r0
    26e4:	30 5d       	subi	r19, 0xD0	; 208
    26e6:	31 93       	st	Z+, r19
    26e8:	de f6       	brtc	.-74     	; 0x26a0 <__ultoa_invert+0xe>
    26ea:	cf 01       	movw	r24, r30
    26ec:	08 95       	ret
    26ee:	46 2f       	mov	r20, r22
    26f0:	47 70       	andi	r20, 0x07	; 7
    26f2:	40 5d       	subi	r20, 0xD0	; 208
    26f4:	41 93       	st	Z+, r20
    26f6:	b3 e0       	ldi	r27, 0x03	; 3
    26f8:	0f d0       	rcall	.+30     	; 0x2718 <__ultoa_invert+0x86>
    26fa:	c9 f7       	brne	.-14     	; 0x26ee <__ultoa_invert+0x5c>
    26fc:	f6 cf       	rjmp	.-20     	; 0x26ea <__ultoa_invert+0x58>
    26fe:	46 2f       	mov	r20, r22
    2700:	4f 70       	andi	r20, 0x0F	; 15
    2702:	40 5d       	subi	r20, 0xD0	; 208
    2704:	4a 33       	cpi	r20, 0x3A	; 58
    2706:	18 f0       	brcs	.+6      	; 0x270e <__ultoa_invert+0x7c>
    2708:	49 5d       	subi	r20, 0xD9	; 217
    270a:	31 fd       	sbrc	r19, 1
    270c:	40 52       	subi	r20, 0x20	; 32
    270e:	41 93       	st	Z+, r20
    2710:	02 d0       	rcall	.+4      	; 0x2716 <__ultoa_invert+0x84>
    2712:	a9 f7       	brne	.-22     	; 0x26fe <__ultoa_invert+0x6c>
    2714:	ea cf       	rjmp	.-44     	; 0x26ea <__ultoa_invert+0x58>
    2716:	b4 e0       	ldi	r27, 0x04	; 4
    2718:	a6 95       	lsr	r26
    271a:	97 95       	ror	r25
    271c:	87 95       	ror	r24
    271e:	77 95       	ror	r23
    2720:	67 95       	ror	r22
    2722:	ba 95       	dec	r27
    2724:	c9 f7       	brne	.-14     	; 0x2718 <__ultoa_invert+0x86>
    2726:	00 97       	sbiw	r24, 0x00	; 0
    2728:	61 05       	cpc	r22, r1
    272a:	71 05       	cpc	r23, r1
    272c:	08 95       	ret
    272e:	9b 01       	movw	r18, r22
    2730:	ac 01       	movw	r20, r24
    2732:	0a 2e       	mov	r0, r26
    2734:	06 94       	lsr	r0
    2736:	57 95       	ror	r21
    2738:	47 95       	ror	r20
    273a:	37 95       	ror	r19
    273c:	27 95       	ror	r18
    273e:	ba 95       	dec	r27
    2740:	c9 f7       	brne	.-14     	; 0x2734 <__ultoa_invert+0xa2>
    2742:	62 0f       	add	r22, r18
    2744:	73 1f       	adc	r23, r19
    2746:	84 1f       	adc	r24, r20
    2748:	95 1f       	adc	r25, r21
    274a:	a0 1d       	adc	r26, r0
    274c:	08 95       	ret

0000274e <_exit>:
    274e:	f8 94       	cli

00002750 <__stop_program>:
    2750:	ff cf       	rjmp	.-2      	; 0x2750 <__stop_program>
