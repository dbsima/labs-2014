
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00002684  00002718  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002684  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000278  00800118  00800118  00002730  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00002730  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002d4  00000000  00000000  000027b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001aa9  00000000  00000000  00002a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000836  00000000  00000000  0000452d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000016e4  00000000  00000000  00004d63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000290  00000000  00000000  00006448  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000563  00000000  00000000  000066d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001b29  00000000  00000000  00006c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00008764  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 11 03 	jmp	0x622	; 0x622 <__vector_9>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_16>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e4 e8       	ldi	r30, 0x84	; 132
      90:	f6 e2       	ldi	r31, 0x26	; 38
      92:	02 c0       	rjmp	.+4      	; 0x98 <.do_copy_data_start>

00000094 <.do_copy_data_loop>:
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0

00000098 <.do_copy_data_start>:
      98:	a8 31       	cpi	r26, 0x18	; 24
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <.do_copy_data_loop>

0000009e <__do_clear_bss>:
      9e:	13 e0       	ldi	r17, 0x03	; 3
      a0:	a8 e1       	ldi	r26, 0x18	; 24
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a0 39       	cpi	r26, 0x90	; 144
      aa:	b1 07       	cpc	r27, r17
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 1c 02 	call	0x438	; 0x438 <main>
      b2:	0c 94 40 13 	jmp	0x2680	; 0x2680 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <__vector_16>:

volatile uint8_t sync = 0;


ISR(TIMER0_COMPA_vect)
{
      ba:	1f 92       	push	r1
      bc:	0f 92       	push	r0
      be:	0f b6       	in	r0, 0x3f	; 63
      c0:	0f 92       	push	r0
      c2:	11 24       	eor	r1, r1
      c4:	2f 93       	push	r18
      c6:	3f 93       	push	r19
      c8:	4f 93       	push	r20
      ca:	8f 93       	push	r24
      cc:	9f 93       	push	r25
      ce:	ef 93       	push	r30
      d0:	ff 93       	push	r31
	
	
	if(sync == 1)
      d2:	40 91 1a 01 	lds	r20, 0x011A
      d6:	41 30       	cpi	r20, 0x01	; 1
      d8:	09 f0       	breq	.+2      	; 0xdc <__vector_16+0x22>
      da:	45 c0       	rjmp	.+138    	; 0x166 <__vector_16+0xac>
	{
		
		if(read1 == 1)
      dc:	80 91 17 01 	lds	r24, 0x0117
      e0:	81 30       	cpi	r24, 0x01	; 1
      e2:	e9 f4       	brne	.+58     	; 0x11e <__vector_16+0x64>
		{
			OCR1A = (unsigned char)Buff1[counter++];
      e4:	20 91 18 01 	lds	r18, 0x0118
      e8:	30 91 19 01 	lds	r19, 0x0119
      ec:	f9 01       	movw	r30, r18
      ee:	e0 57       	subi	r30, 0x70	; 112
      f0:	fd 4f       	sbci	r31, 0xFD	; 253
      f2:	80 81       	ld	r24, Z
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	90 93 89 00 	sts	0x0089, r25
      fa:	80 93 88 00 	sts	0x0088, r24
      fe:	2f 5f       	subi	r18, 0xFF	; 255
     100:	3f 4f       	sbci	r19, 0xFF	; 255
     102:	30 93 19 01 	sts	0x0119, r19
     106:	20 93 18 01 	sts	0x0118, r18
			
			if(counter == 256)
     10a:	80 91 18 01 	lds	r24, 0x0118
     10e:	90 91 19 01 	lds	r25, 0x0119
     112:	80 50       	subi	r24, 0x00	; 0
     114:	91 40       	sbci	r25, 0x01	; 1
     116:	39 f5       	brne	.+78     	; 0x166 <__vector_16+0xac>
			{
				//PORTC = 0x80;
				read1 = 0;
     118:	10 92 17 01 	sts	0x0117, r1
     11c:	20 c0       	rjmp	.+64     	; 0x15e <__vector_16+0xa4>
				counter = 0;
			}
		}
		else if(read1 == 0)
     11e:	80 91 17 01 	lds	r24, 0x0117
     122:	88 23       	and	r24, r24
     124:	01 f5       	brne	.+64     	; 0x166 <__vector_16+0xac>
		{
			OCR1A = (unsigned char)Buff2[counter++];
     126:	20 91 18 01 	lds	r18, 0x0118
     12a:	30 91 19 01 	lds	r19, 0x0119
     12e:	f9 01       	movw	r30, r18
     130:	e6 5c       	subi	r30, 0xC6	; 198
     132:	fe 4f       	sbci	r31, 0xFE	; 254
     134:	80 81       	ld	r24, Z
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	90 93 89 00 	sts	0x0089, r25
     13c:	80 93 88 00 	sts	0x0088, r24
     140:	2f 5f       	subi	r18, 0xFF	; 255
     142:	3f 4f       	sbci	r19, 0xFF	; 255
     144:	30 93 19 01 	sts	0x0119, r19
     148:	20 93 18 01 	sts	0x0118, r18
			if(counter == 256)
     14c:	80 91 18 01 	lds	r24, 0x0118
     150:	90 91 19 01 	lds	r25, 0x0119
     154:	80 50       	subi	r24, 0x00	; 0
     156:	91 40       	sbci	r25, 0x01	; 1
     158:	31 f4       	brne	.+12     	; 0x166 <__vector_16+0xac>
			{
				//PORTC = 0x40;
				read1 = 1;
     15a:	40 93 17 01 	sts	0x0117, r20
				counter = 0;
     15e:	10 92 19 01 	sts	0x0119, r1
     162:	10 92 18 01 	sts	0x0118, r1
			}
		}
		
		
	}
}
     166:	ff 91       	pop	r31
     168:	ef 91       	pop	r30
     16a:	9f 91       	pop	r25
     16c:	8f 91       	pop	r24
     16e:	4f 91       	pop	r20
     170:	3f 91       	pop	r19
     172:	2f 91       	pop	r18
     174:	0f 90       	pop	r0
     176:	0f be       	out	0x3f, r0	; 63
     178:	0f 90       	pop	r0
     17a:	1f 90       	pop	r1
     17c:	18 95       	reti

0000017e <Timer0_init>:
	}
}

void Timer0_init(void)
{
	TCCR0A = _BV(WGM01);
     17e:	82 e0       	ldi	r24, 0x02	; 2
     180:	84 bd       	out	0x24, r24	; 36
	TCCR0B = _BV(CS01);//CTC, FCPU/8
     182:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = _BV(OCIE0A);
     184:	80 93 6e 00 	sts	0x006E, r24
}
     188:	08 95       	ret

0000018a <Timer1_init>:

void Timer1_init(void)
{
	TCCR1A = _BV(COM1A1)|_BV(COM1A0)|_BV(WGM10);
     18a:	81 ec       	ldi	r24, 0xC1	; 193
     18c:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = _BV(WGM12)|_BV(CS10);
     190:	89 e0       	ldi	r24, 0x09	; 9
     192:	80 93 81 00 	sts	0x0081, r24
}
     196:	08 95       	ret

00000198 <Timer2_init>:

void Timer2_init(void)
{
	TCCR2A = _BV(WGM21);
     198:	82 e0       	ldi	r24, 0x02	; 2
     19a:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = _BV(CS22)|_BV(CS20);//CTC, FCPU/8
     19e:	95 e0       	ldi	r25, 0x05	; 5
     1a0:	90 93 b1 00 	sts	0x00B1, r25
	TIMSK2 = _BV(OCIE2A);
     1a4:	80 93 70 00 	sts	0x0070, r24
	OCR2A = 125;
     1a8:	8d e7       	ldi	r24, 0x7D	; 125
     1aa:	80 93 b3 00 	sts	0x00B3, r24
}
     1ae:	08 95       	ret

000001b0 <play>:

static UINT play (const char *fn)
{
     1b0:	ef 92       	push	r14
     1b2:	ff 92       	push	r15
     1b4:	0f 93       	push	r16
     1b6:	1f 93       	push	r17
	unsigned char read2;

	
	uint16_t size = 256;
	
	if ((res = pf_open(fn)) == FR_OK) {
     1b8:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <pf_open>
     1bc:	bc 01       	movw	r22, r24
     1be:	00 97       	sbiw	r24, 0x00	; 0
     1c0:	09 f0       	breq	.+2      	; 0x1c4 <play+0x14>
     1c2:	2c c1       	rjmp	.+600    	; 0x41c <play+0x26c>
	}
}

void Timer0_init(void)
{
	TCCR0A = _BV(WGM01);
     1c4:	82 e0       	ldi	r24, 0x02	; 2
     1c6:	84 bd       	out	0x24, r24	; 36
	TCCR0B = _BV(CS01);//CTC, FCPU/8
     1c8:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = _BV(OCIE0A);
     1ca:	80 93 6e 00 	sts	0x006E, r24
}

void Timer1_init(void)
{
	TCCR1A = _BV(COM1A1)|_BV(COM1A0)|_BV(WGM10);
     1ce:	81 ec       	ldi	r24, 0xC1	; 193
     1d0:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = _BV(WGM12)|_BV(CS10);
     1d4:	89 e0       	ldi	r24, 0x09	; 9
     1d6:	80 93 81 00 	sts	0x0081, r24
DWORD load_header (void)	/* 0:Invalid format, 1:I/O error, >1:Number of samples */
{
	DWORD sz;


	if (pf_read(Buff1, 12, &rb)) return 1;	/* Load file header (12 bytes) */
     1da:	80 e9       	ldi	r24, 0x90	; 144
     1dc:	92 e0       	ldi	r25, 0x02	; 2
     1de:	6c e0       	ldi	r22, 0x0C	; 12
     1e0:	70 e0       	ldi	r23, 0x00	; 0
     1e2:	48 e3       	ldi	r20, 0x38	; 56
     1e4:	51 e0       	ldi	r21, 0x01	; 1
     1e6:	0e 94 31 09 	call	0x1262	; 0x1262 <pf_read>
     1ea:	89 2b       	or	r24, r25
     1ec:	31 f0       	breq	.+12     	; 0x1fa <play+0x4a>
     1ee:	81 e0       	ldi	r24, 0x01	; 1
     1f0:	e8 2e       	mov	r14, r24
     1f2:	f1 2c       	mov	r15, r1
     1f4:	01 2d       	mov	r16, r1
     1f6:	11 2d       	mov	r17, r1
     1f8:	b3 c0       	rjmp	.+358    	; 0x360 <play+0x1b0>

	if (rb != 12 || LD_DWORD(Buff1+8) != FCC('W','A','V','E')) return 0;
     1fa:	80 91 38 01 	lds	r24, 0x0138
     1fe:	90 91 39 01 	lds	r25, 0x0139
     202:	0c 97       	sbiw	r24, 0x0c	; 12
     204:	09 f0       	breq	.+2      	; 0x208 <play+0x58>
     206:	14 c1       	rjmp	.+552    	; 0x430 <play+0x280>
     208:	80 91 98 02 	lds	r24, 0x0298
     20c:	90 91 99 02 	lds	r25, 0x0299
     210:	a0 91 9a 02 	lds	r26, 0x029A
     214:	b0 91 9b 02 	lds	r27, 0x029B
     218:	87 55       	subi	r24, 0x57	; 87
     21a:	91 44       	sbci	r25, 0x41	; 65
     21c:	a6 45       	sbci	r26, 0x56	; 86
     21e:	b5 44       	sbci	r27, 0x45	; 69
     220:	09 f0       	breq	.+2      	; 0x224 <play+0x74>
     222:	06 c1       	rjmp	.+524    	; 0x430 <play+0x280>

	for (;;) {
		pf_read(Buff1, 8, &rb);			/* Get Chunk ID and size */
     224:	80 e9       	ldi	r24, 0x90	; 144
     226:	92 e0       	ldi	r25, 0x02	; 2
     228:	68 e0       	ldi	r22, 0x08	; 8
     22a:	70 e0       	ldi	r23, 0x00	; 0
     22c:	48 e3       	ldi	r20, 0x38	; 56
     22e:	51 e0       	ldi	r21, 0x01	; 1
     230:	0e 94 31 09 	call	0x1262	; 0x1262 <pf_read>
		if (rb != 8) return 0;
     234:	80 91 38 01 	lds	r24, 0x0138
     238:	90 91 39 01 	lds	r25, 0x0139
     23c:	08 97       	sbiw	r24, 0x08	; 8
     23e:	09 f0       	breq	.+2      	; 0x242 <play+0x92>
     240:	f7 c0       	rjmp	.+494    	; 0x430 <play+0x280>
		sz = LD_DWORD(&Buff1[4]);		/* Chunk size */
     242:	e0 90 94 02 	lds	r14, 0x0294
     246:	f0 90 95 02 	lds	r15, 0x0295
     24a:	00 91 96 02 	lds	r16, 0x0296
     24e:	10 91 97 02 	lds	r17, 0x0297

		switch (LD_DWORD(&Buff1[0])) {	/* FCC */
     252:	80 91 90 02 	lds	r24, 0x0290
     256:	90 91 91 02 	lds	r25, 0x0291
     25a:	a0 91 92 02 	lds	r26, 0x0292
     25e:	b0 91 93 02 	lds	r27, 0x0293
     262:	8c 34       	cpi	r24, 0x4C	; 76
     264:	29 e4       	ldi	r18, 0x49	; 73
     266:	92 07       	cpc	r25, r18
     268:	23 e5       	ldi	r18, 0x53	; 83
     26a:	a2 07       	cpc	r26, r18
     26c:	24 e5       	ldi	r18, 0x54	; 84
     26e:	b2 07       	cpc	r27, r18
     270:	09 f4       	brne	.+2      	; 0x274 <play+0xc4>
     272:	5e c0       	rjmp	.+188    	; 0x330 <play+0x180>
     274:	8d 34       	cpi	r24, 0x4D	; 77
     276:	29 e4       	ldi	r18, 0x49	; 73
     278:	92 07       	cpc	r25, r18
     27a:	23 e5       	ldi	r18, 0x53	; 83
     27c:	a2 07       	cpc	r26, r18
     27e:	24 e5       	ldi	r18, 0x54	; 84
     280:	b2 07       	cpc	r27, r18
     282:	38 f4       	brcc	.+14     	; 0x292 <play+0xe2>
     284:	86 56       	subi	r24, 0x66	; 102
     286:	9d 46       	sbci	r25, 0x6D	; 109
     288:	a4 47       	sbci	r26, 0x74	; 116
     28a:	b0 42       	sbci	r27, 0x20	; 32
     28c:	09 f0       	breq	.+2      	; 0x290 <play+0xe0>
     28e:	d0 c0       	rjmp	.+416    	; 0x430 <play+0x280>
     290:	10 c0       	rjmp	.+32     	; 0x2b2 <play+0x102>
     292:	84 36       	cpi	r24, 0x64	; 100
     294:	21 e6       	ldi	r18, 0x61	; 97
     296:	92 07       	cpc	r25, r18
     298:	24 e7       	ldi	r18, 0x74	; 116
     29a:	a2 07       	cpc	r26, r18
     29c:	21 e6       	ldi	r18, 0x61	; 97
     29e:	b2 07       	cpc	r27, r18
     2a0:	09 f4       	brne	.+2      	; 0x2a4 <play+0xf4>
     2a2:	57 c0       	rjmp	.+174    	; 0x352 <play+0x1a2>
     2a4:	86 56       	subi	r24, 0x66	; 102
     2a6:	91 46       	sbci	r25, 0x61	; 97
     2a8:	a3 46       	sbci	r26, 0x63	; 99
     2aa:	b4 47       	sbci	r27, 0x74	; 116
     2ac:	09 f0       	breq	.+2      	; 0x2b0 <play+0x100>
     2ae:	c0 c0       	rjmp	.+384    	; 0x430 <play+0x280>
     2b0:	3f c0       	rjmp	.+126    	; 0x330 <play+0x180>
		case FCC('f','m','t',' ') :					/* 'fmt ' chunk */
			if (sz > 100 || sz < 16) return 0;		/* Check chunk size */
     2b2:	d8 01       	movw	r26, r16
     2b4:	c7 01       	movw	r24, r14
     2b6:	40 97       	sbiw	r24, 0x10	; 16
     2b8:	a1 09       	sbc	r26, r1
     2ba:	b1 09       	sbc	r27, r1
     2bc:	85 35       	cpi	r24, 0x55	; 85
     2be:	91 05       	cpc	r25, r1
     2c0:	a1 05       	cpc	r26, r1
     2c2:	b1 05       	cpc	r27, r1
     2c4:	08 f0       	brcs	.+2      	; 0x2c8 <play+0x118>
     2c6:	b4 c0       	rjmp	.+360    	; 0x430 <play+0x280>
			pf_read(Buff1, sz, &rb);					/* Get content */
     2c8:	80 e9       	ldi	r24, 0x90	; 144
     2ca:	92 e0       	ldi	r25, 0x02	; 2
     2cc:	b7 01       	movw	r22, r14
     2ce:	48 e3       	ldi	r20, 0x38	; 56
     2d0:	51 e0       	ldi	r21, 0x01	; 1
     2d2:	0e 94 31 09 	call	0x1262	; 0x1262 <pf_read>
			if (rb != sz) return 0;
     2d6:	80 91 38 01 	lds	r24, 0x0138
     2da:	90 91 39 01 	lds	r25, 0x0139
     2de:	a0 e0       	ldi	r26, 0x00	; 0
     2e0:	b0 e0       	ldi	r27, 0x00	; 0
     2e2:	8e 15       	cp	r24, r14
     2e4:	9f 05       	cpc	r25, r15
     2e6:	a0 07       	cpc	r26, r16
     2e8:	b1 07       	cpc	r27, r17
     2ea:	09 f0       	breq	.+2      	; 0x2ee <play+0x13e>
     2ec:	a1 c0       	rjmp	.+322    	; 0x430 <play+0x280>
			if (Buff1[0] != 1) return 0;				/* Check coding type (1) */
     2ee:	80 91 90 02 	lds	r24, 0x0290
     2f2:	81 30       	cpi	r24, 0x01	; 1
     2f4:	09 f0       	breq	.+2      	; 0x2f8 <play+0x148>
     2f6:	9c c0       	rjmp	.+312    	; 0x430 <play+0x280>
			if (Buff1[2] != 1 && Buff1[2] != 2) 		/* Check channels (1/2) */
     2f8:	80 91 92 02 	lds	r24, 0x0292
     2fc:	81 50       	subi	r24, 0x01	; 1
     2fe:	82 30       	cpi	r24, 0x02	; 2
     300:	08 f0       	brcs	.+2      	; 0x304 <play+0x154>
     302:	96 c0       	rjmp	.+300    	; 0x430 <play+0x280>
				return 0;
			
			if (Buff1[14] != 8 && Buff1[14] != 16)	/* Check resolution (8/16) */
     304:	80 91 9e 02 	lds	r24, 0x029E
     308:	88 30       	cpi	r24, 0x08	; 8
     30a:	19 f0       	breq	.+6      	; 0x312 <play+0x162>
     30c:	80 31       	cpi	r24, 0x10	; 16
     30e:	09 f0       	breq	.+2      	; 0x312 <play+0x162>
     310:	8f c0       	rjmp	.+286    	; 0x430 <play+0x280>
				return 0;
			
			OCR0A = (BYTE)(F_CPU/8/LD_WORD(&Buff1[4]))-1;	/* Sampling freq */
     312:	20 91 94 02 	lds	r18, 0x0294
     316:	30 91 95 02 	lds	r19, 0x0295
     31a:	40 e0       	ldi	r20, 0x00	; 0
     31c:	50 e0       	ldi	r21, 0x00	; 0
     31e:	60 e8       	ldi	r22, 0x80	; 128
     320:	74 e8       	ldi	r23, 0x84	; 132
     322:	8e e1       	ldi	r24, 0x1E	; 30
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	0e 94 18 10 	call	0x2030	; 0x2030 <__divmodsi4>
     32a:	21 50       	subi	r18, 0x01	; 1
     32c:	27 bd       	out	0x27, r18	; 39
     32e:	7a cf       	rjmp	.-268    	; 0x224 <play+0x74>
		case FCC('d','a','t','a') :				/* 'data' chunk (start to play) */
			return sz;

		case FCC('L','I','S','T') :				/* 'LIST' chunk (skip) */
		case FCC('f','a','c','t') :				/* 'fact' chunk (skip) */
			pf_lseek(Fs.fptr + sz);
     330:	80 91 7c 02 	lds	r24, 0x027C
     334:	90 91 7d 02 	lds	r25, 0x027D
     338:	a0 91 7e 02 	lds	r26, 0x027E
     33c:	b0 91 7f 02 	lds	r27, 0x027F
     340:	e8 0e       	add	r14, r24
     342:	f9 1e       	adc	r15, r25
     344:	0a 1f       	adc	r16, r26
     346:	1b 1f       	adc	r17, r27
     348:	c8 01       	movw	r24, r16
     34a:	b7 01       	movw	r22, r14
     34c:	0e 94 91 05 	call	0xb22	; 0xb22 <pf_lseek>
     350:	69 cf       	rjmp	.-302    	; 0x224 <play+0x74>
	
		Timer0_init();
		Timer1_init();
		
		sz = load_header();			/* Load file header */
		if (sz < 256) return (UINT)sz;
     352:	8f ef       	ldi	r24, 0xFF	; 255
     354:	e8 16       	cp	r14, r24
     356:	f1 04       	cpc	r15, r1
     358:	01 05       	cpc	r16, r1
     35a:	11 05       	cpc	r17, r1
     35c:	09 f0       	breq	.+2      	; 0x360 <play+0x1b0>
     35e:	10 f4       	brcc	.+4      	; 0x364 <play+0x1b4>
     360:	b7 01       	movw	r22, r14
     362:	60 c0       	rjmp	.+192    	; 0x424 <play+0x274>
		
		
		FifoCt = 0; FifoRi = 0; FifoWi = 0;		/* Reset FIFO */
     364:	10 92 61 02 	sts	0x0261, r1
     368:	10 92 21 01 	sts	0x0121, r1
     36c:	10 92 20 01 	sts	0x0120, r1
		pf_read(Buff1, 512 - (Fs.fptr % 512), &rb);	/* Snip sector unaligned part */
     370:	80 91 7c 02 	lds	r24, 0x027C
     374:	90 91 7d 02 	lds	r25, 0x027D
     378:	91 70       	andi	r25, 0x01	; 1
     37a:	60 e0       	ldi	r22, 0x00	; 0
     37c:	72 e0       	ldi	r23, 0x02	; 2
     37e:	68 1b       	sub	r22, r24
     380:	79 0b       	sbc	r23, r25
     382:	80 e9       	ldi	r24, 0x90	; 144
     384:	92 e0       	ldi	r25, 0x02	; 2
     386:	48 e3       	ldi	r20, 0x38	; 56
     388:	51 e0       	ldi	r21, 0x01	; 1
     38a:	0e 94 31 09 	call	0x1262	; 0x1262 <pf_read>
		sz -= rb;

			
		res = pf_read(Buff1, size, &rb);
     38e:	80 e9       	ldi	r24, 0x90	; 144
     390:	92 e0       	ldi	r25, 0x02	; 2
     392:	60 e0       	ldi	r22, 0x00	; 0
     394:	71 e0       	ldi	r23, 0x01	; 1
     396:	48 e3       	ldi	r20, 0x38	; 56
     398:	51 e0       	ldi	r21, 0x01	; 1
     39a:	0e 94 31 09 	call	0x1262	; 0x1262 <pf_read>
     39e:	bc 01       	movw	r22, r24
		if (res != FR_OK) { PORTC = 0x08; while (FifoCt) ; return res; }
     3a0:	00 97       	sbiw	r24, 0x00	; 0
     3a2:	39 f0       	breq	.+14     	; 0x3b2 <play+0x202>
     3a4:	88 e0       	ldi	r24, 0x08	; 8
     3a6:	88 b9       	out	0x08, r24	; 8
     3a8:	80 91 61 02 	lds	r24, 0x0261
     3ac:	88 23       	and	r24, r24
     3ae:	e1 f7       	brne	.-8      	; 0x3a8 <play+0x1f8>
     3b0:	39 c0       	rjmp	.+114    	; 0x424 <play+0x274>
		
		sync = 1;
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	80 93 1a 01 	sts	0x011A, r24
				
		do {
				
			read2 = read1;
     3b8:	10 91 17 01 	lds	r17, 0x0117
			
			if(read1 == 1)	
     3bc:	80 91 17 01 	lds	r24, 0x0117
     3c0:	81 30       	cpi	r24, 0x01	; 1
     3c2:	19 f4       	brne	.+6      	; 0x3ca <play+0x21a>
				res = pf_read(Buff2, size, &rb);
     3c4:	8a e3       	ldi	r24, 0x3A	; 58
     3c6:	91 e0       	ldi	r25, 0x01	; 1
     3c8:	02 c0       	rjmp	.+4      	; 0x3ce <play+0x21e>
			else
				res = pf_read(Buff1, size, &rb);
     3ca:	80 e9       	ldi	r24, 0x90	; 144
     3cc:	92 e0       	ldi	r25, 0x02	; 2
     3ce:	60 e0       	ldi	r22, 0x00	; 0
     3d0:	71 e0       	ldi	r23, 0x01	; 1
     3d2:	48 e3       	ldi	r20, 0x38	; 56
     3d4:	51 e0       	ldi	r21, 0x01	; 1
     3d6:	0e 94 31 09 	call	0x1262	; 0x1262 <pf_read>
     3da:	bc 01       	movw	r22, r24
				
			if (res != FR_OK) { PORTC = 0x08; break; }
     3dc:	00 97       	sbiw	r24, 0x00	; 0
     3de:	19 f0       	breq	.+6      	; 0x3e6 <play+0x236>
     3e0:	88 e0       	ldi	r24, 0x08	; 8
     3e2:	88 b9       	out	0x08, r24	; 8
     3e4:	19 c0       	rjmp	.+50     	; 0x418 <play+0x268>
			
			while(read2 == read1);
     3e6:	80 91 17 01 	lds	r24, 0x0117
     3ea:	18 17       	cp	r17, r24
     3ec:	e1 f3       	breq	.-8      	; 0x3e6 <play+0x236>
			
			if(!(PINB&(1<<PB1))) 
     3ee:	19 99       	sbic	0x03, 1	; 3
     3f0:	0c c0       	rjmp	.+24     	; 0x40a <play+0x25a>
			{
				sync = 0;
     3f2:	10 92 1a 01 	sts	0x011A, r1
     3f6:	88 e8       	ldi	r24, 0x88	; 136
     3f8:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3fa:	20 e9       	ldi	r18, 0x90	; 144
     3fc:	31 e0       	ldi	r19, 0x01	; 1
     3fe:	f9 01       	movw	r30, r18
     400:	31 97       	sbiw	r30, 0x01	; 1
     402:	f1 f7       	brne	.-4      	; 0x400 <play+0x250>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     404:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     406:	d9 f7       	brne	.-10     	; 0x3fe <play+0x24e>
     408:	07 c0       	rjmp	.+14     	; 0x418 <play+0x268>
				_delay_ms(500); 
				break;
			}
			
		
		} while (rb == size);	/* Repeat until all data read */
     40a:	80 91 38 01 	lds	r24, 0x0138
     40e:	90 91 39 01 	lds	r25, 0x0139
     412:	80 50       	subi	r24, 0x00	; 0
     414:	91 40       	sbci	r25, 0x01	; 1
     416:	81 f2       	breq	.-96     	; 0x3b8 <play+0x208>
		
		sync = 0;
     418:	10 92 1a 01 	sts	0x011A, r1
	}

	while (FifoCt) ;			/* Wait for FIFO empty */
     41c:	80 91 61 02 	lds	r24, 0x0261
     420:	88 23       	and	r24, r24
     422:	e1 f7       	brne	.-8      	; 0x41c <play+0x26c>
	

	return res;
}
     424:	cb 01       	movw	r24, r22
     426:	1f 91       	pop	r17
     428:	0f 91       	pop	r16
     42a:	ff 90       	pop	r15
     42c:	ef 90       	pop	r14
     42e:	08 95       	ret
		} while (rb == size);	/* Repeat until all data read */
		
		sync = 0;
	}

	while (FifoCt) ;			/* Wait for FIFO empty */
     430:	ee 24       	eor	r14, r14
     432:	ff 24       	eor	r15, r15
     434:	87 01       	movw	r16, r14
     436:	94 cf       	rjmp	.-216    	; 0x360 <play+0x1b0>

00000438 <main>:
}

/*-----------------------------------------------------------------------*/
/* Main                                                                  */
int main (void)
{
     438:	ef 92       	push	r14
     43a:	ff 92       	push	r15
     43c:	0f 93       	push	r16
     43e:	1f 93       	push	r17
     440:	cf 93       	push	r28
     442:	df 93       	push	r29
	// setare pin 5 (difuzor) si pin 6 (CS_SD) al portului A ca pin de iesire
	DDRD |= (1<<PD5) | (1<<PD6);
     444:	8a b1       	in	r24, 0x0a	; 10
     446:	80 66       	ori	r24, 0x60	; 96
     448:	8a b9       	out	0x0a, r24	; 10
	
	// setam toti pinii portului C ca pini de iesire
	DDRC = 0xFF;
     44a:	8f ef       	ldi	r24, 0xFF	; 255
     44c:	87 b9       	out	0x07, r24	; 7
	
	DDRB &= ~(1<<PB0);
     44e:	20 98       	cbi	0x04, 0	; 4
	DDRB &= ~(1<<PB1);
     450:	21 98       	cbi	0x04, 1	; 4
	
	PORTB |= (1<<PB1) | (1<<PB0);
     452:	85 b1       	in	r24, 0x05	; 5
     454:	83 60       	ori	r24, 0x03	; 3
     456:	85 b9       	out	0x05, r24	; 5
	PORTD &= ~((1<<PD5) | (1<<PD6));
     458:	8b b1       	in	r24, 0x0b	; 11
     45a:	8f 79       	andi	r24, 0x9F	; 159
     45c:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~((1<<PD5) | (1<<PD6));
     45e:	8b b1       	in	r24, 0x0b	; 11
     460:	8f 79       	andi	r24, 0x9F	; 159
     462:	8b b9       	out	0x0b, r24	; 11
	

	LCD_init();
     464:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <LCD_init>
		
	sei();
     468:	78 94       	sei
     46a:	20 e1       	ldi	r18, 0x10	; 16
     46c:	37 e2       	ldi	r19, 0x27	; 39
     46e:	c0 e9       	ldi	r28, 0x90	; 144
     470:	d1 e0       	ldi	r29, 0x01	; 1
     472:	05 c0       	rjmp	.+10     	; 0x47e <main+0x46>
     474:	ce 01       	movw	r24, r28
     476:	01 97       	sbiw	r24, 0x01	; 1
     478:	f1 f7       	brne	.-4      	; 0x476 <main+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     47a:	21 50       	subi	r18, 0x01	; 1
     47c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     47e:	21 15       	cp	r18, r1
     480:	31 05       	cpc	r19, r1
     482:	c1 f7       	brne	.-16     	; 0x474 <main+0x3c>

	for (;;)
	{
		_delay_ms(1000);							/* Delay 1000ms for things to settle down */
		
		if (pf_mount(&Fs)) 
     484:	84 e6       	ldi	r24, 0x64	; 100
     486:	92 e0       	ldi	r25, 0x02	; 2
     488:	0e 94 9c 0b 	call	0x1738	; 0x1738 <pf_mount>
     48c:	89 2b       	or	r24, r25
     48e:	19 f0       	breq	.+6      	; 0x496 <main+0x5e>
     490:	20 e1       	ldi	r18, 0x10	; 16
     492:	37 e2       	ldi	r19, 0x27	; 39
     494:	ef cf       	rjmp	.-34     	; 0x474 <main+0x3c>
		{	
			continue;	/* Initialize FS */
		}
		
		if (pf_opendir(&Dir, "wav")) break;		/* Open /wav folder */
     496:	8c e3       	ldi	r24, 0x3C	; 60
     498:	92 e0       	ldi	r25, 0x02	; 2
     49a:	60 e0       	ldi	r22, 0x00	; 0
     49c:	71 e0       	ldi	r23, 0x01	; 1
     49e:	0e 94 8e 08 	call	0x111c	; 0x111c <pf_opendir>
     4a2:	89 2b       	or	r24, r25
     4a4:	09 f0       	breq	.+2      	; 0x4a8 <main+0x70>
     4a6:	b6 c0       	rjmp	.+364    	; 0x614 <main+0x1dc>
		int state = STAHPED;
		char* filename, first_wav, last_wav_played;
		
		
		
		if (!pf_readdir(&Dir, &Fno) && Fno.fname[0]) /* go to next file*/
     4a8:	8c e3       	ldi	r24, 0x3C	; 60
     4aa:	92 e0       	ldi	r25, 0x02	; 2
     4ac:	62 e2       	ldi	r22, 0x22	; 34
     4ae:	71 e0       	ldi	r23, 0x01	; 1
     4b0:	0e 94 b7 06 	call	0xd6e	; 0xd6e <pf_readdir>
     4b4:	89 2b       	or	r24, r25
     4b6:	d1 f4       	brne	.+52     	; 0x4ec <main+0xb4>
     4b8:	80 91 2b 01 	lds	r24, 0x012B
     4bc:	88 23       	and	r24, r24
     4be:	b1 f0       	breq	.+44     	; 0x4ec <main+0xb4>
			{		
				if (!(Fno.fattrib & (AM_DIR|AM_HID)) && strstr(Fno.fname, "WAV")) /* filter out all the folders, hidden files and the files that are not "WAV" */
     4c0:	80 91 2a 01 	lds	r24, 0x012A
     4c4:	82 71       	andi	r24, 0x12	; 18
     4c6:	91 f4       	brne	.+36     	; 0x4ec <main+0xb4>
     4c8:	8b e2       	ldi	r24, 0x2B	; 43
     4ca:	91 e0       	ldi	r25, 0x01	; 1
     4cc:	64 e0       	ldi	r22, 0x04	; 4
     4ce:	71 e0       	ldi	r23, 0x01	; 1
     4d0:	0e 94 85 10 	call	0x210a	; 0x210a <strstr>
     4d4:	00 97       	sbiw	r24, 0x00	; 0
     4d6:	51 f0       	breq	.+20     	; 0x4ec <main+0xb4>
				{	
					/* display the filename on the LCD */
					LCD_print(Fno.fname);
     4d8:	8b e2       	ldi	r24, 0x2B	; 43
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <LCD_print>
					strcpy(first_wav, Fno.fname);
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	6b e2       	ldi	r22, 0x2B	; 43
     4e6:	71 e0       	ldi	r23, 0x01	; 1
     4e8:	0e 94 7e 10 	call	0x20fc	; 0x20fc <strcpy>
     4ec:	c2 e0       	ldi	r28, 0x02	; 2
     4ee:	d0 e0       	ldi	r29, 0x00	; 0
				}
			}
			/* check if button on PA2 (next) is pressed */
			if (!(PINA & (1 << PA2)))
			{
				sprintf(last_wav_played, "%s", Fno.fname);
     4f0:	00 e0       	ldi	r16, 0x00	; 0
     4f2:	10 e0       	ldi	r17, 0x00	; 0
     4f4:	ee 24       	eor	r14, r14
     4f6:	ff 24       	eor	r15, r15
     4f8:	02 c0       	rjmp	.+4      	; 0x4fe <main+0xc6>
			{		
				if (!(Fno.fattrib & (AM_DIR|AM_HID)) && strstr(Fno.fname, "WAV")) /* filter out all the folders, hidden files and the files that are not "WAV" */
				{	
					/* display the filename on the LCD */
					LCD_print(Fno.fname);
					strcpy(first_wav, Fno.fname);
     4fa:	c2 e0       	ldi	r28, 0x02	; 2
     4fc:	d0 e0       	ldi	r29, 0x00	; 0
			}		

		while(1) 
		{
			/* check if button on PA3 (start/stahp) is pressed */
			if (!(PINA & (1 << PA3)))
     4fe:	03 99       	sbic	0x00, 3	; 0
     500:	19 c0       	rjmp	.+50     	; 0x534 <main+0xfc>
			{
				if (state == STAHPED)
     502:	22 97       	sbiw	r28, 0x02	; 2
     504:	79 f4       	brne	.+30     	; 0x524 <main+0xec>
				{
					state = STARTED;
					LCD_print(Fno.fname);
     506:	8b e2       	ldi	r24, 0x2B	; 43
     508:	91 e0       	ldi	r25, 0x01	; 1
     50a:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <LCD_print>
					play(strcat("wav", Fno.fname)); // play song
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	6b e2       	ldi	r22, 0x2B	; 43
     514:	71 e0       	ldi	r23, 0x01	; 1
     516:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <strcat>
     51a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <play>
     51e:	c1 e0       	ldi	r28, 0x01	; 1
     520:	d0 e0       	ldi	r29, 0x00	; 0
     522:	08 c0       	rjmp	.+16     	; 0x534 <main+0xfc>
				}
				else 
				{
					state = STAHPED;
					LCD_print(Fno.fname);
     524:	8b e2       	ldi	r24, 0x2B	; 43
     526:	91 e0       	ldi	r25, 0x01	; 1
     528:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <LCD_print>
					FifoCt = 0; // stop melody
     52c:	10 92 61 02 	sts	0x0261, r1
     530:	c2 e0       	ldi	r28, 0x02	; 2
     532:	d0 e0       	ldi	r29, 0x00	; 0
				}
			}
			/* check if button on PA2 (next) is pressed */
			if (!(PINA & (1 << PA2)))
     534:	02 99       	sbic	0x00, 2	; 0
     536:	49 c0       	rjmp	.+146    	; 0x5ca <main+0x192>
			{
				sprintf(last_wav_played, "%s", Fno.fname);
     538:	c8 01       	movw	r24, r16
     53a:	6b e2       	ldi	r22, 0x2B	; 43
     53c:	71 e0       	ldi	r23, 0x01	; 1
     53e:	0e 94 7e 10 	call	0x20fc	; 0x20fc <strcpy>
				
				if (state == STARTED)
     542:	c1 30       	cpi	r28, 0x01	; 1
     544:	d1 05       	cpc	r29, r1
     546:	29 f5       	brne	.+74     	; 0x592 <main+0x15a>
				{
					if (!pf_readdir(&Dir, &Fno) && Fno.fname[0]) /* go to next file*/
     548:	8c e3       	ldi	r24, 0x3C	; 60
     54a:	92 e0       	ldi	r25, 0x02	; 2
     54c:	62 e2       	ldi	r22, 0x22	; 34
     54e:	71 e0       	ldi	r23, 0x01	; 1
     550:	0e 94 b7 06 	call	0xd6e	; 0xd6e <pf_readdir>
     554:	89 2b       	or	r24, r25
     556:	c9 f5       	brne	.+114    	; 0x5ca <main+0x192>
     558:	80 91 2b 01 	lds	r24, 0x012B
     55c:	88 23       	and	r24, r24
     55e:	a9 f1       	breq	.+106    	; 0x5ca <main+0x192>
					{		
						if (!(Fno.fattrib & (AM_DIR|AM_HID)) && strstr(Fno.fname, "WAV")) /* filter out all the folders, hidden files and the files that are not "WAV" */
     560:	80 91 2a 01 	lds	r24, 0x012A
     564:	82 71       	andi	r24, 0x12	; 18
     566:	89 f5       	brne	.+98     	; 0x5ca <main+0x192>
     568:	8b e2       	ldi	r24, 0x2B	; 43
     56a:	91 e0       	ldi	r25, 0x01	; 1
     56c:	64 e0       	ldi	r22, 0x04	; 4
     56e:	71 e0       	ldi	r23, 0x01	; 1
     570:	0e 94 85 10 	call	0x210a	; 0x210a <strstr>
     574:	00 97       	sbiw	r24, 0x00	; 0
     576:	49 f1       	breq	.+82     	; 0x5ca <main+0x192>
						{	
							/* display the filename on the LCD */
							LCD_print(Fno.fname);
     578:	8b e2       	ldi	r24, 0x2B	; 43
     57a:	91 e0       	ldi	r25, 0x01	; 1
     57c:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <LCD_print>
							
							/* play the WAV file */
							play(strcat("wav", Fno.fname));
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	91 e0       	ldi	r25, 0x01	; 1
     584:	6b e2       	ldi	r22, 0x2B	; 43
     586:	71 e0       	ldi	r23, 0x01	; 1
     588:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <strcat>
     58c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <play>
     590:	1c c0       	rjmp	.+56     	; 0x5ca <main+0x192>
						}
					}			
				}
				else 
				{
					if (!pf_readdir(&Dir, &Fno) && Fno.fname[0]) /* go to next file*/
     592:	8c e3       	ldi	r24, 0x3C	; 60
     594:	92 e0       	ldi	r25, 0x02	; 2
     596:	62 e2       	ldi	r22, 0x22	; 34
     598:	71 e0       	ldi	r23, 0x01	; 1
     59a:	0e 94 b7 06 	call	0xd6e	; 0xd6e <pf_readdir>
     59e:	89 2b       	or	r24, r25
     5a0:	a1 f4       	brne	.+40     	; 0x5ca <main+0x192>
     5a2:	80 91 2b 01 	lds	r24, 0x012B
     5a6:	88 23       	and	r24, r24
     5a8:	81 f0       	breq	.+32     	; 0x5ca <main+0x192>
					{		
						if (!(Fno.fattrib & (AM_DIR|AM_HID)) && strstr(Fno.fname, "WAV")) /* filter out all the folders, hidden files and the files that are not "WAV" */
     5aa:	80 91 2a 01 	lds	r24, 0x012A
     5ae:	82 71       	andi	r24, 0x12	; 18
     5b0:	61 f4       	brne	.+24     	; 0x5ca <main+0x192>
     5b2:	8b e2       	ldi	r24, 0x2B	; 43
     5b4:	91 e0       	ldi	r25, 0x01	; 1
     5b6:	64 e0       	ldi	r22, 0x04	; 4
     5b8:	71 e0       	ldi	r23, 0x01	; 1
     5ba:	0e 94 85 10 	call	0x210a	; 0x210a <strstr>
     5be:	00 97       	sbiw	r24, 0x00	; 0
     5c0:	21 f0       	breq	.+8      	; 0x5ca <main+0x192>
						{	
							/* display the filename on the LCD */
							LCD_print(Fno.fname);
     5c2:	8b e2       	ldi	r24, 0x2B	; 43
     5c4:	91 e0       	ldi	r25, 0x01	; 1
     5c6:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <LCD_print>
					}			
				}
			}
			
			/* check if button on PA1 (previous) is pressed */
			if (!(PINA & (1 << PA1)))
     5ca:	01 99       	sbic	0x00, 1	; 0
     5cc:	98 cf       	rjmp	.-208    	; 0x4fe <main+0xc6>
			{
				if (state == STARTED)
     5ce:	c1 30       	cpi	r28, 0x01	; 1
     5d0:	d1 05       	cpc	r29, r1
     5d2:	a9 f4       	brne	.+42     	; 0x5fe <main+0x1c6>
				{
					if (strcmp(last_wav_played, first_wav) != 0 )
     5d4:	c8 01       	movw	r24, r16
     5d6:	b7 01       	movw	r22, r14
     5d8:	0e 94 75 10 	call	0x20ea	; 0x20ea <strcmp>
     5dc:	00 97       	sbiw	r24, 0x00	; 0
     5de:	59 f0       	breq	.+22     	; 0x5f6 <main+0x1be>
					{
						/* display the filename on the LCD */
						LCD_print(last_wav_played);
     5e0:	c8 01       	movw	r24, r16
     5e2:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <LCD_print>
						
						/* play the WAV file */
						play(strcat("wav", last_wav_played));
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	91 e0       	ldi	r25, 0x01	; 1
     5ea:	b8 01       	movw	r22, r16
     5ec:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <strcat>
     5f0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <play>
     5f4:	84 cf       	rjmp	.-248    	; 0x4fe <main+0xc6>
					}
					else 
						/* display the filename on the LCD */
						LCD_print(first_wav);
     5f6:	c7 01       	movw	r24, r14
     5f8:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <LCD_print>
     5fc:	80 cf       	rjmp	.-256    	; 0x4fe <main+0xc6>
				}
				else
					if (strcmp(last_wav_played, first_wav) != 0 )
     5fe:	c8 01       	movw	r24, r16
     600:	b7 01       	movw	r22, r14
     602:	0e 94 75 10 	call	0x20ea	; 0x20ea <strcmp>
     606:	00 97       	sbiw	r24, 0x00	; 0
     608:	09 f4       	brne	.+2      	; 0x60c <main+0x1d4>
     60a:	77 cf       	rjmp	.-274    	; 0x4fa <main+0xc2>
					/* display the filename on the LCD */
						LCD_print(last_wav_played);
     60c:	c8 01       	movw	r24, r16
     60e:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <LCD_print>
     612:	73 cf       	rjmp	.-282    	; 0x4fa <main+0xc2>
			}
		}
	}
	
	return 1;
}
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	cd b7       	in	r28, 0x3d	; 61
     61a:	de b7       	in	r29, 0x3e	; 62
     61c:	e6 e0       	ldi	r30, 0x06	; 6
     61e:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__epilogue_restores__+0x18>

00000622 <__vector_9>:
		
	}
}

ISR(TIMER2_COMPA_vect)
{
     622:	1f 92       	push	r1
     624:	0f 92       	push	r0
     626:	0f b6       	in	r0, 0x3f	; 63
     628:	0f 92       	push	r0
     62a:	11 24       	eor	r1, r1
     62c:	0f 93       	push	r16
     62e:	1f 93       	push	r17
     630:	2f 93       	push	r18
     632:	3f 93       	push	r19
     634:	4f 93       	push	r20
     636:	5f 93       	push	r21
     638:	6f 93       	push	r22
     63a:	7f 93       	push	r23
     63c:	8f 93       	push	r24
     63e:	9f 93       	push	r25
     640:	af 93       	push	r26
     642:	bf 93       	push	r27
     644:	ef 93       	push	r30
     646:	ff 93       	push	r31
	miliseconds++;
     648:	80 91 3a 02 	lds	r24, 0x023A
     64c:	90 91 3b 02 	lds	r25, 0x023B
     650:	01 96       	adiw	r24, 0x01	; 1
     652:	90 93 3b 02 	sts	0x023B, r25
     656:	80 93 3a 02 	sts	0x023A, r24
	if(miliseconds == 1000)
     65a:	88 5e       	subi	r24, 0xE8	; 232
     65c:	93 40       	sbci	r25, 0x03	; 3
     65e:	09 f0       	breq	.+2      	; 0x662 <__vector_9+0x40>
     660:	52 c0       	rjmp	.+164    	; 0x706 <__vector_9+0xe4>
	{
		miliseconds = 0;
     662:	10 92 3b 02 	sts	0x023B, r1
     666:	10 92 3a 02 	sts	0x023A, r1
		
		seconds++;
     66a:	80 91 4c 02 	lds	r24, 0x024C
     66e:	8f 5f       	subi	r24, 0xFF	; 255
     670:	80 93 4c 02 	sts	0x024C, r24
		
		if(seconds == 60) 
     674:	8c 33       	cpi	r24, 0x3C	; 60
     676:	a1 f4       	brne	.+40     	; 0x6a0 <__vector_9+0x7e>
		{
			seconds = 0;
     678:	10 92 4c 02 	sts	0x024C, r1
			minutes++;
     67c:	80 91 62 02 	lds	r24, 0x0262
     680:	8f 5f       	subi	r24, 0xFF	; 255
     682:	80 93 62 02 	sts	0x0262, r24
			if(minutes == 60)
     686:	8c 33       	cpi	r24, 0x3C	; 60
     688:	59 f4       	brne	.+22     	; 0x6a0 <__vector_9+0x7e>
			{
				minutes = 0;
     68a:	10 92 62 02 	sts	0x0262, r1
				hours++;
     68e:	80 91 63 02 	lds	r24, 0x0263
     692:	8f 5f       	subi	r24, 0xFF	; 255
     694:	80 93 63 02 	sts	0x0263, r24
				if(hours == 24) hours = 0;
     698:	88 31       	cpi	r24, 0x18	; 24
     69a:	11 f4       	brne	.+4      	; 0x6a0 <__vector_9+0x7e>
     69c:	10 92 63 02 	sts	0x0263, r1
			}
		}
		
		sprintf(time_string, "%02d:%02d:%02d", hours, minutes, seconds);
     6a0:	0d e4       	ldi	r16, 0x4D	; 77
     6a2:	12 e0       	ldi	r17, 0x02	; 2
     6a4:	8d b7       	in	r24, 0x3d	; 61
     6a6:	9e b7       	in	r25, 0x3e	; 62
     6a8:	0a 97       	sbiw	r24, 0x0a	; 10
     6aa:	0f b6       	in	r0, 0x3f	; 63
     6ac:	f8 94       	cli
     6ae:	9e bf       	out	0x3e, r25	; 62
     6b0:	0f be       	out	0x3f, r0	; 63
     6b2:	8d bf       	out	0x3d, r24	; 61
     6b4:	ed b7       	in	r30, 0x3d	; 61
     6b6:	fe b7       	in	r31, 0x3e	; 62
     6b8:	31 96       	adiw	r30, 0x01	; 1
     6ba:	ad b7       	in	r26, 0x3d	; 61
     6bc:	be b7       	in	r27, 0x3e	; 62
     6be:	12 96       	adiw	r26, 0x02	; 2
     6c0:	1c 93       	st	X, r17
     6c2:	0e 93       	st	-X, r16
     6c4:	11 97       	sbiw	r26, 0x01	; 1
     6c6:	88 e0       	ldi	r24, 0x08	; 8
     6c8:	91 e0       	ldi	r25, 0x01	; 1
     6ca:	93 83       	std	Z+3, r25	; 0x03
     6cc:	82 83       	std	Z+2, r24	; 0x02
     6ce:	80 91 63 02 	lds	r24, 0x0263
     6d2:	84 83       	std	Z+4, r24	; 0x04
     6d4:	15 82       	std	Z+5, r1	; 0x05
     6d6:	80 91 62 02 	lds	r24, 0x0262
     6da:	86 83       	std	Z+6, r24	; 0x06
     6dc:	17 82       	std	Z+7, r1	; 0x07
     6de:	80 91 4c 02 	lds	r24, 0x024C
     6e2:	80 87       	std	Z+8, r24	; 0x08
     6e4:	11 86       	std	Z+9, r1	; 0x09
     6e6:	0e 94 9f 10 	call	0x213e	; 0x213e <sprintf>
		LCD_writeInstruction(LCD_INSTR_nextLine);
     6ea:	8d b7       	in	r24, 0x3d	; 61
     6ec:	9e b7       	in	r25, 0x3e	; 62
     6ee:	0a 96       	adiw	r24, 0x0a	; 10
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	f8 94       	cli
     6f4:	9e bf       	out	0x3e, r25	; 62
     6f6:	0f be       	out	0x3f, r0	; 63
     6f8:	8d bf       	out	0x3d, r24	; 61
     6fa:	80 ec       	ldi	r24, 0xC0	; 192
     6fc:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_writeInstruction>
		LCD_print(time_string);	
     700:	c8 01       	movw	r24, r16
     702:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <LCD_print>
	}
}
     706:	ff 91       	pop	r31
     708:	ef 91       	pop	r30
     70a:	bf 91       	pop	r27
     70c:	af 91       	pop	r26
     70e:	9f 91       	pop	r25
     710:	8f 91       	pop	r24
     712:	7f 91       	pop	r23
     714:	6f 91       	pop	r22
     716:	5f 91       	pop	r21
     718:	4f 91       	pop	r20
     71a:	3f 91       	pop	r19
     71c:	2f 91       	pop	r18
     71e:	1f 91       	pop	r17
     720:	0f 91       	pop	r16
     722:	0f 90       	pop	r0
     724:	0f be       	out	0x3f, r0	; 63
     726:	0f 90       	pop	r0
     728:	1f 90       	pop	r1
     72a:	18 95       	reti

0000072c <dir_rewind>:

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
     72c:	a0 e0       	ldi	r26, 0x00	; 0
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 3d 10 	jmp	0x207a	; 0x207a <__prologue_saves__+0x14>
     738:	6c 01       	movw	r12, r24
	CLUST clst;
	FATFS *fs = FatFs;
     73a:	c0 91 1b 01 	lds	r28, 0x011B
     73e:	d0 91 1c 01 	lds	r29, 0x011C


	dj->index = 0;
     742:	fc 01       	movw	r30, r24
     744:	11 82       	std	Z+1, r1	; 0x01
     746:	10 82       	st	Z, r1
	clst = dj->sclust;
     748:	24 81       	ldd	r18, Z+4	; 0x04
     74a:	35 81       	ldd	r19, Z+5	; 0x05
     74c:	46 81       	ldd	r20, Z+6	; 0x06
     74e:	57 81       	ldd	r21, Z+7	; 0x07
	if (clst == 1 || clst >= fs->max_clust)	/* Check start cluster range */
     750:	21 30       	cpi	r18, 0x01	; 1
     752:	31 05       	cpc	r19, r1
     754:	41 05       	cpc	r20, r1
     756:	51 05       	cpc	r21, r1
     758:	09 f4       	brne	.+2      	; 0x75c <dir_rewind+0x30>
     75a:	5c c0       	rjmp	.+184    	; 0x814 <dir_rewind+0xe8>
     75c:	88 85       	ldd	r24, Y+8	; 0x08
     75e:	99 85       	ldd	r25, Y+9	; 0x09
     760:	aa 85       	ldd	r26, Y+10	; 0x0a
     762:	bb 85       	ldd	r27, Y+11	; 0x0b
     764:	28 17       	cp	r18, r24
     766:	39 07       	cpc	r19, r25
     768:	4a 07       	cpc	r20, r26
     76a:	5b 07       	cpc	r21, r27
     76c:	08 f0       	brcs	.+2      	; 0x770 <dir_rewind+0x44>
     76e:	52 c0       	rjmp	.+164    	; 0x814 <dir_rewind+0xe8>
		return FR_DISK_ERR;
#if _FS_FAT32
	if (!clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
     770:	21 15       	cp	r18, r1
     772:	31 05       	cpc	r19, r1
     774:	41 05       	cpc	r20, r1
     776:	51 05       	cpc	r21, r1
     778:	39 f4       	brne	.+14     	; 0x788 <dir_rewind+0x5c>
     77a:	88 81       	ld	r24, Y
     77c:	83 30       	cpi	r24, 0x03	; 3
     77e:	21 f4       	brne	.+8      	; 0x788 <dir_rewind+0x5c>
		clst = fs->dirbase;
     780:	28 89       	ldd	r18, Y+16	; 0x10
     782:	39 89       	ldd	r19, Y+17	; 0x11
     784:	4a 89       	ldd	r20, Y+18	; 0x12
     786:	5b 89       	ldd	r21, Y+19	; 0x13
#endif
	dj->clust = clst;						/* Current cluster */
     788:	f6 01       	movw	r30, r12
     78a:	20 87       	std	Z+8, r18	; 0x08
     78c:	31 87       	std	Z+9, r19	; 0x09
     78e:	42 87       	std	Z+10, r20	; 0x0a
     790:	53 87       	std	Z+11, r21	; 0x0b
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     792:	21 15       	cp	r18, r1
     794:	31 05       	cpc	r19, r1
     796:	41 05       	cpc	r20, r1
     798:	51 05       	cpc	r21, r1
     79a:	81 f1       	breq	.+96     	; 0x7fc <dir_rewind+0xd0>
)
{
	FATFS *fs = FatFs;


	clst -= 2;
     79c:	8e ef       	ldi	r24, 0xFE	; 254
     79e:	e8 2e       	mov	r14, r24
     7a0:	8f ef       	ldi	r24, 0xFF	; 255
     7a2:	f8 2e       	mov	r15, r24
     7a4:	8f ef       	ldi	r24, 0xFF	; 255
     7a6:	08 2f       	mov	r16, r24
     7a8:	8f ef       	ldi	r24, 0xFF	; 255
     7aa:	18 2f       	mov	r17, r24
     7ac:	e2 0e       	add	r14, r18
     7ae:	f3 1e       	adc	r15, r19
     7b0:	04 1f       	adc	r16, r20
     7b2:	15 1f       	adc	r17, r21
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     7b4:	88 85       	ldd	r24, Y+8	; 0x08
     7b6:	99 85       	ldd	r25, Y+9	; 0x09
     7b8:	aa 85       	ldd	r26, Y+10	; 0x0a
     7ba:	bb 85       	ldd	r27, Y+11	; 0x0b
     7bc:	02 97       	sbiw	r24, 0x02	; 2
     7be:	a1 09       	sbc	r26, r1
     7c0:	b1 09       	sbc	r27, r1
     7c2:	e8 16       	cp	r14, r24
     7c4:	f9 06       	cpc	r15, r25
     7c6:	0a 07       	cpc	r16, r26
     7c8:	1b 07       	cpc	r17, r27
     7ca:	28 f0       	brcs	.+10     	; 0x7d6 <dir_rewind+0xaa>
     7cc:	20 e0       	ldi	r18, 0x00	; 0
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	40 e0       	ldi	r20, 0x00	; 0
     7d2:	50 e0       	ldi	r21, 0x00	; 0
     7d4:	17 c0       	rjmp	.+46     	; 0x804 <dir_rewind+0xd8>
	return (DWORD)clst * fs->csize + fs->database;
     7d6:	29 81       	ldd	r18, Y+1	; 0x01
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e0       	ldi	r21, 0x00	; 0
     7de:	c8 01       	movw	r24, r16
     7e0:	b7 01       	movw	r22, r14
     7e2:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__mulsi3>
     7e6:	9b 01       	movw	r18, r22
     7e8:	ac 01       	movw	r20, r24
     7ea:	8c 89       	ldd	r24, Y+20	; 0x14
     7ec:	9d 89       	ldd	r25, Y+21	; 0x15
     7ee:	ae 89       	ldd	r26, Y+22	; 0x16
     7f0:	bf 89       	ldd	r27, Y+23	; 0x17
     7f2:	28 0f       	add	r18, r24
     7f4:	39 1f       	adc	r19, r25
     7f6:	4a 1f       	adc	r20, r26
     7f8:	5b 1f       	adc	r21, r27
     7fa:	04 c0       	rjmp	.+8      	; 0x804 <dir_rewind+0xd8>
#if _FS_FAT32
	if (!clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = fs->dirbase;
#endif
	dj->clust = clst;						/* Current cluster */
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     7fc:	28 89       	ldd	r18, Y+16	; 0x10
     7fe:	39 89       	ldd	r19, Y+17	; 0x11
     800:	4a 89       	ldd	r20, Y+18	; 0x12
     802:	5b 89       	ldd	r21, Y+19	; 0x13
     804:	f6 01       	movw	r30, r12
     806:	24 87       	std	Z+12, r18	; 0x0c
     808:	35 87       	std	Z+13, r19	; 0x0d
     80a:	46 87       	std	Z+14, r20	; 0x0e
     80c:	57 87       	std	Z+15, r21	; 0x0f
     80e:	20 e0       	ldi	r18, 0x00	; 0
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	02 c0       	rjmp	.+4      	; 0x818 <dir_rewind+0xec>

	return FR_OK;	/* Seek succeeded */
     814:	21 e0       	ldi	r18, 0x01	; 1
     816:	30 e0       	ldi	r19, 0x00	; 0
}
     818:	c9 01       	movw	r24, r18
     81a:	cd b7       	in	r28, 0x3d	; 61
     81c:	de b7       	in	r29, 0x3e	; 62
     81e:	e8 e0       	ldi	r30, 0x08	; 8
     820:	0c 94 59 10 	jmp	0x20b2	; 0x20b2 <__epilogue_restores__+0x14>

00000824 <get_fat>:

static
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
     824:	a4 e0       	ldi	r26, 0x04	; 4
     826:	b0 e0       	ldi	r27, 0x00	; 0
     828:	e8 e1       	ldi	r30, 0x18	; 24
     82a:	f4 e0       	ldi	r31, 0x04	; 4
     82c:	0c 94 37 10 	jmp	0x206e	; 0x206e <__prologue_saves__+0x8>
     830:	4b 01       	movw	r8, r22
     832:	5c 01       	movw	r10, r24
	WORD wc, bc, ofs;
	BYTE buf[4];
	FATFS *fs = FatFs;
     834:	60 90 1b 01 	lds	r6, 0x011B
     838:	70 90 1c 01 	lds	r7, 0x011C


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
     83c:	82 e0       	ldi	r24, 0x02	; 2
     83e:	88 16       	cp	r8, r24
     840:	91 04       	cpc	r9, r1
     842:	a1 04       	cpc	r10, r1
     844:	b1 04       	cpc	r11, r1
     846:	08 f4       	brcc	.+2      	; 0x84a <get_fat+0x26>
     848:	b4 c0       	rjmp	.+360    	; 0x9b2 <__stack+0xb3>
     84a:	f3 01       	movw	r30, r6
     84c:	80 85       	ldd	r24, Z+8	; 0x08
     84e:	91 85       	ldd	r25, Z+9	; 0x09
     850:	a2 85       	ldd	r26, Z+10	; 0x0a
     852:	b3 85       	ldd	r27, Z+11	; 0x0b
     854:	88 16       	cp	r8, r24
     856:	99 06       	cpc	r9, r25
     858:	aa 06       	cpc	r10, r26
     85a:	bb 06       	cpc	r11, r27
     85c:	08 f0       	brcs	.+2      	; 0x860 <get_fat+0x3c>
     85e:	a9 c0       	rjmp	.+338    	; 0x9b2 <__stack+0xb3>
		return 1;

	switch (fs->fs_type) {
     860:	80 81       	ld	r24, Z
     862:	82 30       	cpi	r24, 0x02	; 2
     864:	09 f4       	brne	.+2      	; 0x868 <get_fat+0x44>
     866:	5f c0       	rjmp	.+190    	; 0x926 <__stack+0x27>
     868:	83 30       	cpi	r24, 0x03	; 3
     86a:	09 f4       	brne	.+2      	; 0x86e <get_fat+0x4a>
     86c:	7b c0       	rjmp	.+246    	; 0x964 <__stack+0x65>
     86e:	81 30       	cpi	r24, 0x01	; 1
     870:	09 f0       	breq	.+2      	; 0x874 <get_fat+0x50>
     872:	9f c0       	rjmp	.+318    	; 0x9b2 <__stack+0xb3>
	case FS_FAT12 :
		bc = (WORD)clst; bc += bc / 2;
     874:	c4 01       	movw	r24, r8
     876:	96 95       	lsr	r25
     878:	87 95       	ror	r24
     87a:	88 0d       	add	r24, r8
     87c:	99 1d       	adc	r25, r9
		ofs = bc % 512; bc /= 512;
     87e:	9c 01       	movw	r18, r24
     880:	31 70       	andi	r19, 0x01	; 1
     882:	89 2f       	mov	r24, r25
     884:	99 27       	eor	r25, r25
     886:	86 95       	lsr	r24
     888:	6c 01       	movw	r12, r24
     88a:	ee 24       	eor	r14, r14
     88c:	ff 24       	eor	r15, r15
     88e:	f3 01       	movw	r30, r6
     890:	44 85       	ldd	r20, Z+12	; 0x0c
     892:	55 85       	ldd	r21, Z+13	; 0x0d
     894:	66 85       	ldd	r22, Z+14	; 0x0e
     896:	77 85       	ldd	r23, Z+15	; 0x0f
     898:	ce 01       	movw	r24, r28
     89a:	01 96       	adiw	r24, 0x01	; 1
		if (ofs != 511) {
     89c:	f1 e0       	ldi	r31, 0x01	; 1
     89e:	2f 3f       	cpi	r18, 0xFF	; 255
     8a0:	3f 07       	cpc	r19, r31
     8a2:	49 f0       	breq	.+18     	; 0x8b6 <get_fat+0x92>
			if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
     8a4:	c4 0e       	add	r12, r20
     8a6:	d5 1e       	adc	r13, r21
     8a8:	e6 1e       	adc	r14, r22
     8aa:	f7 1e       	adc	r15, r23
     8ac:	b7 01       	movw	r22, r14
     8ae:	a6 01       	movw	r20, r12
     8b0:	02 e0       	ldi	r16, 0x02	; 2
     8b2:	10 e0       	ldi	r17, 0x00	; 0
     8b4:	1e c0       	rjmp	.+60     	; 0x8f2 <get_fat+0xce>
		} else {
			if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
     8b6:	4c 0d       	add	r20, r12
     8b8:	5d 1d       	adc	r21, r13
     8ba:	6e 1d       	adc	r22, r14
     8bc:	7f 1d       	adc	r23, r15
     8be:	2f ef       	ldi	r18, 0xFF	; 255
     8c0:	31 e0       	ldi	r19, 0x01	; 1
     8c2:	01 e0       	ldi	r16, 0x01	; 1
     8c4:	10 e0       	ldi	r17, 0x00	; 0
     8c6:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <disk_readp>
     8ca:	89 2b       	or	r24, r25
     8cc:	09 f0       	breq	.+2      	; 0x8d0 <get_fat+0xac>
     8ce:	71 c0       	rjmp	.+226    	; 0x9b2 <__stack+0xb3>
			if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
     8d0:	f3 01       	movw	r30, r6
     8d2:	44 85       	ldd	r20, Z+12	; 0x0c
     8d4:	55 85       	ldd	r21, Z+13	; 0x0d
     8d6:	66 85       	ldd	r22, Z+14	; 0x0e
     8d8:	77 85       	ldd	r23, Z+15	; 0x0f
     8da:	4f 5f       	subi	r20, 0xFF	; 255
     8dc:	5f 4f       	sbci	r21, 0xFF	; 255
     8de:	6f 4f       	sbci	r22, 0xFF	; 255
     8e0:	7f 4f       	sbci	r23, 0xFF	; 255
     8e2:	4c 0d       	add	r20, r12
     8e4:	5d 1d       	adc	r21, r13
     8e6:	6e 1d       	adc	r22, r14
     8e8:	7f 1d       	adc	r23, r15
     8ea:	ce 01       	movw	r24, r28
     8ec:	02 96       	adiw	r24, 0x02	; 2
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <disk_readp>
     8f6:	89 2b       	or	r24, r25
     8f8:	09 f0       	breq	.+2      	; 0x8fc <get_fat+0xd8>
     8fa:	5b c0       	rjmp	.+182    	; 0x9b2 <__stack+0xb3>
		}
		wc = LD_WORD(buf);
     8fc:	69 81       	ldd	r22, Y+1	; 0x01
     8fe:	7a 81       	ldd	r23, Y+2	; 0x02
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
     900:	c4 01       	movw	r24, r8
     902:	81 70       	andi	r24, 0x01	; 1
     904:	90 70       	andi	r25, 0x00	; 0
     906:	89 2b       	or	r24, r25
     908:	39 f0       	breq	.+14     	; 0x918 <__stack+0x19>
     90a:	a4 e0       	ldi	r26, 0x04	; 4
     90c:	76 95       	lsr	r23
     90e:	67 95       	ror	r22
     910:	aa 95       	dec	r26
     912:	e1 f7       	brne	.-8      	; 0x90c <__stack+0xd>
     914:	9b 01       	movw	r18, r22
     916:	23 c0       	rjmp	.+70     	; 0x95e <__stack+0x5f>
     918:	9b 01       	movw	r18, r22
     91a:	40 e0       	ldi	r20, 0x00	; 0
     91c:	50 e0       	ldi	r21, 0x00	; 0
     91e:	3f 70       	andi	r19, 0x0F	; 15
     920:	40 70       	andi	r20, 0x00	; 0
     922:	50 70       	andi	r21, 0x00	; 0
     924:	4a c0       	rjmp	.+148    	; 0x9ba <__stack+0xbb>

	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, (WORD)(((WORD)clst % 256) * 2), 2)) break;
     926:	77 27       	eor	r23, r23
     928:	6b 2d       	mov	r22, r11
     92a:	5a 2d       	mov	r21, r10
     92c:	49 2d       	mov	r20, r9
     92e:	f3 01       	movw	r30, r6
     930:	84 85       	ldd	r24, Z+12	; 0x0c
     932:	95 85       	ldd	r25, Z+13	; 0x0d
     934:	a6 85       	ldd	r26, Z+14	; 0x0e
     936:	b7 85       	ldd	r27, Z+15	; 0x0f
     938:	48 0f       	add	r20, r24
     93a:	59 1f       	adc	r21, r25
     93c:	6a 1f       	adc	r22, r26
     93e:	7b 1f       	adc	r23, r27
     940:	94 01       	movw	r18, r8
     942:	30 70       	andi	r19, 0x00	; 0
     944:	22 0f       	add	r18, r18
     946:	33 1f       	adc	r19, r19
     948:	ce 01       	movw	r24, r28
     94a:	01 96       	adiw	r24, 0x01	; 1
     94c:	02 e0       	ldi	r16, 0x02	; 2
     94e:	10 e0       	ldi	r17, 0x00	; 0
     950:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <disk_readp>
     954:	89 2b       	or	r24, r25
     956:	69 f5       	brne	.+90     	; 0x9b2 <__stack+0xb3>
		return LD_WORD(buf);
     958:	89 81       	ldd	r24, Y+1	; 0x01
     95a:	9a 81       	ldd	r25, Y+2	; 0x02
     95c:	9c 01       	movw	r18, r24
     95e:	40 e0       	ldi	r20, 0x00	; 0
     960:	50 e0       	ldi	r21, 0x00	; 0
     962:	2b c0       	rjmp	.+86     	; 0x9ba <__stack+0xbb>
#if _FS_FAT32
	case FS_FAT32 :
		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
     964:	b5 01       	movw	r22, r10
     966:	a4 01       	movw	r20, r8
     968:	27 e0       	ldi	r18, 0x07	; 7
     96a:	76 95       	lsr	r23
     96c:	67 95       	ror	r22
     96e:	57 95       	ror	r21
     970:	47 95       	ror	r20
     972:	2a 95       	dec	r18
     974:	d1 f7       	brne	.-12     	; 0x96a <__stack+0x6b>
     976:	f3 01       	movw	r30, r6
     978:	84 85       	ldd	r24, Z+12	; 0x0c
     97a:	95 85       	ldd	r25, Z+13	; 0x0d
     97c:	a6 85       	ldd	r26, Z+14	; 0x0e
     97e:	b7 85       	ldd	r27, Z+15	; 0x0f
     980:	48 0f       	add	r20, r24
     982:	59 1f       	adc	r21, r25
     984:	6a 1f       	adc	r22, r26
     986:	7b 1f       	adc	r23, r27
     988:	94 01       	movw	r18, r8
     98a:	2f 77       	andi	r18, 0x7F	; 127
     98c:	30 70       	andi	r19, 0x00	; 0
     98e:	22 0f       	add	r18, r18
     990:	33 1f       	adc	r19, r19
     992:	22 0f       	add	r18, r18
     994:	33 1f       	adc	r19, r19
     996:	ce 01       	movw	r24, r28
     998:	01 96       	adiw	r24, 0x01	; 1
     99a:	04 e0       	ldi	r16, 0x04	; 4
     99c:	10 e0       	ldi	r17, 0x00	; 0
     99e:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <disk_readp>
     9a2:	89 2b       	or	r24, r25
     9a4:	31 f4       	brne	.+12     	; 0x9b2 <__stack+0xb3>
		return LD_DWORD(buf) & 0x0FFFFFFF;
     9a6:	29 81       	ldd	r18, Y+1	; 0x01
     9a8:	3a 81       	ldd	r19, Y+2	; 0x02
     9aa:	4b 81       	ldd	r20, Y+3	; 0x03
     9ac:	5c 81       	ldd	r21, Y+4	; 0x04
     9ae:	5f 70       	andi	r21, 0x0F	; 15
     9b0:	04 c0       	rjmp	.+8      	; 0x9ba <__stack+0xbb>
     9b2:	21 e0       	ldi	r18, 0x01	; 1
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	40 e0       	ldi	r20, 0x00	; 0
     9b8:	50 e0       	ldi	r21, 0x00	; 0
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
}
     9ba:	b9 01       	movw	r22, r18
     9bc:	ca 01       	movw	r24, r20
     9be:	24 96       	adiw	r28, 0x04	; 4
     9c0:	ee e0       	ldi	r30, 0x0E	; 14
     9c2:	0c 94 53 10 	jmp	0x20a6	; 0x20a6 <__epilogue_restores__+0x8>

000009c6 <dir_next>:

static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table */
	DIR *dj			/* Pointer to directory object */
)
{
     9c6:	a0 e0       	ldi	r26, 0x00	; 0
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 3b 10 	jmp	0x2076	; 0x2076 <__prologue_saves__+0x10>
     9d2:	5c 01       	movw	r10, r24
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;
     9d4:	c0 91 1b 01 	lds	r28, 0x011B
     9d8:	d0 91 1c 01 	lds	r29, 0x011C


	i = dj->index + 1;
     9dc:	fc 01       	movw	r30, r24
     9de:	c0 80       	ld	r12, Z
     9e0:	d1 80       	ldd	r13, Z+1	; 0x01
     9e2:	08 94       	sec
     9e4:	c1 1c       	adc	r12, r1
     9e6:	d1 1c       	adc	r13, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
     9e8:	c1 14       	cp	r12, r1
     9ea:	d1 04       	cpc	r13, r1
     9ec:	09 f4       	brne	.+2      	; 0x9f0 <dir_next+0x2a>
     9ee:	91 c0       	rjmp	.+290    	; 0xb12 <dir_next+0x14c>
     9f0:	24 85       	ldd	r18, Z+12	; 0x0c
     9f2:	35 85       	ldd	r19, Z+13	; 0x0d
     9f4:	46 85       	ldd	r20, Z+14	; 0x0e
     9f6:	57 85       	ldd	r21, Z+15	; 0x0f
     9f8:	21 15       	cp	r18, r1
     9fa:	31 05       	cpc	r19, r1
     9fc:	41 05       	cpc	r20, r1
     9fe:	51 05       	cpc	r21, r1
     a00:	09 f4       	brne	.+2      	; 0xa04 <dir_next+0x3e>
     a02:	87 c0       	rjmp	.+270    	; 0xb12 <dir_next+0x14c>
		return FR_NO_FILE;

	if (!(i & (16-1))) {	/* Sector changed? */
     a04:	c6 01       	movw	r24, r12
     a06:	8f 70       	andi	r24, 0x0F	; 15
     a08:	90 70       	andi	r25, 0x00	; 0
     a0a:	89 2b       	or	r24, r25
     a0c:	09 f0       	breq	.+2      	; 0xa10 <dir_next+0x4a>
     a0e:	7b c0       	rjmp	.+246    	; 0xb06 <dir_next+0x140>
		dj->sect++;			/* Next sector */
     a10:	2f 5f       	subi	r18, 0xFF	; 255
     a12:	3f 4f       	sbci	r19, 0xFF	; 255
     a14:	4f 4f       	sbci	r20, 0xFF	; 255
     a16:	5f 4f       	sbci	r21, 0xFF	; 255
     a18:	24 87       	std	Z+12, r18	; 0x0c
     a1a:	35 87       	std	Z+13, r19	; 0x0d
     a1c:	46 87       	std	Z+14, r20	; 0x0e
     a1e:	57 87       	std	Z+15, r21	; 0x0f

		if (dj->clust == 0) {	/* Static table */
     a20:	40 85       	ldd	r20, Z+8	; 0x08
     a22:	51 85       	ldd	r21, Z+9	; 0x09
     a24:	62 85       	ldd	r22, Z+10	; 0x0a
     a26:	73 85       	ldd	r23, Z+11	; 0x0b
     a28:	41 15       	cp	r20, r1
     a2a:	51 05       	cpc	r21, r1
     a2c:	61 05       	cpc	r22, r1
     a2e:	71 05       	cpc	r23, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <dir_next+0x7a>
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
     a32:	8c 81       	ldd	r24, Y+4	; 0x04
     a34:	9d 81       	ldd	r25, Y+5	; 0x05
     a36:	c8 16       	cp	r12, r24
     a38:	d9 06       	cpc	r13, r25
     a3a:	08 f4       	brcc	.+2      	; 0xa3e <dir_next+0x78>
     a3c:	64 c0       	rjmp	.+200    	; 0xb06 <dir_next+0x140>
     a3e:	69 c0       	rjmp	.+210    	; 0xb12 <dir_next+0x14c>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
     a40:	89 81       	ldd	r24, Y+1	; 0x01
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	01 97       	sbiw	r24, 0x01	; 1
     a46:	96 01       	movw	r18, r12
     a48:	e4 e0       	ldi	r30, 0x04	; 4
     a4a:	36 95       	lsr	r19
     a4c:	27 95       	ror	r18
     a4e:	ea 95       	dec	r30
     a50:	e1 f7       	brne	.-8      	; 0xa4a <dir_next+0x84>
     a52:	82 23       	and	r24, r18
     a54:	93 23       	and	r25, r19
     a56:	89 2b       	or	r24, r25
     a58:	09 f0       	breq	.+2      	; 0xa5c <dir_next+0x96>
     a5a:	55 c0       	rjmp	.+170    	; 0xb06 <dir_next+0x140>
				clst = get_fat(dj->clust);		/* Get next cluster */
     a5c:	cb 01       	movw	r24, r22
     a5e:	ba 01       	movw	r22, r20
     a60:	0e 94 12 04 	call	0x824	; 0x824 <get_fat>
     a64:	9b 01       	movw	r18, r22
     a66:	ac 01       	movw	r20, r24
				if (clst <= 1) return FR_DISK_ERR;
     a68:	62 30       	cpi	r22, 0x02	; 2
     a6a:	71 05       	cpc	r23, r1
     a6c:	81 05       	cpc	r24, r1
     a6e:	91 05       	cpc	r25, r1
     a70:	18 f4       	brcc	.+6      	; 0xa78 <dir_next+0xb2>
     a72:	21 e0       	ldi	r18, 0x01	; 1
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	4f c0       	rjmp	.+158    	; 0xb16 <dir_next+0x150>
				if (clst >= fs->max_clust)		/* When it reached end of dynamic table */
     a78:	88 85       	ldd	r24, Y+8	; 0x08
     a7a:	99 85       	ldd	r25, Y+9	; 0x09
     a7c:	aa 85       	ldd	r26, Y+10	; 0x0a
     a7e:	bb 85       	ldd	r27, Y+11	; 0x0b
     a80:	28 17       	cp	r18, r24
     a82:	39 07       	cpc	r19, r25
     a84:	4a 07       	cpc	r20, r26
     a86:	5b 07       	cpc	r21, r27
     a88:	08 f0       	brcs	.+2      	; 0xa8c <dir_next+0xc6>
     a8a:	43 c0       	rjmp	.+134    	; 0xb12 <dir_next+0x14c>
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
     a8c:	f5 01       	movw	r30, r10
     a8e:	20 87       	std	Z+8, r18	; 0x08
     a90:	31 87       	std	Z+9, r19	; 0x09
     a92:	42 87       	std	Z+10, r20	; 0x0a
     a94:	53 87       	std	Z+11, r21	; 0x0b
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
     a96:	c0 91 1b 01 	lds	r28, 0x011B
     a9a:	d0 91 1c 01 	lds	r29, 0x011C


	clst -= 2;
     a9e:	8e ef       	ldi	r24, 0xFE	; 254
     aa0:	e8 2e       	mov	r14, r24
     aa2:	8f ef       	ldi	r24, 0xFF	; 255
     aa4:	f8 2e       	mov	r15, r24
     aa6:	8f ef       	ldi	r24, 0xFF	; 255
     aa8:	08 2f       	mov	r16, r24
     aaa:	8f ef       	ldi	r24, 0xFF	; 255
     aac:	18 2f       	mov	r17, r24
     aae:	e2 0e       	add	r14, r18
     ab0:	f3 1e       	adc	r15, r19
     ab2:	04 1f       	adc	r16, r20
     ab4:	15 1f       	adc	r17, r21
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     ab6:	88 85       	ldd	r24, Y+8	; 0x08
     ab8:	99 85       	ldd	r25, Y+9	; 0x09
     aba:	aa 85       	ldd	r26, Y+10	; 0x0a
     abc:	bb 85       	ldd	r27, Y+11	; 0x0b
     abe:	02 97       	sbiw	r24, 0x02	; 2
     ac0:	a1 09       	sbc	r26, r1
     ac2:	b1 09       	sbc	r27, r1
     ac4:	e8 16       	cp	r14, r24
     ac6:	f9 06       	cpc	r15, r25
     ac8:	0a 07       	cpc	r16, r26
     aca:	1b 07       	cpc	r17, r27
     acc:	28 f0       	brcs	.+10     	; 0xad8 <dir_next+0x112>
     ace:	20 e0       	ldi	r18, 0x00	; 0
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	40 e0       	ldi	r20, 0x00	; 0
     ad4:	50 e0       	ldi	r21, 0x00	; 0
     ad6:	12 c0       	rjmp	.+36     	; 0xafc <dir_next+0x136>
	return (DWORD)clst * fs->csize + fs->database;
     ad8:	29 81       	ldd	r18, Y+1	; 0x01
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	40 e0       	ldi	r20, 0x00	; 0
     ade:	50 e0       	ldi	r21, 0x00	; 0
     ae0:	c8 01       	movw	r24, r16
     ae2:	b7 01       	movw	r22, r14
     ae4:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__mulsi3>
     ae8:	9b 01       	movw	r18, r22
     aea:	ac 01       	movw	r20, r24
     aec:	8c 89       	ldd	r24, Y+20	; 0x14
     aee:	9d 89       	ldd	r25, Y+21	; 0x15
     af0:	ae 89       	ldd	r26, Y+22	; 0x16
     af2:	bf 89       	ldd	r27, Y+23	; 0x17
     af4:	28 0f       	add	r18, r24
     af6:	39 1f       	adc	r19, r25
     af8:	4a 1f       	adc	r20, r26
     afa:	5b 1f       	adc	r21, r27
				clst = get_fat(dj->clust);		/* Get next cluster */
				if (clst <= 1) return FR_DISK_ERR;
				if (clst >= fs->max_clust)		/* When it reached end of dynamic table */
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(clst);
     afc:	f5 01       	movw	r30, r10
     afe:	24 87       	std	Z+12, r18	; 0x0c
     b00:	35 87       	std	Z+13, r19	; 0x0d
     b02:	46 87       	std	Z+14, r20	; 0x0e
     b04:	57 87       	std	Z+15, r21	; 0x0f
			}
		}
	}

	dj->index = i;
     b06:	f5 01       	movw	r30, r10
     b08:	d1 82       	std	Z+1, r13	; 0x01
     b0a:	c0 82       	st	Z, r12
     b0c:	20 e0       	ldi	r18, 0x00	; 0
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	02 c0       	rjmp	.+4      	; 0xb16 <dir_next+0x150>

	return FR_OK;
     b12:	23 e0       	ldi	r18, 0x03	; 3
     b14:	30 e0       	ldi	r19, 0x00	; 0
}
     b16:	c9 01       	movw	r24, r18
     b18:	cd b7       	in	r28, 0x3d	; 61
     b1a:	de b7       	in	r29, 0x3e	; 62
     b1c:	ea e0       	ldi	r30, 0x0A	; 10
     b1e:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__epilogue_restores__+0x10>

00000b22 <pf_lseek>:
#if _USE_LSEEK

FRESULT pf_lseek (
	DWORD ofs		/* File pointer from top of file */
)
{
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	b0 e0       	ldi	r27, 0x00	; 0
     b26:	e7 e9       	ldi	r30, 0x97	; 151
     b28:	f5 e0       	ldi	r31, 0x05	; 5
     b2a:	0c 94 33 10 	jmp	0x2066	; 0x2066 <__prologue_saves__>
     b2e:	e8 2f       	mov	r30, r24
	CLUST clst;
	DWORD bcs, sect, ifptr;
	FATFS *fs = FatFs;
     b30:	c0 91 1b 01 	lds	r28, 0x011B
     b34:	d0 91 1c 01 	lds	r29, 0x011C


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
     b38:	20 97       	sbiw	r28, 0x00	; 0
     b3a:	19 f4       	brne	.+6      	; 0xb42 <pf_lseek+0x20>
     b3c:	26 e0       	ldi	r18, 0x06	; 6
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	10 c1       	rjmp	.+544    	; 0xd62 <pf_lseek+0x240>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
     b42:	8a 81       	ldd	r24, Y+2	; 0x02
     b44:	80 fd       	sbrc	r24, 0
     b46:	03 c0       	rjmp	.+6      	; 0xb4e <pf_lseek+0x2c>
     b48:	25 e0       	ldi	r18, 0x05	; 5
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	0a c1       	rjmp	.+532    	; 0xd62 <pf_lseek+0x240>
     b4e:	ac 8c       	ldd	r10, Y+28	; 0x1c
     b50:	bd 8c       	ldd	r11, Y+29	; 0x1d
     b52:	ce 8c       	ldd	r12, Y+30	; 0x1e
     b54:	df 8c       	ldd	r13, Y+31	; 0x1f
     b56:	4e 2f       	mov	r20, r30
     b58:	59 2f       	mov	r21, r25
     b5a:	cb 01       	movw	r24, r22
     b5c:	da 01       	movw	r26, r20
     b5e:	3c 01       	movw	r6, r24
     b60:	4d 01       	movw	r8, r26
     b62:	a6 14       	cp	r10, r6
     b64:	b7 04       	cpc	r11, r7
     b66:	c8 04       	cpc	r12, r8
     b68:	d9 04       	cpc	r13, r9
     b6a:	10 f4       	brcc	.+4      	; 0xb70 <pf_lseek+0x4e>
     b6c:	35 01       	movw	r6, r10
     b6e:	46 01       	movw	r8, r12
			return FR_NOT_OPENED;

	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
	ifptr = fs->fptr;
     b70:	28 8d       	ldd	r18, Y+24	; 0x18
     b72:	39 8d       	ldd	r19, Y+25	; 0x19
     b74:	4a 8d       	ldd	r20, Y+26	; 0x1a
     b76:	5b 8d       	ldd	r21, Y+27	; 0x1b
	fs->fptr = 0;
     b78:	18 8e       	std	Y+24, r1	; 0x18
     b7a:	19 8e       	std	Y+25, r1	; 0x19
     b7c:	1a 8e       	std	Y+26, r1	; 0x1a
     b7e:	1b 8e       	std	Y+27, r1	; 0x1b
	if (ofs > 0) {
     b80:	61 14       	cp	r6, r1
     b82:	71 04       	cpc	r7, r1
     b84:	81 04       	cpc	r8, r1
     b86:	91 04       	cpc	r9, r1
     b88:	09 f4       	brne	.+2      	; 0xb8c <pf_lseek+0x6a>
     b8a:	e9 c0       	rjmp	.+466    	; 0xd5e <pf_lseek+0x23c>
		bcs = (DWORD)fs->csize * 512;	/* Cluster size (byte) */
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	a8 2e       	mov	r10, r24
     b90:	bb 24       	eor	r11, r11
     b92:	cc 24       	eor	r12, r12
     b94:	dd 24       	eor	r13, r13
     b96:	99 e0       	ldi	r25, 0x09	; 9
     b98:	aa 0c       	add	r10, r10
     b9a:	bb 1c       	adc	r11, r11
     b9c:	cc 1c       	adc	r12, r12
     b9e:	dd 1c       	adc	r13, r13
     ba0:	9a 95       	dec	r25
     ba2:	d1 f7       	brne	.-12     	; 0xb98 <pf_lseek+0x76>
		if (ifptr > 0 &&
     ba4:	21 15       	cp	r18, r1
     ba6:	31 05       	cpc	r19, r1
     ba8:	41 05       	cpc	r20, r1
     baa:	51 05       	cpc	r21, r1
     bac:	b1 f1       	breq	.+108    	; 0xc1a <pf_lseek+0xf8>
     bae:	19 01       	movw	r2, r18
     bb0:	2a 01       	movw	r4, r20
     bb2:	08 94       	sec
     bb4:	21 08       	sbc	r2, r1
     bb6:	31 08       	sbc	r3, r1
     bb8:	41 08       	sbc	r4, r1
     bba:	51 08       	sbc	r5, r1
     bbc:	c4 01       	movw	r24, r8
     bbe:	b3 01       	movw	r22, r6
     bc0:	61 50       	subi	r22, 0x01	; 1
     bc2:	70 40       	sbci	r23, 0x00	; 0
     bc4:	80 40       	sbci	r24, 0x00	; 0
     bc6:	90 40       	sbci	r25, 0x00	; 0
     bc8:	a6 01       	movw	r20, r12
     bca:	95 01       	movw	r18, r10
     bcc:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__udivmodsi4>
     bd0:	79 01       	movw	r14, r18
     bd2:	8a 01       	movw	r16, r20
     bd4:	c2 01       	movw	r24, r4
     bd6:	b1 01       	movw	r22, r2
     bd8:	a6 01       	movw	r20, r12
     bda:	95 01       	movw	r18, r10
     bdc:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__udivmodsi4>
     be0:	e2 16       	cp	r14, r18
     be2:	f3 06       	cpc	r15, r19
     be4:	04 07       	cpc	r16, r20
     be6:	15 07       	cpc	r17, r21
     be8:	c0 f0       	brcs	.+48     	; 0xc1a <pf_lseek+0xf8>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fs->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
     bea:	88 27       	eor	r24, r24
     bec:	99 27       	eor	r25, r25
     bee:	dc 01       	movw	r26, r24
     bf0:	8a 19       	sub	r24, r10
     bf2:	9b 09       	sbc	r25, r11
     bf4:	ac 09       	sbc	r26, r12
     bf6:	bd 09       	sbc	r27, r13
     bf8:	82 21       	and	r24, r2
     bfa:	93 21       	and	r25, r3
     bfc:	a4 21       	and	r26, r4
     bfe:	b5 21       	and	r27, r5
     c00:	88 8f       	std	Y+24, r24	; 0x18
     c02:	99 8f       	std	Y+25, r25	; 0x19
     c04:	aa 8f       	std	Y+26, r26	; 0x1a
     c06:	bb 8f       	std	Y+27, r27	; 0x1b
			ofs -= fs->fptr;
     c08:	68 1a       	sub	r6, r24
     c0a:	79 0a       	sbc	r7, r25
     c0c:	8a 0a       	sbc	r8, r26
     c0e:	9b 0a       	sbc	r9, r27
			clst = fs->curr_clust;
     c10:	2c a1       	ldd	r18, Y+36	; 0x24
     c12:	3d a1       	ldd	r19, Y+37	; 0x25
     c14:	4e a1       	ldd	r20, Y+38	; 0x26
     c16:	5f a1       	ldd	r21, Y+39	; 0x27
     c18:	33 c0       	rjmp	.+102    	; 0xc80 <pf_lseek+0x15e>
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
     c1a:	28 a1       	ldd	r18, Y+32	; 0x20
     c1c:	39 a1       	ldd	r19, Y+33	; 0x21
     c1e:	4a a1       	ldd	r20, Y+34	; 0x22
     c20:	5b a1       	ldd	r21, Y+35	; 0x23
			fs->curr_clust = clst;
     c22:	2c a3       	std	Y+36, r18	; 0x24
     c24:	3d a3       	std	Y+37, r19	; 0x25
     c26:	4e a3       	std	Y+38, r20	; 0x26
     c28:	5f a3       	std	Y+39, r21	; 0x27
     c2a:	2a c0       	rjmp	.+84     	; 0xc80 <pf_lseek+0x15e>
		}
		while (ofs > bcs) {				/* Cluster following loop */
			clst = get_fat(clst);		/* Follow cluster chain */
     c2c:	ca 01       	movw	r24, r20
     c2e:	b9 01       	movw	r22, r18
     c30:	0e 94 12 04 	call	0x824	; 0x824 <get_fat>
     c34:	9b 01       	movw	r18, r22
     c36:	ac 01       	movw	r20, r24
			if (clst <= 1 || clst >= fs->max_clust) goto fe_abort;
     c38:	62 30       	cpi	r22, 0x02	; 2
     c3a:	71 05       	cpc	r23, r1
     c3c:	81 05       	cpc	r24, r1
     c3e:	91 05       	cpc	r25, r1
     c40:	08 f4       	brcc	.+2      	; 0xc44 <pf_lseek+0x122>
     c42:	89 c0       	rjmp	.+274    	; 0xd56 <pf_lseek+0x234>
     c44:	88 85       	ldd	r24, Y+8	; 0x08
     c46:	99 85       	ldd	r25, Y+9	; 0x09
     c48:	aa 85       	ldd	r26, Y+10	; 0x0a
     c4a:	bb 85       	ldd	r27, Y+11	; 0x0b
     c4c:	28 17       	cp	r18, r24
     c4e:	39 07       	cpc	r19, r25
     c50:	4a 07       	cpc	r20, r26
     c52:	5b 07       	cpc	r21, r27
     c54:	08 f0       	brcs	.+2      	; 0xc58 <pf_lseek+0x136>
     c56:	7f c0       	rjmp	.+254    	; 0xd56 <pf_lseek+0x234>
			fs->curr_clust = clst;
     c58:	2c a3       	std	Y+36, r18	; 0x24
     c5a:	3d a3       	std	Y+37, r19	; 0x25
     c5c:	4e a3       	std	Y+38, r20	; 0x26
     c5e:	5f a3       	std	Y+39, r21	; 0x27
			fs->fptr += bcs;
     c60:	88 8d       	ldd	r24, Y+24	; 0x18
     c62:	99 8d       	ldd	r25, Y+25	; 0x19
     c64:	aa 8d       	ldd	r26, Y+26	; 0x1a
     c66:	bb 8d       	ldd	r27, Y+27	; 0x1b
     c68:	8a 0d       	add	r24, r10
     c6a:	9b 1d       	adc	r25, r11
     c6c:	ac 1d       	adc	r26, r12
     c6e:	bd 1d       	adc	r27, r13
     c70:	88 8f       	std	Y+24, r24	; 0x18
     c72:	99 8f       	std	Y+25, r25	; 0x19
     c74:	aa 8f       	std	Y+26, r26	; 0x1a
     c76:	bb 8f       	std	Y+27, r27	; 0x1b
			ofs -= bcs;
     c78:	6a 18       	sub	r6, r10
     c7a:	7b 08       	sbc	r7, r11
     c7c:	8c 08       	sbc	r8, r12
     c7e:	9d 08       	sbc	r9, r13
			clst = fs->curr_clust;
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
			fs->curr_clust = clst;
		}
		while (ofs > bcs) {				/* Cluster following loop */
     c80:	a6 14       	cp	r10, r6
     c82:	b7 04       	cpc	r11, r7
     c84:	c8 04       	cpc	r12, r8
     c86:	d9 04       	cpc	r13, r9
     c88:	88 f2       	brcs	.-94     	; 0xc2c <pf_lseek+0x10a>
			if (clst <= 1 || clst >= fs->max_clust) goto fe_abort;
			fs->curr_clust = clst;
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
     c8a:	88 8d       	ldd	r24, Y+24	; 0x18
     c8c:	99 8d       	ldd	r25, Y+25	; 0x19
     c8e:	aa 8d       	ldd	r26, Y+26	; 0x1a
     c90:	bb 8d       	ldd	r27, Y+27	; 0x1b
     c92:	86 0d       	add	r24, r6
     c94:	97 1d       	adc	r25, r7
     c96:	a8 1d       	adc	r26, r8
     c98:	b9 1d       	adc	r27, r9
     c9a:	88 8f       	std	Y+24, r24	; 0x18
     c9c:	99 8f       	std	Y+25, r25	; 0x19
     c9e:	aa 8f       	std	Y+26, r26	; 0x1a
     ca0:	bb 8f       	std	Y+27, r27	; 0x1b
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
     ca2:	00 91 1b 01 	lds	r16, 0x011B
     ca6:	10 91 1c 01 	lds	r17, 0x011C


	clst -= 2;
     caa:	8e ef       	ldi	r24, 0xFE	; 254
     cac:	a8 2e       	mov	r10, r24
     cae:	8f ef       	ldi	r24, 0xFF	; 255
     cb0:	b8 2e       	mov	r11, r24
     cb2:	8f ef       	ldi	r24, 0xFF	; 255
     cb4:	c8 2e       	mov	r12, r24
     cb6:	8f ef       	ldi	r24, 0xFF	; 255
     cb8:	d8 2e       	mov	r13, r24
     cba:	a2 0e       	add	r10, r18
     cbc:	b3 1e       	adc	r11, r19
     cbe:	c4 1e       	adc	r12, r20
     cc0:	d5 1e       	adc	r13, r21
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     cc2:	f8 01       	movw	r30, r16
     cc4:	80 85       	ldd	r24, Z+8	; 0x08
     cc6:	91 85       	ldd	r25, Z+9	; 0x09
     cc8:	a2 85       	ldd	r26, Z+10	; 0x0a
     cca:	b3 85       	ldd	r27, Z+11	; 0x0b
     ccc:	02 97       	sbiw	r24, 0x02	; 2
     cce:	a1 09       	sbc	r26, r1
     cd0:	b1 09       	sbc	r27, r1
     cd2:	a8 16       	cp	r10, r24
     cd4:	b9 06       	cpc	r11, r25
     cd6:	ca 06       	cpc	r12, r26
     cd8:	db 06       	cpc	r13, r27
     cda:	e8 f5       	brcc	.+122    	; 0xd56 <pf_lseek+0x234>
	return (DWORD)clst * fs->csize + fs->database;
     cdc:	21 81       	ldd	r18, Z+1	; 0x01
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	40 e0       	ldi	r20, 0x00	; 0
     ce2:	50 e0       	ldi	r21, 0x00	; 0
     ce4:	c6 01       	movw	r24, r12
     ce6:	b5 01       	movw	r22, r10
     ce8:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__mulsi3>
     cec:	9b 01       	movw	r18, r22
     cee:	ac 01       	movw	r20, r24
     cf0:	f8 01       	movw	r30, r16
     cf2:	84 89       	ldd	r24, Z+20	; 0x14
     cf4:	95 89       	ldd	r25, Z+21	; 0x15
     cf6:	a6 89       	ldd	r26, Z+22	; 0x16
     cf8:	b7 89       	ldd	r27, Z+23	; 0x17
     cfa:	28 0f       	add	r18, r24
     cfc:	39 1f       	adc	r19, r25
     cfe:	4a 1f       	adc	r20, r26
     d00:	5b 1f       	adc	r21, r27
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
		sect = clust2sect(clst);		/* Current sector */
		if (!sect) goto fe_abort;
     d02:	21 15       	cp	r18, r1
     d04:	31 05       	cpc	r19, r1
     d06:	41 05       	cpc	r20, r1
     d08:	51 05       	cpc	r21, r1
     d0a:	29 f1       	breq	.+74     	; 0xd56 <pf_lseek+0x234>
		fs->csect = (BYTE)(ofs / 512);	/* Sector offset in the cluster */
     d0c:	d4 01       	movw	r26, r8
     d0e:	c3 01       	movw	r24, r6
     d10:	19 e0       	ldi	r17, 0x09	; 9
     d12:	b6 95       	lsr	r27
     d14:	a7 95       	ror	r26
     d16:	97 95       	ror	r25
     d18:	87 95       	ror	r24
     d1a:	1a 95       	dec	r17
     d1c:	d1 f7       	brne	.-12     	; 0xd12 <pf_lseek+0x1f0>
     d1e:	98 2f       	mov	r25, r24
     d20:	8b 83       	std	Y+3, r24	; 0x03
		if (ofs % 512)
     d22:	ff ef       	ldi	r31, 0xFF	; 255
     d24:	ef 2e       	mov	r14, r31
     d26:	f1 e0       	ldi	r31, 0x01	; 1
     d28:	ff 2e       	mov	r15, r31
     d2a:	01 2d       	mov	r16, r1
     d2c:	11 2d       	mov	r17, r1
     d2e:	6e 20       	and	r6, r14
     d30:	7f 20       	and	r7, r15
     d32:	80 22       	and	r8, r16
     d34:	91 22       	and	r9, r17
     d36:	61 14       	cp	r6, r1
     d38:	71 04       	cpc	r7, r1
     d3a:	81 04       	cpc	r8, r1
     d3c:	91 04       	cpc	r9, r1
     d3e:	79 f0       	breq	.+30     	; 0xd5e <pf_lseek+0x23c>
			fs->dsect = sect + fs->csect++;
     d40:	28 0f       	add	r18, r24
     d42:	31 1d       	adc	r19, r1
     d44:	41 1d       	adc	r20, r1
     d46:	51 1d       	adc	r21, r1
     d48:	28 a7       	std	Y+40, r18	; 0x28
     d4a:	39 a7       	std	Y+41, r19	; 0x29
     d4c:	4a a7       	std	Y+42, r20	; 0x2a
     d4e:	5b a7       	std	Y+43, r21	; 0x2b
     d50:	9f 5f       	subi	r25, 0xFF	; 255
     d52:	9b 83       	std	Y+3, r25	; 0x03
     d54:	04 c0       	rjmp	.+8      	; 0xd5e <pf_lseek+0x23c>
	}

	return FR_OK;

fe_abort:
	fs->flag = 0;
     d56:	1a 82       	std	Y+2, r1	; 0x02
     d58:	21 e0       	ldi	r18, 0x01	; 1
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <pf_lseek+0x240>
	return FR_DISK_ERR;
     d5e:	20 e0       	ldi	r18, 0x00	; 0
     d60:	30 e0       	ldi	r19, 0x00	; 0
}
     d62:	c9 01       	movw	r24, r18
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
     d68:	e2 e1       	ldi	r30, 0x12	; 18
     d6a:	0c 94 4f 10 	jmp	0x209e	; 0x209e <__epilogue_restores__>

00000d6e <pf_readdir>:

FRESULT pf_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
     d6e:	ac e2       	ldi	r26, 0x2C	; 44
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	ed eb       	ldi	r30, 0xBD	; 189
     d74:	f6 e0       	ldi	r31, 0x06	; 6
     d76:	0c 94 3b 10 	jmp	0x2076	; 0x2076 <__prologue_saves__+0x10>
     d7a:	7c 01       	movw	r14, r24
     d7c:	5b 01       	movw	r10, r22
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
     d7e:	e0 91 1b 01 	lds	r30, 0x011B
     d82:	f0 91 1c 01 	lds	r31, 0x011C


	if (!fs) {				/* Check file system */
     d86:	30 97       	sbiw	r30, 0x00	; 0
     d88:	19 f4       	brne	.+6      	; 0xd90 <pf_readdir+0x22>
     d8a:	26 e0       	ldi	r18, 0x06	; 6
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	d0 c0       	rjmp	.+416    	; 0xf30 <pf_readdir+0x1c2>
		res = FR_NOT_ENABLED;
	} else {
		fs->buf = dir;
     d90:	ce 01       	movw	r24, r28
     d92:	0d 96       	adiw	r24, 0x0d	; 13
     d94:	97 83       	std	Z+7, r25	; 0x07
     d96:	86 83       	std	Z+6, r24	; 0x06
		dj->fn = sp;
     d98:	ce 01       	movw	r24, r28
     d9a:	01 96       	adiw	r24, 0x01	; 1
     d9c:	d7 01       	movw	r26, r14
     d9e:	13 96       	adiw	r26, 0x03	; 3
     da0:	9c 93       	st	X, r25
     da2:	8e 93       	st	-X, r24
     da4:	12 97       	sbiw	r26, 0x02	; 2
		if (!fno) {
     da6:	61 15       	cp	r22, r1
     da8:	71 05       	cpc	r23, r1
     daa:	29 f4       	brne	.+10     	; 0xdb6 <pf_readdir+0x48>
			res = dir_rewind(dj);
     dac:	c7 01       	movw	r24, r14
     dae:	0e 94 96 03 	call	0x72c	; 0x72c <dir_rewind>
     db2:	9c 01       	movw	r18, r24
     db4:	bd c0       	rjmp	.+378    	; 0xf30 <pf_readdir+0x1c2>
	FRESULT res;
	BYTE a, c, *dir;


	res = FR_NO_FILE;
	dir = FatFs->buf;
     db6:	c6 80       	ldd	r12, Z+6	; 0x06
     db8:	d7 80       	ldd	r13, Z+7	; 0x07
     dba:	23 e0       	ldi	r18, 0x03	; 3
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	28 c0       	rjmp	.+80     	; 0xe10 <pf_readdir+0xa2>
	while (dj->sect) {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
     dc0:	f7 01       	movw	r30, r14
     dc2:	20 81       	ld	r18, Z
     dc4:	31 81       	ldd	r19, Z+1	; 0x01
     dc6:	2f 70       	andi	r18, 0x0F	; 15
     dc8:	30 70       	andi	r19, 0x00	; 0
     dca:	e5 e0       	ldi	r30, 0x05	; 5
     dcc:	22 0f       	add	r18, r18
     dce:	33 1f       	adc	r19, r19
     dd0:	ea 95       	dec	r30
     dd2:	e1 f7       	brne	.-8      	; 0xdcc <pf_readdir+0x5e>
     dd4:	c6 01       	movw	r24, r12
     dd6:	00 e2       	ldi	r16, 0x20	; 32
     dd8:	10 e0       	ldi	r17, 0x00	; 0
     dda:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
     dde:	89 2b       	or	r24, r25
     de0:	19 f0       	breq	.+6      	; 0xde8 <pf_readdir+0x7a>
     de2:	21 e0       	ldi	r18, 0x01	; 1
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	21 c0       	rjmp	.+66     	; 0xe2a <pf_readdir+0xbc>
		c = dir[DIR_Name];
     de8:	d6 01       	movw	r26, r12
     dea:	9c 91       	ld	r25, X
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
     dec:	99 23       	and	r25, r25
     dee:	09 f4       	brne	.+2      	; 0xdf2 <pf_readdir+0x84>
     df0:	a4 c0       	rjmp	.+328    	; 0xf3a <pf_readdir+0x1cc>
		a = dir[DIR_Attr] & AM_MASK;
     df2:	1b 96       	adiw	r26, 0x0b	; 11
     df4:	8c 91       	ld	r24, X
		if (c != 0xE5 && c != '.' && !(a & AM_VOL))	/* Is it a valid entry? */
     df6:	95 3e       	cpi	r25, 0xE5	; 229
     df8:	29 f0       	breq	.+10     	; 0xe04 <pf_readdir+0x96>
     dfa:	9e 32       	cpi	r25, 0x2E	; 46
     dfc:	19 f0       	breq	.+6      	; 0xe04 <pf_readdir+0x96>
     dfe:	8f 73       	andi	r24, 0x3F	; 63
     e00:	83 ff       	sbrs	r24, 3
     e02:	21 c0       	rjmp	.+66     	; 0xe46 <pf_readdir+0xd8>
			break;
		res = dir_next(dj);				/* Next entry */
     e04:	c7 01       	movw	r24, r14
     e06:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <dir_next>
     e0a:	9c 01       	movw	r18, r24
		if (res != FR_OK) break;
     e0c:	00 97       	sbiw	r24, 0x00	; 0
     e0e:	69 f4       	brne	.+26     	; 0xe2a <pf_readdir+0xbc>
	BYTE a, c, *dir;


	res = FR_NO_FILE;
	dir = FatFs->buf;
	while (dj->sect) {
     e10:	f7 01       	movw	r30, r14
     e12:	44 85       	ldd	r20, Z+12	; 0x0c
     e14:	55 85       	ldd	r21, Z+13	; 0x0d
     e16:	66 85       	ldd	r22, Z+14	; 0x0e
     e18:	77 85       	ldd	r23, Z+15	; 0x0f
     e1a:	41 15       	cp	r20, r1
     e1c:	51 05       	cpc	r21, r1
     e1e:	61 05       	cpc	r22, r1
     e20:	71 05       	cpc	r23, r1
     e22:	71 f6       	brne	.-100    	; 0xdc0 <pf_readdir+0x52>
			break;
		res = dir_next(dj);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
     e24:	21 15       	cp	r18, r1
     e26:	31 05       	cpc	r19, r1
     e28:	71 f0       	breq	.+28     	; 0xe46 <pf_readdir+0xd8>
     e2a:	d7 01       	movw	r26, r14
     e2c:	1c 96       	adiw	r26, 0x0c	; 12
     e2e:	1d 92       	st	X+, r1
     e30:	1d 92       	st	X+, r1
     e32:	1d 92       	st	X+, r1
     e34:	1c 92       	st	X, r1
     e36:	1f 97       	sbiw	r26, 0x0f	; 15
		dj->fn = sp;
		if (!fno) {
			res = dir_rewind(dj);
		} else {
			res = dir_read(dj);
			if (res == FR_NO_FILE) {
     e38:	23 30       	cpi	r18, 0x03	; 3
     e3a:	31 05       	cpc	r19, r1
     e3c:	21 f0       	breq	.+8      	; 0xe46 <pf_readdir+0xd8>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
     e3e:	21 15       	cp	r18, r1
     e40:	31 05       	cpc	r19, r1
     e42:	09 f0       	breq	.+2      	; 0xe46 <pf_readdir+0xd8>
     e44:	75 c0       	rjmp	.+234    	; 0xf30 <pf_readdir+0x1c2>
{
	BYTE i, c, *dir;
	char *p;


	p = fno->fname;
     e46:	95 01       	movw	r18, r10
     e48:	27 5f       	subi	r18, 0xF7	; 247
     e4a:	3f 4f       	sbci	r19, 0xFF	; 255
	if (dj->sect) {
     e4c:	f7 01       	movw	r30, r14
     e4e:	84 85       	ldd	r24, Z+12	; 0x0c
     e50:	95 85       	ldd	r25, Z+13	; 0x0d
     e52:	a6 85       	ldd	r26, Z+14	; 0x0e
     e54:	b7 85       	ldd	r27, Z+15	; 0x0f
     e56:	00 97       	sbiw	r24, 0x00	; 0
     e58:	a1 05       	cpc	r26, r1
     e5a:	b1 05       	cpc	r27, r1
     e5c:	09 f4       	brne	.+2      	; 0xe60 <pf_readdir+0xf2>
     e5e:	56 c0       	rjmp	.+172    	; 0xf0c <pf_readdir+0x19e>
		dir = FatFs->buf;
     e60:	e0 91 1b 01 	lds	r30, 0x011B
     e64:	f0 91 1c 01 	lds	r31, 0x011C
     e68:	46 81       	ldd	r20, Z+6	; 0x06
     e6a:	57 81       	ldd	r21, Z+7	; 0x07
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
		for (i = 0; i < 8; i++) {	/* Copy file name body */
			c = dir[i];
     e70:	fa 01       	movw	r30, r20
     e72:	e8 0f       	add	r30, r24
     e74:	f9 1f       	adc	r31, r25
     e76:	e0 81       	ld	r30, Z
			if (c == ' ') break;
     e78:	e0 32       	cpi	r30, 0x20	; 32
     e7a:	51 f0       	breq	.+20     	; 0xe90 <pf_readdir+0x122>
			if (c == 0x05) c = 0xE5;
     e7c:	e5 30       	cpi	r30, 0x05	; 5
     e7e:	09 f4       	brne	.+2      	; 0xe82 <pf_readdir+0x114>
     e80:	e5 ee       	ldi	r30, 0xE5	; 229
			*p++ = c;
     e82:	d9 01       	movw	r26, r18
     e84:	ed 93       	st	X+, r30
     e86:	9d 01       	movw	r18, r26
     e88:	01 96       	adiw	r24, 0x01	; 1


	p = fno->fname;
	if (dj->sect) {
		dir = FatFs->buf;
		for (i = 0; i < 8; i++) {	/* Copy file name body */
     e8a:	88 30       	cpi	r24, 0x08	; 8
     e8c:	91 05       	cpc	r25, r1
     e8e:	81 f7       	brne	.-32     	; 0xe70 <pf_readdir+0x102>
			c = dir[i];
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
     e90:	fa 01       	movw	r30, r20
     e92:	80 85       	ldd	r24, Z+8	; 0x08
     e94:	80 32       	cpi	r24, 0x20	; 32
     e96:	11 f4       	brne	.+4      	; 0xe9c <pf_readdir+0x12e>
     e98:	f9 01       	movw	r30, r18
     e9a:	10 c0       	rjmp	.+32     	; 0xebc <pf_readdir+0x14e>
			*p++ = '.';
     e9c:	f9 01       	movw	r30, r18
     e9e:	8e e2       	ldi	r24, 0x2E	; 46
     ea0:	81 93       	st	Z+, r24
     ea2:	da 01       	movw	r26, r20
			for (i = 8; i < 11; i++) {
     ea4:	2c 5f       	subi	r18, 0xFC	; 252
     ea6:	3f 4f       	sbci	r19, 0xFF	; 255
				c = dir[i];
     ea8:	18 96       	adiw	r26, 0x08	; 8
     eaa:	8c 91       	ld	r24, X
     eac:	18 97       	sbiw	r26, 0x08	; 8
				if (c == ' ') break;
     eae:	80 32       	cpi	r24, 0x20	; 32
     eb0:	29 f0       	breq	.+10     	; 0xebc <pf_readdir+0x14e>
				*p++ = c;
     eb2:	81 93       	st	Z+, r24
     eb4:	11 96       	adiw	r26, 0x01	; 1
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
     eb6:	e2 17       	cp	r30, r18
     eb8:	f3 07       	cpc	r31, r19
     eba:	b1 f7       	brne	.-20     	; 0xea8 <pf_readdir+0x13a>
				c = dir[i];
				if (c == ' ') break;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
     ebc:	da 01       	movw	r26, r20
     ebe:	1b 96       	adiw	r26, 0x0b	; 11
     ec0:	8c 91       	ld	r24, X
     ec2:	d5 01       	movw	r26, r10
     ec4:	18 96       	adiw	r26, 0x08	; 8
     ec6:	8c 93       	st	X, r24
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
     ec8:	da 01       	movw	r26, r20
     eca:	5c 96       	adiw	r26, 0x1c	; 28
     ecc:	0d 91       	ld	r16, X+
     ece:	1d 91       	ld	r17, X+
     ed0:	2d 91       	ld	r18, X+
     ed2:	3c 91       	ld	r19, X
     ed4:	5f 97       	sbiw	r26, 0x1f	; 31
     ed6:	d5 01       	movw	r26, r10
     ed8:	0d 93       	st	X+, r16
     eda:	1d 93       	st	X+, r17
     edc:	2d 93       	st	X+, r18
     ede:	3c 93       	st	X, r19
     ee0:	13 97       	sbiw	r26, 0x03	; 3
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
     ee2:	da 01       	movw	r26, r20
     ee4:	58 96       	adiw	r26, 0x18	; 24
     ee6:	8d 91       	ld	r24, X+
     ee8:	9c 91       	ld	r25, X
     eea:	59 97       	sbiw	r26, 0x19	; 25
     eec:	d5 01       	movw	r26, r10
     eee:	15 96       	adiw	r26, 0x05	; 5
     ef0:	9c 93       	st	X, r25
     ef2:	8e 93       	st	-X, r24
     ef4:	14 97       	sbiw	r26, 0x04	; 4
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
     ef6:	da 01       	movw	r26, r20
     ef8:	56 96       	adiw	r26, 0x16	; 22
     efa:	8d 91       	ld	r24, X+
     efc:	9c 91       	ld	r25, X
     efe:	57 97       	sbiw	r26, 0x17	; 23
     f00:	d5 01       	movw	r26, r10
     f02:	17 96       	adiw	r26, 0x07	; 7
     f04:	9c 93       	st	X, r25
     f06:	8e 93       	st	-X, r24
     f08:	16 97       	sbiw	r26, 0x06	; 6
     f0a:	9f 01       	movw	r18, r30
	}
	*p = 0;
     f0c:	f9 01       	movw	r30, r18
     f0e:	10 82       	st	Z, r1
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj);			/* Increment index for next */
     f10:	c7 01       	movw	r24, r14
     f12:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <dir_next>
     f16:	9c 01       	movw	r18, r24
				if (res == FR_NO_FILE) {
     f18:	83 30       	cpi	r24, 0x03	; 3
     f1a:	91 05       	cpc	r25, r1
     f1c:	49 f4       	brne	.+18     	; 0xf30 <pf_readdir+0x1c2>
					dj->sect = 0;
     f1e:	d7 01       	movw	r26, r14
     f20:	1c 96       	adiw	r26, 0x0c	; 12
     f22:	1d 92       	st	X+, r1
     f24:	1d 92       	st	X+, r1
     f26:	1d 92       	st	X+, r1
     f28:	1c 92       	st	X, r1
     f2a:	1f 97       	sbiw	r26, 0x0f	; 15
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	return res;
}
     f30:	c9 01       	movw	r24, r18
     f32:	ac 96       	adiw	r28, 0x2c	; 44
     f34:	ea e0       	ldi	r30, 0x0A	; 10
     f36:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__epilogue_restores__+0x10>
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj);			/* Increment index for next */
				if (res == FR_NO_FILE) {
					dj->sect = 0;
     f3a:	23 e0       	ldi	r18, 0x03	; 3
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	75 cf       	rjmp	.-278    	; 0xe2a <pf_readdir+0xbc>

00000f40 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const char *path	/* Full-path string to find a file or directory */
)
{
     f40:	a0 e0       	ldi	r26, 0x00	; 0
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e6 ea       	ldi	r30, 0xA6	; 166
     f46:	f7 e0       	ldi	r31, 0x07	; 7
     f48:	0c 94 36 10 	jmp	0x206c	; 0x206c <__prologue_saves__+0x6>
     f4c:	6c 01       	movw	r12, r24
     f4e:	5b 01       	movw	r10, r22
     f50:	03 c0       	rjmp	.+6      	; 0xf58 <follow_path+0x18>
	FRESULT res;
	BYTE *dir;


	while (*path == ' ') path++;		/* Skip leading spaces */
     f52:	08 94       	sec
     f54:	a1 1c       	adc	r10, r1
     f56:	b1 1c       	adc	r11, r1
     f58:	d5 01       	movw	r26, r10
     f5a:	8c 91       	ld	r24, X
     f5c:	80 32       	cpi	r24, 0x20	; 32
     f5e:	c9 f3       	breq	.-14     	; 0xf52 <follow_path+0x12>
	if (*path == '/') path++;			/* Strip heading separator */
     f60:	8f 32       	cpi	r24, 0x2F	; 47
     f62:	19 f4       	brne	.+6      	; 0xf6a <follow_path+0x2a>
     f64:	08 94       	sec
     f66:	a1 1c       	adc	r10, r1
     f68:	b1 1c       	adc	r11, r1
	dj->sclust = 0;						/* Set start directory (always root dir) */
     f6a:	f6 01       	movw	r30, r12
     f6c:	14 82       	std	Z+4, r1	; 0x04
     f6e:	15 82       	std	Z+5, r1	; 0x05
     f70:	16 82       	std	Z+6, r1	; 0x06
     f72:	17 82       	std	Z+7, r1	; 0x07

	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
     f74:	d5 01       	movw	r26, r10
     f76:	8c 91       	ld	r24, X
     f78:	81 32       	cpi	r24, 0x21	; 33
     f7a:	68 f4       	brcc	.+26     	; 0xf96 <follow_path+0x56>
		res = dir_rewind(dj);
     f7c:	c6 01       	movw	r24, r12
     f7e:	0e 94 96 03 	call	0x72c	; 0x72c <dir_rewind>
     f82:	ec 01       	movw	r28, r24
		FatFs->buf[0] = 0;
     f84:	e0 91 1b 01 	lds	r30, 0x011B
     f88:	f0 91 1c 01 	lds	r31, 0x011C
     f8c:	06 80       	ldd	r0, Z+6	; 0x06
     f8e:	f7 81       	ldd	r31, Z+7	; 0x07
     f90:	e0 2d       	mov	r30, r0
     f92:	10 82       	st	Z, r1
     f94:	b1 c0       	rjmp	.+354    	; 0x10f8 <follow_path+0x1b8>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
     f96:	a0 e2       	ldi	r26, 0x20	; 32
     f98:	5a 2e       	mov	r5, r26
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
     f9a:	66 24       	eor	r6, r6
     f9c:	63 94       	inc	r6
{
	BYTE c, d, ni, si, i, *sfn;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
     f9e:	f6 01       	movw	r30, r12
     fa0:	a2 81       	ldd	r26, Z+2	; 0x02
     fa2:	b3 81       	ldd	r27, Z+3	; 0x03
/*-----------------------------------------------------------------------*/

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
     fa4:	fd 01       	movw	r30, r26
	while (cnt--) *d++ = (char)val;
     fa6:	cd 01       	movw	r24, r26
     fa8:	0b 96       	adiw	r24, 0x0b	; 11
     faa:	01 c0       	rjmp	.+2      	; 0xfae <follow_path+0x6e>
     fac:	51 92       	st	Z+, r5
     fae:	e8 17       	cp	r30, r24
     fb0:	f9 07       	cpc	r31, r25
     fb2:	e1 f7       	brne	.-8      	; 0xfac <follow_path+0x6c>
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	77 24       	eor	r7, r7
     fb8:	38 e0       	ldi	r19, 0x08	; 8
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <follow_path+0x80>
     fbc:	28 e0       	ldi	r18, 0x08	; 8
     fbe:	3b e0       	ldi	r19, 0x0B	; 11
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
     fc0:	f5 01       	movw	r30, r10
     fc2:	e7 0d       	add	r30, r7
     fc4:	f1 1d       	adc	r31, r1
     fc6:	90 81       	ld	r25, Z
     fc8:	73 94       	inc	r7
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
     fca:	91 32       	cpi	r25, 0x21	; 33
     fcc:	b0 f0       	brcs	.+44     	; 0xffa <follow_path+0xba>
     fce:	9f 32       	cpi	r25, 0x2F	; 47
     fd0:	a1 f0       	breq	.+40     	; 0xffa <follow_path+0xba>
		if (c == '.' || i >= ni) {
     fd2:	9e 32       	cpi	r25, 0x2E	; 46
     fd4:	11 f0       	breq	.+4      	; 0xfda <follow_path+0x9a>
     fd6:	23 17       	cp	r18, r19
     fd8:	28 f0       	brcs	.+10     	; 0xfe4 <follow_path+0xa4>
			if (ni != 8 || c != '.') break;
     fda:	38 30       	cpi	r19, 0x08	; 8
     fdc:	71 f4       	brne	.+28     	; 0xffa <follow_path+0xba>
     fde:	9e 32       	cpi	r25, 0x2E	; 46
     fe0:	69 f3       	breq	.-38     	; 0xfbc <follow_path+0x7c>
     fe2:	0b c0       	rjmp	.+22     	; 0xffa <follow_path+0xba>
		if (IsDBCS1(c) && i >= ni - 1) {	/* DBC 1st byte? */
			d = p[si++];					/* Get 2nd byte */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
     fe4:	89 2f       	mov	r24, r25
     fe6:	81 56       	subi	r24, 0x61	; 97
     fe8:	8a 31       	cpi	r24, 0x1A	; 26
     fea:	08 f4       	brcc	.+2      	; 0xfee <follow_path+0xae>
     fec:	90 52       	subi	r25, 0x20	; 32
			sfn[i++] = c;
     fee:	fd 01       	movw	r30, r26
     ff0:	e2 0f       	add	r30, r18
     ff2:	f1 1d       	adc	r31, r1
     ff4:	90 83       	st	Z, r25
     ff6:	2f 5f       	subi	r18, 0xFF	; 255
     ff8:	e3 cf       	rjmp	.-58     	; 0xfc0 <follow_path+0x80>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
     ffa:	1b 96       	adiw	r26, 0x0b	; 11
     ffc:	1c 92       	st	X, r1
     ffe:	1b 97       	sbiw	r26, 0x0b	; 11
    1000:	91 32       	cpi	r25, 0x21	; 33
    1002:	10 f4       	brcc	.+4      	; 0x1008 <follow_path+0xc8>
    1004:	1b 96       	adiw	r26, 0x0b	; 11
    1006:	6c 92       	st	X, r6
{
	FRESULT res;
	BYTE c, *dir;


	res = dir_rewind(dj);			/* Rewind directory object */
    1008:	c6 01       	movw	r24, r12
    100a:	0e 94 96 03 	call	0x72c	; 0x72c <dir_rewind>
    100e:	ec 01       	movw	r28, r24
	if (res != FR_OK) return res;
    1010:	00 97       	sbiw	r24, 0x00	; 0
    1012:	09 f0       	breq	.+2      	; 0x1016 <follow_path+0xd6>
    1014:	42 c0       	rjmp	.+132    	; 0x109a <follow_path+0x15a>

	dir = FatFs->buf;
    1016:	e0 91 1b 01 	lds	r30, 0x011B
    101a:	f0 91 1c 01 	lds	r31, 0x011C
    101e:	e6 80       	ldd	r14, Z+6	; 0x06
    1020:	f7 80       	ldd	r15, Z+7	; 0x07
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    1022:	fb e0       	ldi	r31, 0x0B	; 11
    1024:	8f 2e       	mov	r8, r31
    1026:	91 2c       	mov	r9, r1
    1028:	8e 0c       	add	r8, r14
    102a:	9f 1c       	adc	r9, r15
	res = dir_rewind(dj);			/* Rewind directory object */
	if (res != FR_OK) return res;

	dir = FatFs->buf;
	do {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
    102c:	d6 01       	movw	r26, r12
    102e:	1c 96       	adiw	r26, 0x0c	; 12
    1030:	4d 91       	ld	r20, X+
    1032:	5d 91       	ld	r21, X+
    1034:	6d 91       	ld	r22, X+
    1036:	7c 91       	ld	r23, X
    1038:	1f 97       	sbiw	r26, 0x0f	; 15
    103a:	2d 91       	ld	r18, X+
    103c:	3c 91       	ld	r19, X
    103e:	2f 70       	andi	r18, 0x0F	; 15
    1040:	30 70       	andi	r19, 0x00	; 0
    1042:	e5 e0       	ldi	r30, 0x05	; 5
    1044:	22 0f       	add	r18, r18
    1046:	33 1f       	adc	r19, r19
    1048:	ea 95       	dec	r30
    104a:	e1 f7       	brne	.-8      	; 0x1044 <follow_path+0x104>
    104c:	c7 01       	movw	r24, r14
    104e:	00 e2       	ldi	r16, 0x20	; 32
    1050:	10 e0       	ldi	r17, 0x00	; 0
    1052:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
    1056:	89 2b       	or	r24, r25
    1058:	19 f0       	breq	.+6      	; 0x1060 <follow_path+0x120>
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	1c c0       	rjmp	.+56     	; 0x1098 <follow_path+0x158>
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1060:	f7 01       	movw	r30, r14
    1062:	80 81       	ld	r24, Z
    1064:	88 23       	and	r24, r24
    1066:	09 f4       	brne	.+2      	; 0x106a <follow_path+0x12a>
    1068:	4d c0       	rjmp	.+154    	; 0x1104 <follow_path+0x1c4>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    106a:	83 85       	ldd	r24, Z+11	; 0x0b
    106c:	83 fd       	sbrc	r24, 3
    106e:	0f c0       	rjmp	.+30     	; 0x108e <follow_path+0x14e>
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
    1070:	f6 01       	movw	r30, r12
    1072:	a2 81       	ldd	r26, Z+2	; 0x02
    1074:	b3 81       	ldd	r27, Z+3	; 0x03
    1076:	f7 01       	movw	r30, r14
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    1078:	e8 15       	cp	r30, r8
    107a:	f9 05       	cpc	r31, r9
    107c:	09 f4       	brne	.+2      	; 0x1080 <follow_path+0x140>
    107e:	45 c0       	rjmp	.+138    	; 0x110a <follow_path+0x1ca>
    1080:	90 81       	ld	r25, Z
    1082:	8c 91       	ld	r24, X
    1084:	98 17       	cp	r25, r24
    1086:	19 f4       	brne	.+6      	; 0x108e <follow_path+0x14e>
    1088:	31 96       	adiw	r30, 0x01	; 1
    108a:	11 96       	adiw	r26, 0x01	; 1
    108c:	f5 cf       	rjmp	.-22     	; 0x1078 <follow_path+0x138>
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
		res = dir_next(dj);							/* Next entry */
    108e:	c6 01       	movw	r24, r12
    1090:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <dir_next>
	} while (res == FR_OK);
    1094:	00 97       	sbiw	r24, 0x00	; 0
    1096:	51 f2       	breq	.-108    	; 0x102c <follow_path+0xec>
    1098:	ec 01       	movw	r28, r24
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
    109a:	c3 30       	cpi	r28, 0x03	; 3
    109c:	d1 05       	cpc	r29, r1
    109e:	61 f5       	brne	.+88     	; 0x10f8 <follow_path+0x1b8>
    10a0:	d6 01       	movw	r26, r12
    10a2:	12 96       	adiw	r26, 0x02	; 2
    10a4:	ed 91       	ld	r30, X+
    10a6:	fc 91       	ld	r31, X
    10a8:	13 97       	sbiw	r26, 0x03	; 3
    10aa:	83 85       	ldd	r24, Z+11	; 0x0b
    10ac:	88 23       	and	r24, r24
    10ae:	11 f1       	breq	.+68     	; 0x10f4 <follow_path+0x1b4>
    10b0:	23 c0       	rjmp	.+70     	; 0x10f8 <follow_path+0x1b8>
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			dir = FatFs->buf;				/* There is next segment. Follow the sub directory */
    10b2:	e0 91 1b 01 	lds	r30, 0x011B
    10b6:	f0 91 1c 01 	lds	r31, 0x011C
    10ba:	06 80       	ldd	r0, Z+6	; 0x06
    10bc:	f7 81       	ldd	r31, Z+7	; 0x07
    10be:	e0 2d       	mov	r30, r0
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    10c0:	83 85       	ldd	r24, Z+11	; 0x0b
    10c2:	84 ff       	sbrs	r24, 4
    10c4:	17 c0       	rjmp	.+46     	; 0x10f4 <follow_path+0x1b4>
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    10c6:	a7 0c       	add	r10, r7
    10c8:	b1 1c       	adc	r11, r1
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			dir = FatFs->buf;				/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust =
    10ca:	84 89       	ldd	r24, Z+20	; 0x14
    10cc:	95 89       	ldd	r25, Z+21	; 0x15
    10ce:	a0 e0       	ldi	r26, 0x00	; 0
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	dc 01       	movw	r26, r24
    10d4:	99 27       	eor	r25, r25
    10d6:	88 27       	eor	r24, r24
    10d8:	22 8d       	ldd	r18, Z+26	; 0x1a
    10da:	33 8d       	ldd	r19, Z+27	; 0x1b
    10dc:	40 e0       	ldi	r20, 0x00	; 0
    10de:	50 e0       	ldi	r21, 0x00	; 0
    10e0:	82 2b       	or	r24, r18
    10e2:	93 2b       	or	r25, r19
    10e4:	a4 2b       	or	r26, r20
    10e6:	b5 2b       	or	r27, r21
    10e8:	f6 01       	movw	r30, r12
    10ea:	84 83       	std	Z+4, r24	; 0x04
    10ec:	95 83       	std	Z+5, r25	; 0x05
    10ee:	a6 83       	std	Z+6, r26	; 0x06
    10f0:	b7 83       	std	Z+7, r27	; 0x07
    10f2:	55 cf       	rjmp	.-342    	; 0xf9e <follow_path+0x5e>
#if _FS_FAT32
				((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | 
#endif
				LD_WORD(dir+DIR_FstClusLO);
		}
    10f4:	c4 e0       	ldi	r28, 0x04	; 4
    10f6:	d0 e0       	ldi	r29, 0x00	; 0
	}

	return res;
}
    10f8:	ce 01       	movw	r24, r28
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	ef e0       	ldi	r30, 0x0F	; 15
    1100:	0c 94 52 10 	jmp	0x20a4	; 0x20a4 <__epilogue_restores__+0x6>
			dj->sclust =
#if _FS_FAT32
				((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | 
#endif
				LD_WORD(dir+DIR_FstClusLO);
		}
    1104:	c3 e0       	ldi	r28, 0x03	; 3
    1106:	d0 e0       	ldi	r29, 0x00	; 0
    1108:	c8 cf       	rjmp	.-112    	; 0x109a <follow_path+0x15a>
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
    110a:	d6 01       	movw	r26, r12
    110c:	12 96       	adiw	r26, 0x02	; 2
    110e:	ed 91       	ld	r30, X+
    1110:	fc 91       	ld	r31, X
    1112:	13 97       	sbiw	r26, 0x03	; 3
    1114:	83 85       	ldd	r24, Z+11	; 0x0b
    1116:	88 23       	and	r24, r24
    1118:	61 f2       	breq	.-104    	; 0x10b2 <follow_path+0x172>
    111a:	ee cf       	rjmp	.-36     	; 0x10f8 <follow_path+0x1b8>

0000111c <pf_opendir>:

FRESULT pf_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const char *path	/* Pointer to the directory path */
)
{
    111c:	ac e2       	ldi	r26, 0x2C	; 44
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e4 e9       	ldi	r30, 0x94	; 148
    1122:	f8 e0       	ldi	r31, 0x08	; 8
    1124:	0c 94 3f 10 	jmp	0x207e	; 0x207e <__prologue_saves__+0x18>
    1128:	8c 01       	movw	r16, r24
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
    112a:	e0 91 1b 01 	lds	r30, 0x011B
    112e:	f0 91 1c 01 	lds	r31, 0x011C


	if (!fs) {				/* Check file system */
    1132:	30 97       	sbiw	r30, 0x00	; 0
    1134:	19 f4       	brne	.+6      	; 0x113c <pf_opendir+0x20>
    1136:	26 e0       	ldi	r18, 0x06	; 6
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	36 c0       	rjmp	.+108    	; 0x11a8 <pf_opendir+0x8c>
		res = FR_NOT_ENABLED;
	} else {
		fs->buf = dir;
    113c:	3d e0       	ldi	r19, 0x0D	; 13
    113e:	e3 2e       	mov	r14, r19
    1140:	f1 2c       	mov	r15, r1
    1142:	ec 0e       	add	r14, r28
    1144:	fd 1e       	adc	r15, r29
    1146:	f7 82       	std	Z+7, r15	; 0x07
    1148:	e6 82       	std	Z+6, r14	; 0x06
		dj->fn = sp;
    114a:	ce 01       	movw	r24, r28
    114c:	01 96       	adiw	r24, 0x01	; 1
    114e:	f8 01       	movw	r30, r16
    1150:	93 83       	std	Z+3, r25	; 0x03
    1152:	82 83       	std	Z+2, r24	; 0x02
		res = follow_path(dj, path);			/* Follow the path to the directory */
    1154:	c8 01       	movw	r24, r16
    1156:	0e 94 a0 07 	call	0xf40	; 0xf40 <follow_path>
    115a:	9c 01       	movw	r18, r24
		if (res == FR_OK) {						/* Follow completed */
    115c:	00 97       	sbiw	r24, 0x00	; 0
    115e:	f9 f4       	brne	.+62     	; 0x119e <pf_opendir+0x82>
			if (dir[0]) {						/* It is not the root dir */
    1160:	8d 85       	ldd	r24, Y+13	; 0x0d
    1162:	88 23       	and	r24, r24
    1164:	c1 f0       	breq	.+48     	; 0x1196 <pf_opendir+0x7a>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    1166:	88 8d       	ldd	r24, Y+24	; 0x18
    1168:	84 ff       	sbrs	r24, 4
    116a:	1c c0       	rjmp	.+56     	; 0x11a4 <pf_opendir+0x88>
					dj->sclust =
    116c:	f7 01       	movw	r30, r14
    116e:	84 89       	ldd	r24, Z+20	; 0x14
    1170:	95 89       	ldd	r25, Z+21	; 0x15
    1172:	a0 e0       	ldi	r26, 0x00	; 0
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	dc 01       	movw	r26, r24
    1178:	99 27       	eor	r25, r25
    117a:	88 27       	eor	r24, r24
    117c:	22 8d       	ldd	r18, Z+26	; 0x1a
    117e:	33 8d       	ldd	r19, Z+27	; 0x1b
    1180:	40 e0       	ldi	r20, 0x00	; 0
    1182:	50 e0       	ldi	r21, 0x00	; 0
    1184:	82 2b       	or	r24, r18
    1186:	93 2b       	or	r25, r19
    1188:	a4 2b       	or	r26, r20
    118a:	b5 2b       	or	r27, r21
    118c:	f8 01       	movw	r30, r16
    118e:	84 83       	std	Z+4, r24	; 0x04
    1190:	95 83       	std	Z+5, r25	; 0x05
    1192:	a6 83       	std	Z+6, r26	; 0x06
    1194:	b7 83       	std	Z+7, r27	; 0x07
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK)
				res = dir_rewind(dj);			/* Rewind dir */
    1196:	c8 01       	movw	r24, r16
    1198:	0e 94 96 03 	call	0x72c	; 0x72c <dir_rewind>
    119c:	9c 01       	movw	r18, r24
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    119e:	23 30       	cpi	r18, 0x03	; 3
    11a0:	31 05       	cpc	r19, r1
    11a2:	11 f4       	brne	.+4      	; 0x11a8 <pf_opendir+0x8c>
    11a4:	24 e0       	ldi	r18, 0x04	; 4
    11a6:	30 e0       	ldi	r19, 0x00	; 0
	}

	return res;
}
    11a8:	c9 01       	movw	r24, r18
    11aa:	ac 96       	adiw	r28, 0x2c	; 44
    11ac:	e6 e0       	ldi	r30, 0x06	; 6
    11ae:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__epilogue_restores__+0x18>

000011b2 <pf_open>:
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
    11b2:	ac e3       	ldi	r26, 0x3C	; 60
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	ef ed       	ldi	r30, 0xDF	; 223
    11b8:	f8 e0       	ldi	r31, 0x08	; 8
    11ba:	0c 94 3f 10 	jmp	0x207e	; 0x207e <__prologue_saves__+0x18>
    11be:	bc 01       	movw	r22, r24
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
    11c0:	00 91 1b 01 	lds	r16, 0x011B
    11c4:	10 91 1c 01 	lds	r17, 0x011C


	if (!fs)						/* Check file system */
    11c8:	01 15       	cp	r16, r1
    11ca:	11 05       	cpc	r17, r1
    11cc:	19 f4       	brne	.+6      	; 0x11d4 <pf_open+0x22>
    11ce:	66 e0       	ldi	r22, 0x06	; 6
    11d0:	70 e0       	ldi	r23, 0x00	; 0
    11d2:	42 c0       	rjmp	.+132    	; 0x1258 <pf_open+0xa6>
		return FR_NOT_ENABLED;

	fs->flag = 0;
    11d4:	f8 01       	movw	r30, r16
    11d6:	12 82       	std	Z+2, r1	; 0x02
	fs->buf = dir;
    11d8:	5d e1       	ldi	r21, 0x1D	; 29
    11da:	e5 2e       	mov	r14, r21
    11dc:	f1 2c       	mov	r15, r1
    11de:	ec 0e       	add	r14, r28
    11e0:	fd 1e       	adc	r15, r29
    11e2:	f7 82       	std	Z+7, r15	; 0x07
    11e4:	e6 82       	std	Z+6, r14	; 0x06
	dj.fn = sp;
    11e6:	ce 01       	movw	r24, r28
    11e8:	01 96       	adiw	r24, 0x01	; 1
    11ea:	98 8b       	std	Y+16, r25	; 0x10
    11ec:	8f 87       	std	Y+15, r24	; 0x0f
	res = follow_path(&dj, path);	/* Follow the file path */
    11ee:	ce 01       	movw	r24, r28
    11f0:	0d 96       	adiw	r24, 0x0d	; 13
    11f2:	0e 94 a0 07 	call	0xf40	; 0xf40 <follow_path>
    11f6:	bc 01       	movw	r22, r24
	if (res != FR_OK) return res;	/* Follow failed */
    11f8:	00 97       	sbiw	r24, 0x00	; 0
    11fa:	71 f5       	brne	.+92     	; 0x1258 <pf_open+0xa6>
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    11fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11fe:	88 23       	and	r24, r24
    1200:	49 f1       	breq	.+82     	; 0x1254 <pf_open+0xa2>
    1202:	88 a5       	ldd	r24, Y+40	; 0x28
    1204:	84 fd       	sbrc	r24, 4
    1206:	26 c0       	rjmp	.+76     	; 0x1254 <pf_open+0xa2>
		return FR_NO_FILE;

	fs->org_clust =						/* File start cluster */
    1208:	f7 01       	movw	r30, r14
    120a:	84 89       	ldd	r24, Z+20	; 0x14
    120c:	95 89       	ldd	r25, Z+21	; 0x15
    120e:	a0 e0       	ldi	r26, 0x00	; 0
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	dc 01       	movw	r26, r24
    1214:	99 27       	eor	r25, r25
    1216:	88 27       	eor	r24, r24
    1218:	22 8d       	ldd	r18, Z+26	; 0x1a
    121a:	33 8d       	ldd	r19, Z+27	; 0x1b
    121c:	40 e0       	ldi	r20, 0x00	; 0
    121e:	50 e0       	ldi	r21, 0x00	; 0
    1220:	82 2b       	or	r24, r18
    1222:	93 2b       	or	r25, r19
    1224:	a4 2b       	or	r26, r20
    1226:	b5 2b       	or	r27, r21
    1228:	f8 01       	movw	r30, r16
    122a:	80 a3       	std	Z+32, r24	; 0x20
    122c:	91 a3       	std	Z+33, r25	; 0x21
    122e:	a2 a3       	std	Z+34, r26	; 0x22
    1230:	b3 a3       	std	Z+35, r27	; 0x23
#if _FS_FAT32
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) |
#endif
		LD_WORD(dir+DIR_FstClusLO);
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    1232:	f7 01       	movw	r30, r14
    1234:	84 8d       	ldd	r24, Z+28	; 0x1c
    1236:	95 8d       	ldd	r25, Z+29	; 0x1d
    1238:	a6 8d       	ldd	r26, Z+30	; 0x1e
    123a:	b7 8d       	ldd	r27, Z+31	; 0x1f
    123c:	f8 01       	movw	r30, r16
    123e:	84 8f       	std	Z+28, r24	; 0x1c
    1240:	95 8f       	std	Z+29, r25	; 0x1d
    1242:	a6 8f       	std	Z+30, r26	; 0x1e
    1244:	b7 8f       	std	Z+31, r27	; 0x1f
	fs->fptr = 0;						/* File pointer */
    1246:	10 8e       	std	Z+24, r1	; 0x18
    1248:	11 8e       	std	Z+25, r1	; 0x19
    124a:	12 8e       	std	Z+26, r1	; 0x1a
    124c:	13 8e       	std	Z+27, r1	; 0x1b
	fs->flag = FA_OPENED;
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	82 83       	std	Z+2, r24	; 0x02
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <pf_open+0xa6>

	return FR_OK;
    1254:	63 e0       	ldi	r22, 0x03	; 3
    1256:	70 e0       	ldi	r23, 0x00	; 0
}
    1258:	cb 01       	movw	r24, r22
    125a:	ec 96       	adiw	r28, 0x3c	; 60
    125c:	e6 e0       	ldi	r30, 0x06	; 6
    125e:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__epilogue_restores__+0x18>

00001262 <pf_read>:
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	WORD btr,		/* Number of bytes to read */
	WORD* br		/* Pointer to number of bytes read */
)
{
    1262:	a0 e0       	ldi	r26, 0x00	; 0
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	e7 e3       	ldi	r30, 0x37	; 55
    1268:	f9 e0       	ldi	r31, 0x09	; 9
    126a:	0c 94 35 10 	jmp	0x206a	; 0x206a <__prologue_saves__+0x4>
    126e:	3c 01       	movw	r6, r24
    1270:	6b 01       	movw	r12, r22
    1272:	4a 01       	movw	r8, r20
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	BYTE *rbuff = buff;
	WORD rcnt;
	FATFS *fs = FatFs;
    1274:	c0 91 1b 01 	lds	r28, 0x011B
    1278:	d0 91 1c 01 	lds	r29, 0x011C


	*br = 0;
    127c:	fa 01       	movw	r30, r20
    127e:	11 82       	std	Z+1, r1	; 0x01
    1280:	10 82       	st	Z, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    1282:	20 97       	sbiw	r28, 0x00	; 0
    1284:	19 f4       	brne	.+6      	; 0x128c <pf_read+0x2a>
    1286:	26 e0       	ldi	r18, 0x06	; 6
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	dd c0       	rjmp	.+442    	; 0x1446 <pf_read+0x1e4>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	80 fd       	sbrc	r24, 0
    1290:	03 c0       	rjmp	.+6      	; 0x1298 <pf_read+0x36>
    1292:	25 e0       	ldi	r18, 0x05	; 5
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	d7 c0       	rjmp	.+430    	; 0x1446 <pf_read+0x1e4>
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
    1298:	2c 8d       	ldd	r18, Y+28	; 0x1c
    129a:	3d 8d       	ldd	r19, Y+29	; 0x1d
    129c:	4e 8d       	ldd	r20, Y+30	; 0x1e
    129e:	5f 8d       	ldd	r21, Y+31	; 0x1f
    12a0:	88 8d       	ldd	r24, Y+24	; 0x18
    12a2:	99 8d       	ldd	r25, Y+25	; 0x19
    12a4:	aa 8d       	ldd	r26, Y+26	; 0x1a
    12a6:	bb 8d       	ldd	r27, Y+27	; 0x1b
    12a8:	28 1b       	sub	r18, r24
    12aa:	39 0b       	sbc	r19, r25
    12ac:	4a 0b       	sbc	r20, r26
    12ae:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */
    12b0:	cb 01       	movw	r24, r22
    12b2:	a0 e0       	ldi	r26, 0x00	; 0
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	28 17       	cp	r18, r24
    12b8:	39 07       	cpc	r19, r25
    12ba:	4a 07       	cpc	r20, r26
    12bc:	5b 07       	cpc	r21, r27
    12be:	08 f4       	brcc	.+2      	; 0x12c2 <pf_read+0x60>
    12c0:	69 01       	movw	r12, r18
)
{
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	BYTE *rbuff = buff;
    12c2:	53 01       	movw	r10, r6
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
			fs->dsect = sect + fs->csect++;
		}
		rcnt = 512 - ((WORD)fs->fptr % 512);		/* Get partial sector data from sector buffer */
    12c4:	41 2c       	mov	r4, r1
    12c6:	f2 e0       	ldi	r31, 0x02	; 2
    12c8:	5f 2e       	mov	r5, r31
    12ca:	b3 c0       	rjmp	.+358    	; 0x1432 <pf_read+0x1d0>

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
    12cc:	e8 8c       	ldd	r14, Y+24	; 0x18
    12ce:	f9 8c       	ldd	r15, Y+25	; 0x19
    12d0:	0a 8d       	ldd	r16, Y+26	; 0x1a
    12d2:	1b 8d       	ldd	r17, Y+27	; 0x1b
    12d4:	d8 01       	movw	r26, r16
    12d6:	c7 01       	movw	r24, r14
    12d8:	91 70       	andi	r25, 0x01	; 1
    12da:	a0 70       	andi	r26, 0x00	; 0
    12dc:	b0 70       	andi	r27, 0x00	; 0
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	a1 05       	cpc	r26, r1
    12e2:	b1 05       	cpc	r27, r1
    12e4:	09 f0       	breq	.+2      	; 0x12e8 <pf_read+0x86>
    12e6:	6b c0       	rjmp	.+214    	; 0x13be <pf_read+0x15c>
			if ((fs->fptr / 512 % fs->csize) == 0) {	/* On the cluster boundary? */
    12e8:	c8 01       	movw	r24, r16
    12ea:	b7 01       	movw	r22, r14
    12ec:	e9 e0       	ldi	r30, 0x09	; 9
    12ee:	96 95       	lsr	r25
    12f0:	87 95       	ror	r24
    12f2:	77 95       	ror	r23
    12f4:	67 95       	ror	r22
    12f6:	ea 95       	dec	r30
    12f8:	d1 f7       	brne	.-12     	; 0x12ee <pf_read+0x8c>
    12fa:	29 81       	ldd	r18, Y+1	; 0x01
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	40 e0       	ldi	r20, 0x00	; 0
    1300:	50 e0       	ldi	r21, 0x00	; 0
    1302:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__udivmodsi4>
    1306:	61 15       	cp	r22, r1
    1308:	71 05       	cpc	r23, r1
    130a:	81 05       	cpc	r24, r1
    130c:	91 05       	cpc	r25, r1
    130e:	d9 f4       	brne	.+54     	; 0x1346 <pf_read+0xe4>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
    1310:	e1 14       	cp	r14, r1
    1312:	f1 04       	cpc	r15, r1
    1314:	01 05       	cpc	r16, r1
    1316:	11 05       	cpc	r17, r1
    1318:	29 f4       	brne	.+10     	; 0x1324 <pf_read+0xc2>
    131a:	68 a1       	ldd	r22, Y+32	; 0x20
    131c:	79 a1       	ldd	r23, Y+33	; 0x21
    131e:	8a a1       	ldd	r24, Y+34	; 0x22
    1320:	9b a1       	ldd	r25, Y+35	; 0x23
    1322:	06 c0       	rjmp	.+12     	; 0x1330 <pf_read+0xce>
    1324:	6c a1       	ldd	r22, Y+36	; 0x24
    1326:	7d a1       	ldd	r23, Y+37	; 0x25
    1328:	8e a1       	ldd	r24, Y+38	; 0x26
    132a:	9f a1       	ldd	r25, Y+39	; 0x27
    132c:	0e 94 12 04 	call	0x824	; 0x824 <get_fat>
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fr_abort;
    1330:	62 30       	cpi	r22, 0x02	; 2
    1332:	71 05       	cpc	r23, r1
    1334:	81 05       	cpc	r24, r1
    1336:	91 05       	cpc	r25, r1
    1338:	08 f4       	brcc	.+2      	; 0x133c <pf_read+0xda>
    133a:	82 c0       	rjmp	.+260    	; 0x1440 <pf_read+0x1de>
				fs->curr_clust = clst;				/* Update current cluster */
    133c:	6c a3       	std	Y+36, r22	; 0x24
    133e:	7d a3       	std	Y+37, r23	; 0x25
    1340:	8e a3       	std	Y+38, r24	; 0x26
    1342:	9f a3       	std	Y+39, r25	; 0x27
				fs->csect = 0;						/* Reset sector offset in the cluster */
    1344:	1b 82       	std	Y+3, r1	; 0x03
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    1346:	00 91 1b 01 	lds	r16, 0x011B
    134a:	10 91 1c 01 	lds	r17, 0x011C


	clst -= 2;
    134e:	2c a1       	ldd	r18, Y+36	; 0x24
    1350:	3d a1       	ldd	r19, Y+37	; 0x25
    1352:	4e a1       	ldd	r20, Y+38	; 0x26
    1354:	5f a1       	ldd	r21, Y+39	; 0x27
    1356:	22 50       	subi	r18, 0x02	; 2
    1358:	30 40       	sbci	r19, 0x00	; 0
    135a:	40 40       	sbci	r20, 0x00	; 0
    135c:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    135e:	f8 01       	movw	r30, r16
    1360:	80 85       	ldd	r24, Z+8	; 0x08
    1362:	91 85       	ldd	r25, Z+9	; 0x09
    1364:	a2 85       	ldd	r26, Z+10	; 0x0a
    1366:	b3 85       	ldd	r27, Z+11	; 0x0b
    1368:	02 97       	sbiw	r24, 0x02	; 2
    136a:	a1 09       	sbc	r26, r1
    136c:	b1 09       	sbc	r27, r1
    136e:	28 17       	cp	r18, r24
    1370:	39 07       	cpc	r19, r25
    1372:	4a 07       	cpc	r20, r26
    1374:	5b 07       	cpc	r21, r27
    1376:	08 f0       	brcs	.+2      	; 0x137a <pf_read+0x118>
    1378:	63 c0       	rjmp	.+198    	; 0x1440 <pf_read+0x1de>
	return (DWORD)clst * fs->csize + fs->database;
    137a:	61 81       	ldd	r22, Z+1	; 0x01
    137c:	70 e0       	ldi	r23, 0x00	; 0
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__mulsi3>
    1386:	9b 01       	movw	r18, r22
    1388:	ac 01       	movw	r20, r24
    138a:	f8 01       	movw	r30, r16
    138c:	84 89       	ldd	r24, Z+20	; 0x14
    138e:	95 89       	ldd	r25, Z+21	; 0x15
    1390:	a6 89       	ldd	r26, Z+22	; 0x16
    1392:	b7 89       	ldd	r27, Z+23	; 0x17
    1394:	28 0f       	add	r18, r24
    1396:	39 1f       	adc	r19, r25
    1398:	4a 1f       	adc	r20, r26
    139a:	5b 1f       	adc	r21, r27
				if (clst <= 1) goto fr_abort;
				fs->curr_clust = clst;				/* Update current cluster */
				fs->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
    139c:	21 15       	cp	r18, r1
    139e:	31 05       	cpc	r19, r1
    13a0:	41 05       	cpc	r20, r1
    13a2:	51 05       	cpc	r21, r1
    13a4:	09 f4       	brne	.+2      	; 0x13a8 <pf_read+0x146>
    13a6:	4c c0       	rjmp	.+152    	; 0x1440 <pf_read+0x1de>
			fs->dsect = sect + fs->csect++;
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	28 0f       	add	r18, r24
    13ac:	31 1d       	adc	r19, r1
    13ae:	41 1d       	adc	r20, r1
    13b0:	51 1d       	adc	r21, r1
    13b2:	28 a7       	std	Y+40, r18	; 0x28
    13b4:	39 a7       	std	Y+41, r19	; 0x29
    13b6:	4a a7       	std	Y+42, r20	; 0x2a
    13b8:	5b a7       	std	Y+43, r21	; 0x2b
    13ba:	8f 5f       	subi	r24, 0xFF	; 255
    13bc:	8b 83       	std	Y+3, r24	; 0x03
		}
		rcnt = 512 - ((WORD)fs->fptr % 512);		/* Get partial sector data from sector buffer */
    13be:	08 8d       	ldd	r16, Y+24	; 0x18
    13c0:	19 8d       	ldd	r17, Y+25	; 0x19
    13c2:	2a 8d       	ldd	r18, Y+26	; 0x1a
    13c4:	3b 8d       	ldd	r19, Y+27	; 0x1b
    13c6:	c8 01       	movw	r24, r16
    13c8:	91 70       	andi	r25, 0x01	; 1
    13ca:	a2 01       	movw	r20, r4
    13cc:	48 1b       	sub	r20, r24
    13ce:	59 0b       	sbc	r21, r25
    13d0:	76 01       	movw	r14, r12
    13d2:	4c 15       	cp	r20, r12
    13d4:	5d 05       	cpc	r21, r13
    13d6:	08 f4       	brcc	.+2      	; 0x13da <pf_read+0x178>
    13d8:	7a 01       	movw	r14, r20
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
    13da:	61 14       	cp	r6, r1
    13dc:	71 04       	cpc	r7, r1
    13de:	19 f4       	brne	.+6      	; 0x13e6 <pf_read+0x184>
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	01 c0       	rjmp	.+2      	; 0x13e8 <pf_read+0x186>
    13e6:	c5 01       	movw	r24, r10
    13e8:	48 a5       	ldd	r20, Y+40	; 0x28
    13ea:	59 a5       	ldd	r21, Y+41	; 0x29
    13ec:	6a a5       	ldd	r22, Y+42	; 0x2a
    13ee:	7b a5       	ldd	r23, Y+43	; 0x2b
    13f0:	98 01       	movw	r18, r16
    13f2:	31 70       	andi	r19, 0x01	; 1
    13f4:	87 01       	movw	r16, r14
    13f6:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <disk_readp>
		if (dr) goto fr_abort;
    13fa:	89 2b       	or	r24, r25
    13fc:	09 f5       	brne	.+66     	; 0x1440 <pf_read+0x1de>
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
    13fe:	c7 01       	movw	r24, r14
    1400:	a0 e0       	ldi	r26, 0x00	; 0
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	28 8d       	ldd	r18, Y+24	; 0x18
    1406:	39 8d       	ldd	r19, Y+25	; 0x19
    1408:	4a 8d       	ldd	r20, Y+26	; 0x1a
    140a:	5b 8d       	ldd	r21, Y+27	; 0x1b
    140c:	28 0f       	add	r18, r24
    140e:	39 1f       	adc	r19, r25
    1410:	4a 1f       	adc	r20, r26
    1412:	5b 1f       	adc	r21, r27
    1414:	28 8f       	std	Y+24, r18	; 0x18
    1416:	39 8f       	std	Y+25, r19	; 0x19
    1418:	4a 8f       	std	Y+26, r20	; 0x1a
    141a:	5b 8f       	std	Y+27, r21	; 0x1b
    141c:	ae 0c       	add	r10, r14
    141e:	bf 1c       	adc	r11, r15
		btr -= rcnt; *br += rcnt;
    1420:	ce 18       	sub	r12, r14
    1422:	df 08       	sbc	r13, r15
    1424:	f4 01       	movw	r30, r8
    1426:	80 81       	ld	r24, Z
    1428:	91 81       	ldd	r25, Z+1	; 0x01
    142a:	8e 0d       	add	r24, r14
    142c:	9f 1d       	adc	r25, r15
    142e:	91 83       	std	Z+1, r25	; 0x01
    1430:	80 83       	st	Z, r24
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
    1432:	c1 14       	cp	r12, r1
    1434:	d1 04       	cpc	r13, r1
    1436:	09 f0       	breq	.+2      	; 0x143a <pf_read+0x1d8>
    1438:	49 cf       	rjmp	.-366    	; 0x12cc <pf_read+0x6a>
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	03 c0       	rjmp	.+6      	; 0x1446 <pf_read+0x1e4>
	}

	return FR_OK;

fr_abort:
	fs->flag = 0;
    1440:	1a 82       	std	Y+2, r1	; 0x02
    1442:	21 e0       	ldi	r18, 0x01	; 1
    1444:	30 e0       	ldi	r19, 0x00	; 0
	return FR_DISK_ERR;
}
    1446:	c9 01       	movw	r24, r18
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
    144c:	e0 e1       	ldi	r30, 0x10	; 16
    144e:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <__epilogue_restores__+0x4>

00001452 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    1452:	a0 e0       	ldi	r26, 0x00	; 0
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	ef e2       	ldi	r30, 0x2F	; 47
    1458:	fa e0       	ldi	r31, 0x0A	; 10
    145a:	0c 94 3b 10 	jmp	0x2076	; 0x2076 <__prologue_saves__+0x10>
    145e:	b8 2e       	mov	r11, r24
    1460:	a9 2e       	mov	r10, r25
    1462:	6a 01       	movw	r12, r20
    1464:	7b 01       	movw	r14, r22
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
    1466:	2e ef       	ldi	r18, 0xFE	; 254
    1468:	31 e0       	ldi	r19, 0x01	; 1
    146a:	02 e0       	ldi	r16, 0x02	; 2
    146c:	10 e0       	ldi	r17, 0x00	; 0
    146e:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <disk_readp>
    1472:	89 2b       	or	r24, r25
    1474:	11 f0       	breq	.+4      	; 0x147a <check_fs+0x28>
    1476:	23 e0       	ldi	r18, 0x03	; 3
    1478:	33 c0       	rjmp	.+102    	; 0x14e0 <check_fs+0x8e>
		return 3;
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
    147a:	cb 2d       	mov	r28, r11
    147c:	da 2d       	mov	r29, r10
    147e:	88 81       	ld	r24, Y
    1480:	99 81       	ldd	r25, Y+1	; 0x01
    1482:	85 55       	subi	r24, 0x55	; 85
    1484:	9a 4a       	sbci	r25, 0xAA	; 170
    1486:	11 f0       	breq	.+4      	; 0x148c <check_fs+0x3a>
    1488:	22 e0       	ldi	r18, 0x02	; 2
    148a:	2a c0       	rjmp	.+84     	; 0x14e0 <check_fs+0x8e>
		return 2;

	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
    148c:	8b 2d       	mov	r24, r11
    148e:	9a 2d       	mov	r25, r10
    1490:	b7 01       	movw	r22, r14
    1492:	a6 01       	movw	r20, r12
    1494:	26 e3       	ldi	r18, 0x36	; 54
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	02 e0       	ldi	r16, 0x02	; 2
    149a:	10 e0       	ldi	r17, 0x00	; 0
    149c:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <disk_readp>
    14a0:	89 2b       	or	r24, r25
    14a2:	39 f4       	brne	.+14     	; 0x14b2 <check_fs+0x60>
    14a4:	88 81       	ld	r24, Y
    14a6:	99 81       	ldd	r25, Y+1	; 0x01
    14a8:	86 54       	subi	r24, 0x46	; 70
    14aa:	91 44       	sbci	r25, 0x41	; 65
    14ac:	11 f4       	brne	.+4      	; 0x14b2 <check_fs+0x60>
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	17 c0       	rjmp	.+46     	; 0x14e0 <check_fs+0x8e>
		return 0;
#if _FS_FAT32
	if (!disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
    14b2:	8b 2d       	mov	r24, r11
    14b4:	9a 2d       	mov	r25, r10
    14b6:	b7 01       	movw	r22, r14
    14b8:	a6 01       	movw	r20, r12
    14ba:	22 e5       	ldi	r18, 0x52	; 82
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	02 e0       	ldi	r16, 0x02	; 2
    14c0:	10 e0       	ldi	r17, 0x00	; 0
    14c2:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <disk_readp>
    14c6:	89 2b       	or	r24, r25
    14c8:	11 f0       	breq	.+4      	; 0x14ce <check_fs+0x7c>
    14ca:	21 e0       	ldi	r18, 0x01	; 1
    14cc:	09 c0       	rjmp	.+18     	; 0x14e0 <check_fs+0x8e>
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	88 81       	ld	r24, Y
    14d2:	99 81       	ldd	r25, Y+1	; 0x01
    14d4:	86 54       	subi	r24, 0x46	; 70
    14d6:	91 44       	sbci	r25, 0x41	; 65
    14d8:	09 f4       	brne	.+2      	; 0x14dc <check_fs+0x8a>
    14da:	21 e0       	ldi	r18, 0x01	; 1
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	28 27       	eor	r18, r24
		return 0;
#endif
	return 1;
}
    14e0:	82 2f       	mov	r24, r18
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
    14e6:	ea e0       	ldi	r30, 0x0A	; 10
    14e8:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__epilogue_restores__+0x10>

000014ec <pf_write>:
FRESULT pf_write (
	const void* buff,	/* Pointer to the data to be written */
	WORD btw,			/* Number of bytes to write (0:Finalize the current write operation) */
	WORD* bw			/* Pointer to number of bytes written */
)
{
    14ec:	a0 e0       	ldi	r26, 0x00	; 0
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	ec e7       	ldi	r30, 0x7C	; 124
    14f2:	fa e0       	ldi	r31, 0x0A	; 10
    14f4:	0c 94 35 10 	jmp	0x206a	; 0x206a <__prologue_saves__+0x4>
    14f8:	fc 01       	movw	r30, r24
    14fa:	5b 01       	movw	r10, r22
    14fc:	3a 01       	movw	r6, r20
	CLUST clst;
	DWORD sect, remain;
	const BYTE *p = buff;
	WORD wcnt;
	FATFS *fs = FatFs;
    14fe:	c0 91 1b 01 	lds	r28, 0x011B
    1502:	d0 91 1c 01 	lds	r29, 0x011C


	*bw = 0;
    1506:	da 01       	movw	r26, r20
    1508:	1d 92       	st	X+, r1
    150a:	1c 92       	st	X, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    150c:	20 97       	sbiw	r28, 0x00	; 0
    150e:	19 f4       	brne	.+6      	; 0x1516 <pf_write+0x2a>
    1510:	26 e0       	ldi	r18, 0x06	; 6
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	0b c1       	rjmp	.+534    	; 0x172c <pf_write+0x240>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	80 fd       	sbrc	r24, 0
    151c:	03 c0       	rjmp	.+6      	; 0x1524 <pf_write+0x38>
    151e:	25 e0       	ldi	r18, 0x05	; 5
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	04 c1       	rjmp	.+520    	; 0x172c <pf_write+0x240>
    1524:	80 74       	andi	r24, 0x40	; 64
    1526:	90 70       	andi	r25, 0x00	; 0
		return FR_NOT_OPENED;

	if (!btw) {		/* Finalize request */
    1528:	61 15       	cp	r22, r1
    152a:	71 05       	cpc	r23, r1
    152c:	89 f4       	brne	.+34     	; 0x1550 <pf_write+0x64>
		if ((fs->flag & FA__WIP) && disk_writep(0, 0)) goto fw_abort;
    152e:	89 2b       	or	r24, r25
    1530:	59 f0       	breq	.+22     	; 0x1548 <pf_write+0x5c>
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	40 e0       	ldi	r20, 0x00	; 0
    1538:	50 e0       	ldi	r21, 0x00	; 0
    153a:	60 e0       	ldi	r22, 0x00	; 0
    153c:	70 e0       	ldi	r23, 0x00	; 0
    153e:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <disk_writep>
    1542:	89 2b       	or	r24, r25
    1544:	09 f0       	breq	.+2      	; 0x1548 <pf_write+0x5c>
    1546:	ef c0       	rjmp	.+478    	; 0x1726 <pf_write+0x23a>
		fs->flag &= ~FA__WIP;
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	8f 7b       	andi	r24, 0xBF	; 191
    154c:	8a 83       	std	Y+2, r24	; 0x02
    154e:	e8 c0       	rjmp	.+464    	; 0x1720 <pf_write+0x234>
		return FR_OK;
	} else {		/* Write data request */
		if (!(fs->flag & FA__WIP))		/* Round down fptr to the sector boundary */
    1550:	89 2b       	or	r24, r25
    1552:	51 f4       	brne	.+20     	; 0x1568 <pf_write+0x7c>
			fs->fptr &= 0xFFFFFE00;
    1554:	88 8d       	ldd	r24, Y+24	; 0x18
    1556:	99 8d       	ldd	r25, Y+25	; 0x19
    1558:	aa 8d       	ldd	r26, Y+26	; 0x1a
    155a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    155c:	80 70       	andi	r24, 0x00	; 0
    155e:	9e 7f       	andi	r25, 0xFE	; 254
    1560:	88 8f       	std	Y+24, r24	; 0x18
    1562:	99 8f       	std	Y+25, r25	; 0x19
    1564:	aa 8f       	std	Y+26, r26	; 0x1a
    1566:	bb 8f       	std	Y+27, r27	; 0x1b
	}
	remain = fs->fsize - fs->fptr;
    1568:	2c 8d       	ldd	r18, Y+28	; 0x1c
    156a:	3d 8d       	ldd	r19, Y+29	; 0x1d
    156c:	4e 8d       	ldd	r20, Y+30	; 0x1e
    156e:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1570:	88 8d       	ldd	r24, Y+24	; 0x18
    1572:	99 8d       	ldd	r25, Y+25	; 0x19
    1574:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1576:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1578:	28 1b       	sub	r18, r24
    157a:	39 0b       	sbc	r19, r25
    157c:	4a 0b       	sbc	r20, r26
    157e:	5b 0b       	sbc	r21, r27
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */
    1580:	c5 01       	movw	r24, r10
    1582:	a0 e0       	ldi	r26, 0x00	; 0
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	28 17       	cp	r18, r24
    1588:	39 07       	cpc	r19, r25
    158a:	4a 07       	cpc	r20, r26
    158c:	5b 07       	cpc	r21, r27
    158e:	08 f4       	brcc	.+2      	; 0x1592 <pf_write+0xa6>
    1590:	59 01       	movw	r10, r18
	WORD* bw			/* Pointer to number of bytes written */
)
{
	CLUST clst;
	DWORD sect, remain;
	const BYTE *p = buff;
    1592:	4f 01       	movw	r8, r30
			if (!sect) goto fw_abort;
			fs->dsect = sect + fs->csect++;
			if (disk_writep(0, fs->dsect)) goto fw_abort;	/* Initiate a sector write operation */
			fs->flag |= FA__WIP;
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
    1594:	41 2c       	mov	r4, r1
    1596:	b2 e0       	ldi	r27, 0x02	; 2
    1598:	5b 2e       	mov	r5, r27
    159a:	be c0       	rjmp	.+380    	; 0x1718 <pf_write+0x22c>
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */

	while (btw)	{									/* Repeat until all data transferred */
		if (((WORD)fs->fptr % 512) == 0) {				/* On the sector boundary? */
    159c:	e8 8c       	ldd	r14, Y+24	; 0x18
    159e:	f9 8c       	ldd	r15, Y+25	; 0x19
    15a0:	0a 8d       	ldd	r16, Y+26	; 0x1a
    15a2:	1b 8d       	ldd	r17, Y+27	; 0x1b
    15a4:	c7 01       	movw	r24, r14
    15a6:	91 70       	andi	r25, 0x01	; 1
    15a8:	89 2b       	or	r24, r25
    15aa:	09 f0       	breq	.+2      	; 0x15ae <pf_write+0xc2>
    15ac:	77 c0       	rjmp	.+238    	; 0x169c <pf_write+0x1b0>
			if ((fs->fptr / 512 % fs->csize) == 0) {	/* On the cluster boundary? */
    15ae:	c8 01       	movw	r24, r16
    15b0:	b7 01       	movw	r22, r14
    15b2:	a9 e0       	ldi	r26, 0x09	; 9
    15b4:	96 95       	lsr	r25
    15b6:	87 95       	ror	r24
    15b8:	77 95       	ror	r23
    15ba:	67 95       	ror	r22
    15bc:	aa 95       	dec	r26
    15be:	d1 f7       	brne	.-12     	; 0x15b4 <pf_write+0xc8>
    15c0:	29 81       	ldd	r18, Y+1	; 0x01
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	40 e0       	ldi	r20, 0x00	; 0
    15c6:	50 e0       	ldi	r21, 0x00	; 0
    15c8:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__udivmodsi4>
    15cc:	61 15       	cp	r22, r1
    15ce:	71 05       	cpc	r23, r1
    15d0:	81 05       	cpc	r24, r1
    15d2:	91 05       	cpc	r25, r1
    15d4:	d9 f4       	brne	.+54     	; 0x160c <pf_write+0x120>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
    15d6:	e1 14       	cp	r14, r1
    15d8:	f1 04       	cpc	r15, r1
    15da:	01 05       	cpc	r16, r1
    15dc:	11 05       	cpc	r17, r1
    15de:	29 f4       	brne	.+10     	; 0x15ea <pf_write+0xfe>
    15e0:	68 a1       	ldd	r22, Y+32	; 0x20
    15e2:	79 a1       	ldd	r23, Y+33	; 0x21
    15e4:	8a a1       	ldd	r24, Y+34	; 0x22
    15e6:	9b a1       	ldd	r25, Y+35	; 0x23
    15e8:	06 c0       	rjmp	.+12     	; 0x15f6 <pf_write+0x10a>
    15ea:	6c a1       	ldd	r22, Y+36	; 0x24
    15ec:	7d a1       	ldd	r23, Y+37	; 0x25
    15ee:	8e a1       	ldd	r24, Y+38	; 0x26
    15f0:	9f a1       	ldd	r25, Y+39	; 0x27
    15f2:	0e 94 12 04 	call	0x824	; 0x824 <get_fat>
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fw_abort;
    15f6:	62 30       	cpi	r22, 0x02	; 2
    15f8:	71 05       	cpc	r23, r1
    15fa:	81 05       	cpc	r24, r1
    15fc:	91 05       	cpc	r25, r1
    15fe:	08 f4       	brcc	.+2      	; 0x1602 <pf_write+0x116>
    1600:	92 c0       	rjmp	.+292    	; 0x1726 <pf_write+0x23a>
				fs->curr_clust = clst;				/* Update current cluster */
    1602:	6c a3       	std	Y+36, r22	; 0x24
    1604:	7d a3       	std	Y+37, r23	; 0x25
    1606:	8e a3       	std	Y+38, r24	; 0x26
    1608:	9f a3       	std	Y+39, r25	; 0x27
				fs->csect = 0;						/* Reset sector offset in the cluster */
    160a:	1b 82       	std	Y+3, r1	; 0x03
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    160c:	00 91 1b 01 	lds	r16, 0x011B
    1610:	10 91 1c 01 	lds	r17, 0x011C


	clst -= 2;
    1614:	2c a1       	ldd	r18, Y+36	; 0x24
    1616:	3d a1       	ldd	r19, Y+37	; 0x25
    1618:	4e a1       	ldd	r20, Y+38	; 0x26
    161a:	5f a1       	ldd	r21, Y+39	; 0x27
    161c:	22 50       	subi	r18, 0x02	; 2
    161e:	30 40       	sbci	r19, 0x00	; 0
    1620:	40 40       	sbci	r20, 0x00	; 0
    1622:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1624:	f8 01       	movw	r30, r16
    1626:	80 85       	ldd	r24, Z+8	; 0x08
    1628:	91 85       	ldd	r25, Z+9	; 0x09
    162a:	a2 85       	ldd	r26, Z+10	; 0x0a
    162c:	b3 85       	ldd	r27, Z+11	; 0x0b
    162e:	02 97       	sbiw	r24, 0x02	; 2
    1630:	a1 09       	sbc	r26, r1
    1632:	b1 09       	sbc	r27, r1
    1634:	28 17       	cp	r18, r24
    1636:	39 07       	cpc	r19, r25
    1638:	4a 07       	cpc	r20, r26
    163a:	5b 07       	cpc	r21, r27
    163c:	08 f0       	brcs	.+2      	; 0x1640 <pf_write+0x154>
    163e:	73 c0       	rjmp	.+230    	; 0x1726 <pf_write+0x23a>
	return (DWORD)clst * fs->csize + fs->database;
    1640:	61 81       	ldd	r22, Z+1	; 0x01
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__mulsi3>
    164c:	9b 01       	movw	r18, r22
    164e:	ac 01       	movw	r20, r24
    1650:	f8 01       	movw	r30, r16
    1652:	84 89       	ldd	r24, Z+20	; 0x14
    1654:	95 89       	ldd	r25, Z+21	; 0x15
    1656:	a6 89       	ldd	r26, Z+22	; 0x16
    1658:	b7 89       	ldd	r27, Z+23	; 0x17
    165a:	28 0f       	add	r18, r24
    165c:	39 1f       	adc	r19, r25
    165e:	4a 1f       	adc	r20, r26
    1660:	5b 1f       	adc	r21, r27
				if (clst <= 1) goto fw_abort;
				fs->curr_clust = clst;				/* Update current cluster */
				fs->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fw_abort;
    1662:	21 15       	cp	r18, r1
    1664:	31 05       	cpc	r19, r1
    1666:	41 05       	cpc	r20, r1
    1668:	51 05       	cpc	r21, r1
    166a:	09 f4       	brne	.+2      	; 0x166e <pf_write+0x182>
    166c:	5c c0       	rjmp	.+184    	; 0x1726 <pf_write+0x23a>
			fs->dsect = sect + fs->csect++;
    166e:	8b 81       	ldd	r24, Y+3	; 0x03
    1670:	ba 01       	movw	r22, r20
    1672:	a9 01       	movw	r20, r18
    1674:	48 0f       	add	r20, r24
    1676:	51 1d       	adc	r21, r1
    1678:	61 1d       	adc	r22, r1
    167a:	71 1d       	adc	r23, r1
    167c:	48 a7       	std	Y+40, r20	; 0x28
    167e:	59 a7       	std	Y+41, r21	; 0x29
    1680:	6a a7       	std	Y+42, r22	; 0x2a
    1682:	7b a7       	std	Y+43, r23	; 0x2b
    1684:	8f 5f       	subi	r24, 0xFF	; 255
    1686:	8b 83       	std	Y+3, r24	; 0x03
			if (disk_writep(0, fs->dsect)) goto fw_abort;	/* Initiate a sector write operation */
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <disk_writep>
    1690:	89 2b       	or	r24, r25
    1692:	09 f0       	breq	.+2      	; 0x1696 <pf_write+0x1aa>
    1694:	48 c0       	rjmp	.+144    	; 0x1726 <pf_write+0x23a>
			fs->flag |= FA__WIP;
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	80 64       	ori	r24, 0x40	; 64
    169a:	8a 83       	std	Y+2, r24	; 0x02
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
    169c:	88 8d       	ldd	r24, Y+24	; 0x18
    169e:	99 8d       	ldd	r25, Y+25	; 0x19
    16a0:	91 70       	andi	r25, 0x01	; 1
    16a2:	92 01       	movw	r18, r4
    16a4:	28 1b       	sub	r18, r24
    16a6:	39 0b       	sbc	r19, r25
    16a8:	65 01       	movw	r12, r10
    16aa:	2a 15       	cp	r18, r10
    16ac:	3b 05       	cpc	r19, r11
    16ae:	08 f4       	brcc	.+2      	; 0x16b2 <pf_write+0x1c6>
    16b0:	69 01       	movw	r12, r18
		if (wcnt > btw) wcnt = btw;
		if (disk_writep(p, wcnt)) goto fw_abort;	/* Send data to the sector */
    16b2:	76 01       	movw	r14, r12
    16b4:	00 e0       	ldi	r16, 0x00	; 0
    16b6:	10 e0       	ldi	r17, 0x00	; 0
    16b8:	c4 01       	movw	r24, r8
    16ba:	b8 01       	movw	r22, r16
    16bc:	a7 01       	movw	r20, r14
    16be:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <disk_writep>
    16c2:	89 2b       	or	r24, r25
    16c4:	81 f5       	brne	.+96     	; 0x1726 <pf_write+0x23a>
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
    16c6:	88 8d       	ldd	r24, Y+24	; 0x18
    16c8:	99 8d       	ldd	r25, Y+25	; 0x19
    16ca:	aa 8d       	ldd	r26, Y+26	; 0x1a
    16cc:	bb 8d       	ldd	r27, Y+27	; 0x1b
    16ce:	8e 0d       	add	r24, r14
    16d0:	9f 1d       	adc	r25, r15
    16d2:	a0 1f       	adc	r26, r16
    16d4:	b1 1f       	adc	r27, r17
    16d6:	9c 01       	movw	r18, r24
    16d8:	88 8f       	std	Y+24, r24	; 0x18
    16da:	99 8f       	std	Y+25, r25	; 0x19
    16dc:	aa 8f       	std	Y+26, r26	; 0x1a
    16de:	bb 8f       	std	Y+27, r27	; 0x1b
		btw -= wcnt; *bw += wcnt;
    16e0:	d3 01       	movw	r26, r6
    16e2:	8d 91       	ld	r24, X+
    16e4:	9c 91       	ld	r25, X
    16e6:	11 97       	sbiw	r26, 0x01	; 1
    16e8:	8c 0d       	add	r24, r12
    16ea:	9d 1d       	adc	r25, r13
    16ec:	8d 93       	st	X+, r24
    16ee:	9c 93       	st	X, r25
		if (((WORD)fs->fptr % 512) == 0) {
    16f0:	31 70       	andi	r19, 0x01	; 1
    16f2:	23 2b       	or	r18, r19
    16f4:	69 f4       	brne	.+26     	; 0x1710 <pf_write+0x224>
			if (disk_writep(0, 0)) goto fw_abort;	/* Finalize the currtent secter write operation */
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	40 e0       	ldi	r20, 0x00	; 0
    16fc:	50 e0       	ldi	r21, 0x00	; 0
    16fe:	60 e0       	ldi	r22, 0x00	; 0
    1700:	70 e0       	ldi	r23, 0x00	; 0
    1702:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <disk_writep>
    1706:	89 2b       	or	r24, r25
    1708:	71 f4       	brne	.+28     	; 0x1726 <pf_write+0x23a>
			fs->flag &= ~FA__WIP;
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	8f 7b       	andi	r24, 0xBF	; 191
    170e:	8a 83       	std	Y+2, r24	; 0x02
			fs->flag |= FA__WIP;
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
		if (wcnt > btw) wcnt = btw;
		if (disk_writep(p, wcnt)) goto fw_abort;	/* Send data to the sector */
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
    1710:	8c 0c       	add	r8, r12
    1712:	9d 1c       	adc	r9, r13
		btw -= wcnt; *bw += wcnt;
    1714:	ac 18       	sub	r10, r12
    1716:	bd 08       	sbc	r11, r13
			fs->fptr &= 0xFFFFFE00;
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */

	while (btw)	{									/* Repeat until all data transferred */
    1718:	a1 14       	cp	r10, r1
    171a:	b1 04       	cpc	r11, r1
    171c:	09 f0       	breq	.+2      	; 0x1720 <pf_write+0x234>
    171e:	3e cf       	rjmp	.-388    	; 0x159c <pf_write+0xb0>
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	03 c0       	rjmp	.+6      	; 0x172c <pf_write+0x240>
	}

	return FR_OK;

fw_abort:
	fs->flag = 0;
    1726:	1a 82       	std	Y+2, r1	; 0x02
    1728:	21 e0       	ldi	r18, 0x01	; 1
    172a:	30 e0       	ldi	r19, 0x00	; 0
	return FR_DISK_ERR;
}
    172c:	c9 01       	movw	r24, r18
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	e0 e1       	ldi	r30, 0x10	; 16
    1734:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <__epilogue_restores__+0x4>

00001738 <pf_mount>:
/*-----------------------------------------------------------------------*/

FRESULT pf_mount (
	FATFS *fs		/* Pointer to new file system object (NULL: Unmount) */
)
{
    1738:	a4 e2       	ldi	r26, 0x24	; 36
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	e2 ea       	ldi	r30, 0xA2	; 162
    173e:	fb e0       	ldi	r31, 0x0B	; 11
    1740:	0c 94 37 10 	jmp	0x206e	; 0x206e <__prologue_saves__+0x8>
    1744:	5c 01       	movw	r10, r24
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
    1746:	10 92 1c 01 	sts	0x011C, r1
    174a:	10 92 1b 01 	sts	0x011B, r1
	if (!fs) return FR_OK;				/* Unregister fs object */
    174e:	00 97       	sbiw	r24, 0x00	; 0
    1750:	09 f4       	brne	.+2      	; 0x1754 <pf_mount+0x1c>
    1752:	ee c0       	rjmp	.+476    	; 0x1930 <pf_mount+0x1f8>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
    1754:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <disk_initialize>
    1758:	80 ff       	sbrs	r24, 0
    175a:	03 c0       	rjmp	.+6      	; 0x1762 <pf_mount+0x2a>
    175c:	22 e0       	ldi	r18, 0x02	; 2
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	ef c0       	rjmp	.+478    	; 0x1940 <pf_mount+0x208>
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
    1762:	4e 01       	movw	r8, r28
    1764:	08 94       	sec
    1766:	81 1c       	adc	r8, r1
    1768:	91 1c       	adc	r9, r1
    176a:	c4 01       	movw	r24, r8
    176c:	40 e0       	ldi	r20, 0x00	; 0
    176e:	50 e0       	ldi	r21, 0x00	; 0
    1770:	60 e0       	ldi	r22, 0x00	; 0
    1772:	70 e0       	ldi	r23, 0x00	; 0
    1774:	0e 94 29 0a 	call	0x1452	; 0x1452 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
    1778:	81 30       	cpi	r24, 0x01	; 1
    177a:	21 f0       	breq	.+8      	; 0x1784 <pf_mount+0x4c>
    177c:	cc 24       	eor	r12, r12
    177e:	dd 24       	eor	r13, r13
    1780:	76 01       	movw	r14, r12
    1782:	1b c0       	rjmp	.+54     	; 0x17ba <pf_mount+0x82>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
    1784:	c4 01       	movw	r24, r8
    1786:	40 e0       	ldi	r20, 0x00	; 0
    1788:	50 e0       	ldi	r21, 0x00	; 0
    178a:	60 e0       	ldi	r22, 0x00	; 0
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	2e eb       	ldi	r18, 0xBE	; 190
    1790:	31 e0       	ldi	r19, 0x01	; 1
    1792:	00 e1       	ldi	r16, 0x10	; 16
    1794:	10 e0       	ldi	r17, 0x00	; 0
    1796:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <disk_readp>
    179a:	89 2b       	or	r24, r25
    179c:	09 f0       	breq	.+2      	; 0x17a0 <pf_mount+0x68>
    179e:	cb c0       	rjmp	.+406    	; 0x1936 <pf_mount+0x1fe>
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
    17a0:	8d 81       	ldd	r24, Y+5	; 0x05
    17a2:	88 23       	and	r24, r24
    17a4:	09 f4       	brne	.+2      	; 0x17a8 <pf_mount+0x70>
    17a6:	ca c0       	rjmp	.+404    	; 0x193c <pf_mount+0x204>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
    17a8:	c9 84       	ldd	r12, Y+9	; 0x09
    17aa:	da 84       	ldd	r13, Y+10	; 0x0a
    17ac:	eb 84       	ldd	r14, Y+11	; 0x0b
    17ae:	fc 84       	ldd	r15, Y+12	; 0x0c
				fmt = check_fs(buf, bsect);	/* Check the partition */
    17b0:	c4 01       	movw	r24, r8
    17b2:	b7 01       	movw	r22, r14
    17b4:	a6 01       	movw	r20, r12
    17b6:	0e 94 29 0a 	call	0x1452	; 0x1452 <check_fs>
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    17ba:	83 30       	cpi	r24, 0x03	; 3
    17bc:	09 f4       	brne	.+2      	; 0x17c0 <pf_mount+0x88>
    17be:	bb c0       	rjmp	.+374    	; 0x1936 <pf_mount+0x1fe>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    17c0:	88 23       	and	r24, r24
    17c2:	09 f0       	breq	.+2      	; 0x17c6 <pf_mount+0x8e>
    17c4:	bb c0       	rjmp	.+374    	; 0x193c <pf_mount+0x204>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
    17c6:	ce 01       	movw	r24, r28
    17c8:	01 96       	adiw	r24, 0x01	; 1
    17ca:	b7 01       	movw	r22, r14
    17cc:	a6 01       	movw	r20, r12
    17ce:	2d e0       	ldi	r18, 0x0D	; 13
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	04 e2       	ldi	r16, 0x24	; 36
    17d4:	10 e0       	ldi	r17, 0x00	; 0
    17d6:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <disk_readp>
    17da:	89 2b       	or	r24, r25
    17dc:	09 f0       	breq	.+2      	; 0x17e0 <pf_mount+0xa8>
    17de:	ab c0       	rjmp	.+342    	; 0x1936 <pf_mount+0x1fe>

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
    17e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    17e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    17e4:	bc 01       	movw	r22, r24
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	90 e0       	ldi	r25, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
    17ea:	61 15       	cp	r22, r1
    17ec:	71 05       	cpc	r23, r1
    17ee:	81 05       	cpc	r24, r1
    17f0:	91 05       	cpc	r25, r1
    17f2:	21 f4       	brne	.+8      	; 0x17fc <pf_mount+0xc4>
    17f4:	68 8d       	ldd	r22, Y+24	; 0x18
    17f6:	79 8d       	ldd	r23, Y+25	; 0x19
    17f8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17fa:	9b 8d       	ldd	r25, Y+27	; 0x1b

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
    17fc:	2c 81       	ldd	r18, Y+4	; 0x04
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e0       	ldi	r20, 0x00	; 0
    1802:	50 e0       	ldi	r21, 0x00	; 0
    1804:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__mulsi3>
    1808:	3b 01       	movw	r6, r22
    180a:	4c 01       	movw	r8, r24
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	9b 81       	ldd	r25, Y+3	; 0x03
    1810:	a0 e0       	ldi	r26, 0x00	; 0
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	c8 0e       	add	r12, r24
    1816:	d9 1e       	adc	r13, r25
    1818:	ea 1e       	adc	r14, r26
    181a:	fb 1e       	adc	r15, r27
    181c:	f5 01       	movw	r30, r10
    181e:	c4 86       	std	Z+12, r12	; 0x0c
    1820:	d5 86       	std	Z+13, r13	; 0x0d
    1822:	e6 86       	std	Z+14, r14	; 0x0e
    1824:	f7 86       	std	Z+15, r15	; 0x0f
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	81 83       	std	Z+1, r24	; 0x01
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
    182a:	2d 81       	ldd	r18, Y+5	; 0x05
    182c:	3e 81       	ldd	r19, Y+6	; 0x06
    182e:	35 83       	std	Z+5, r19	; 0x05
    1830:	24 83       	std	Z+4, r18	; 0x04
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
    1832:	8f 81       	ldd	r24, Y+7	; 0x07
    1834:	98 85       	ldd	r25, Y+8	; 0x08
    1836:	7c 01       	movw	r14, r24
    1838:	00 e0       	ldi	r16, 0x00	; 0
    183a:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
    183c:	e1 14       	cp	r14, r1
    183e:	f1 04       	cpc	r15, r1
    1840:	01 05       	cpc	r16, r1
    1842:	11 05       	cpc	r17, r1
    1844:	21 f4       	brne	.+8      	; 0x184e <pf_mount+0x116>
    1846:	ec 88       	ldd	r14, Y+20	; 0x14
    1848:	fd 88       	ldd	r15, Y+21	; 0x15
    184a:	0e 89       	ldd	r16, Y+22	; 0x16
    184c:	1f 89       	ldd	r17, Y+23	; 0x17
	mclst = (tsect						/* Last cluster# + 1 */
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	9b 81       	ldd	r25, Y+3	; 0x03
    1852:	a0 e0       	ldi	r26, 0x00	; 0
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	e8 1a       	sub	r14, r24
    1858:	f9 0a       	sbc	r15, r25
    185a:	0a 0b       	sbc	r16, r26
    185c:	1b 0b       	sbc	r17, r27
    185e:	e6 18       	sub	r14, r6
    1860:	f7 08       	sbc	r15, r7
    1862:	08 09       	sbc	r16, r8
    1864:	19 09       	sbc	r17, r9
    1866:	44 e0       	ldi	r20, 0x04	; 4
    1868:	36 95       	lsr	r19
    186a:	27 95       	ror	r18
    186c:	4a 95       	dec	r20
    186e:	e1 f7       	brne	.-8      	; 0x1868 <pf_mount+0x130>
    1870:	c9 01       	movw	r24, r18
    1872:	a0 e0       	ldi	r26, 0x00	; 0
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	e8 1a       	sub	r14, r24
    1878:	f9 0a       	sbc	r15, r25
    187a:	0a 0b       	sbc	r16, r26
    187c:	1b 0b       	sbc	r17, r27
    187e:	f5 01       	movw	r30, r10
    1880:	21 81       	ldd	r18, Z+1	; 0x01
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	40 e0       	ldi	r20, 0x00	; 0
    1886:	50 e0       	ldi	r21, 0x00	; 0
    1888:	c8 01       	movw	r24, r16
    188a:	b7 01       	movw	r22, r14
    188c:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__udivmodsi4>
    1890:	2e 5f       	subi	r18, 0xFE	; 254
    1892:	3f 4f       	sbci	r19, 0xFF	; 255
    1894:	4f 4f       	sbci	r20, 0xFF	; 255
    1896:	5f 4f       	sbci	r21, 0xFF	; 255
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->max_clust = (CLUST)mclst;
    1898:	f5 01       	movw	r30, r10
    189a:	20 87       	std	Z+8, r18	; 0x08
    189c:	31 87       	std	Z+9, r19	; 0x09
    189e:	42 87       	std	Z+10, r20	; 0x0a
    18a0:	53 87       	std	Z+11, r21	; 0x0b

	fmt = FS_FAT12;							/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;		/* Number of clusters >= 0xFF5 */
    18a2:	27 3f       	cpi	r18, 0xF7	; 247
    18a4:	ff e0       	ldi	r31, 0x0F	; 15
    18a6:	3f 07       	cpc	r19, r31
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	4f 07       	cpc	r20, r31
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	5f 07       	cpc	r21, r31
    18b0:	10 f4       	brcc	.+4      	; 0x18b6 <pf_mount+0x17e>
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	08 c0       	rjmp	.+16     	; 0x18c6 <pf_mount+0x18e>
	if (mclst >= 0xFFF7)					/* Number of clusters >= 0xFFF5 */
    18b6:	27 5f       	subi	r18, 0xF7	; 247
    18b8:	3f 4f       	sbci	r19, 0xFF	; 255
    18ba:	40 40       	sbci	r20, 0x00	; 0
    18bc:	50 40       	sbci	r21, 0x00	; 0
    18be:	10 f0       	brcs	.+4      	; 0x18c4 <pf_mount+0x18c>
    18c0:	83 e0       	ldi	r24, 0x03	; 3
    18c2:	01 c0       	rjmp	.+2      	; 0x18c6 <pf_mount+0x18e>
    18c4:	82 e0       	ldi	r24, 0x02	; 2
		fmt = FS_FAT32;
#else
		return FR_NO_FILESYSTEM;
#endif

	fs->fs_type = fmt;		/* FAT sub-type */
    18c6:	f5 01       	movw	r30, r10
    18c8:	80 83       	st	Z, r24
#if _FS_FAT32
	if (fmt == FS_FAT32)
    18ca:	83 30       	cpi	r24, 0x03	; 3
    18cc:	29 f4       	brne	.+10     	; 0x18d8 <pf_mount+0x1a0>
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
    18ce:	88 a1       	ldd	r24, Y+32	; 0x20
    18d0:	99 a1       	ldd	r25, Y+33	; 0x21
    18d2:	aa a1       	ldd	r26, Y+34	; 0x22
    18d4:	bb a1       	ldd	r27, Y+35	; 0x23
    18d6:	09 c0       	rjmp	.+18     	; 0x18ea <pf_mount+0x1b2>
	else
#endif
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    18d8:	f5 01       	movw	r30, r10
    18da:	84 85       	ldd	r24, Z+12	; 0x0c
    18dc:	95 85       	ldd	r25, Z+13	; 0x0d
    18de:	a6 85       	ldd	r26, Z+14	; 0x0e
    18e0:	b7 85       	ldd	r27, Z+15	; 0x0f
    18e2:	86 0d       	add	r24, r6
    18e4:	97 1d       	adc	r25, r7
    18e6:	a8 1d       	adc	r26, r8
    18e8:	b9 1d       	adc	r27, r9
    18ea:	80 8b       	std	Z+16, r24	; 0x10
    18ec:	91 8b       	std	Z+17, r25	; 0x11
    18ee:	a2 8b       	std	Z+18, r26	; 0x12
    18f0:	b3 8b       	std	Z+19, r27	; 0x13
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    18f2:	f5 01       	movw	r30, r10
    18f4:	84 81       	ldd	r24, Z+4	; 0x04
    18f6:	95 81       	ldd	r25, Z+5	; 0x05
    18f8:	24 e0       	ldi	r18, 0x04	; 4
    18fa:	96 95       	lsr	r25
    18fc:	87 95       	ror	r24
    18fe:	2a 95       	dec	r18
    1900:	e1 f7       	brne	.-8      	; 0x18fa <pf_mount+0x1c2>
    1902:	a0 e0       	ldi	r26, 0x00	; 0
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	24 85       	ldd	r18, Z+12	; 0x0c
    1908:	35 85       	ldd	r19, Z+13	; 0x0d
    190a:	46 85       	ldd	r20, Z+14	; 0x0e
    190c:	57 85       	ldd	r21, Z+15	; 0x0f
    190e:	82 0f       	add	r24, r18
    1910:	93 1f       	adc	r25, r19
    1912:	a4 1f       	adc	r26, r20
    1914:	b5 1f       	adc	r27, r21
    1916:	86 0d       	add	r24, r6
    1918:	97 1d       	adc	r25, r7
    191a:	a8 1d       	adc	r26, r8
    191c:	b9 1d       	adc	r27, r9
    191e:	84 8b       	std	Z+20, r24	; 0x14
    1920:	95 8b       	std	Z+21, r25	; 0x15
    1922:	a6 8b       	std	Z+22, r26	; 0x16
    1924:	b7 8b       	std	Z+23, r27	; 0x17

	fs->flag = 0;
    1926:	12 82       	std	Z+2, r1	; 0x02
	FatFs = fs;
    1928:	b0 92 1c 01 	sts	0x011C, r11
    192c:	a0 92 1b 01 	sts	0x011B, r10
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	05 c0       	rjmp	.+10     	; 0x1940 <pf_mount+0x208>

	return FR_OK;
    1936:	21 e0       	ldi	r18, 0x01	; 1
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <pf_mount+0x208>
    193c:	27 e0       	ldi	r18, 0x07	; 7
    193e:	30 e0       	ldi	r19, 0x00	; 0
}
    1940:	c9 01       	movw	r24, r18
    1942:	a4 96       	adiw	r28, 0x24	; 36
    1944:	ee e0       	ldi	r30, 0x0E	; 14
    1946:	0c 94 53 10 	jmp	0x20a6	; 0x20a6 <__epilogue_restores__+0x8>

0000194a <init_spi>:
/*-----------------------------------------------------------------------*/
void init_spi (void)
{
	WORD tmr;

	DESELECT();												// set default CS pin	
    194a:	5e 9a       	sbi	0x0b, 6	; 11
    194c:	84 ec       	ldi	r24, 0xC4	; 196
    194e:	99 e0       	ldi	r25, 0x09	; 9
	tmr = 2500;
	do
		asm volatile ("nop");
    1950:	00 00       	nop
	while (--tmr);
    1952:	01 97       	sbiw	r24, 0x01	; 1
    1954:	e9 f7       	brne	.-6      	; 0x1950 <init_spi+0x6>
	
	// Set spi direction: MOSI and SCK as output, MISO as input
	SPI_DDR |= (1 << DD_MOSI);
    1956:	25 9a       	sbi	0x04, 5	; 4
	SPI_DDR |= (1 << DD_SCK);
    1958:	27 9a       	sbi	0x04, 7	; 4
	
	// CS pin as output
	SD_CS_DDR |= (1 << SD_CS_PIN);
    195a:	56 9a       	sbi	0x0a, 6	; 10
    
	// Initialize SPI port, SPI enabled as master
    SPCR = (1<<SPE) | (1<<MSTR);
    195c:	80 e5       	ldi	r24, 0x50	; 80
    195e:	8c bd       	out	0x2c, r24	; 44
	
	// Set SPI at double speed
	SPSR |= (1 << SPI2X);
    1960:	8d b5       	in	r24, 0x2d	; 45
    1962:	81 60       	ori	r24, 0x01	; 1
    1964:	8d bd       	out	0x2d, r24	; 45
}
    1966:	08 95       	ret

00001968 <rcv_spi_m>:

BYTE rcv_spi_m(void)
{
	//send a dummy byte (0xFF) in order to receive a byte from the slave
	SPDR = 0xFF;
    1968:	8f ef       	ldi	r24, 0xFF	; 255
    196a:	8e bd       	out	0x2e, r24	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    196c:	0d b4       	in	r0, 0x2d	; 45
    196e:	07 fe       	sbrs	r0, 7
    1970:	fd cf       	rjmp	.-6      	; 0x196c <rcv_spi_m+0x4>
	;
	
	//return the read byte
	return SPDR;
    1972:	8e b5       	in	r24, 0x2e	; 46
	
}
    1974:	08 95       	ret

00001976 <xmit_spi>:
void xmit_spi(BYTE dat)
{
	//TODO
	//send a byte to the slave
	SPDR = dat;
    1976:	8e bd       	out	0x2e, r24	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    1978:	0d b4       	in	r0, 0x2d	; 45
    197a:	07 fe       	sbrs	r0, 7
    197c:	fd cf       	rjmp	.-6      	; 0x1978 <xmit_spi+0x2>
	;
	//wait for it to be serialized
}
    197e:	08 95       	ret

00001980 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    1980:	df 92       	push	r13
    1982:	ef 92       	push	r14
    1984:	ff 92       	push	r15
    1986:	0f 93       	push	r16
    1988:	1f 93       	push	r17
    198a:	d8 2e       	mov	r13, r24
    198c:	7a 01       	movw	r14, r20
    198e:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    1990:	87 ff       	sbrs	r24, 7
    1992:	0c c0       	rjmp	.+24     	; 0x19ac <send_cmd+0x2c>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    1994:	87 e7       	ldi	r24, 0x77	; 119
    1996:	40 e0       	ldi	r20, 0x00	; 0
    1998:	50 e0       	ldi	r21, 0x00	; 0
    199a:	60 e0       	ldi	r22, 0x00	; 0
    199c:	70 e0       	ldi	r23, 0x00	; 0
    199e:	0e 94 c0 0c 	call	0x1980	; 0x1980 <send_cmd>
		if (res > 1) return res;
    19a2:	82 30       	cpi	r24, 0x02	; 2
    19a4:	08 f0       	brcs	.+2      	; 0x19a8 <send_cmd+0x28>
    19a6:	49 c0       	rjmp	.+146    	; 0x1a3a <send_cmd+0xba>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    19a8:	8f e7       	ldi	r24, 0x7F	; 127
    19aa:	d8 22       	and	r13, r24
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card */
	DESELECT();
    19ac:	5e 9a       	sbi	0x0b, 6	; 11
	rcv_spi();
    19ae:	8f ef       	ldi	r24, 0xFF	; 255
    19b0:	8e bd       	out	0x2e, r24	; 46
    19b2:	0d b4       	in	r0, 0x2d	; 45
    19b4:	07 fe       	sbrs	r0, 7
    19b6:	fd cf       	rjmp	.-6      	; 0x19b2 <send_cmd+0x32>
    19b8:	8e b5       	in	r24, 0x2e	; 46
	SELECT();
    19ba:	5e 98       	cbi	0x0b, 6	; 11
	rcv_spi();
    19bc:	8f ef       	ldi	r24, 0xFF	; 255
    19be:	8e bd       	out	0x2e, r24	; 46
    19c0:	0d b4       	in	r0, 0x2d	; 45
    19c2:	07 fe       	sbrs	r0, 7
    19c4:	fd cf       	rjmp	.-6      	; 0x19c0 <send_cmd+0x40>
    19c6:	8e b5       	in	r24, 0x2e	; 46
}
void xmit_spi(BYTE dat)
{
	//TODO
	//send a byte to the slave
	SPDR = dat;
    19c8:	de bc       	out	0x2e, r13	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    19ca:	0d b4       	in	r0, 0x2d	; 45
    19cc:	07 fe       	sbrs	r0, 7
    19ce:	fd cf       	rjmp	.-6      	; 0x19ca <send_cmd+0x4a>
	SELECT();
	rcv_spi();

	/* Send a command packet */
	xmit_spi(cmd);						/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    19d0:	81 2f       	mov	r24, r17
    19d2:	99 27       	eor	r25, r25
    19d4:	aa 27       	eor	r26, r26
    19d6:	bb 27       	eor	r27, r27
}
void xmit_spi(BYTE dat)
{
	//TODO
	//send a byte to the slave
	SPDR = dat;
    19d8:	8e bd       	out	0x2e, r24	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    19da:	0d b4       	in	r0, 0x2d	; 45
    19dc:	07 fe       	sbrs	r0, 7
    19de:	fd cf       	rjmp	.-6      	; 0x19da <send_cmd+0x5a>
	rcv_spi();

	/* Send a command packet */
	xmit_spi(cmd);						/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    19e0:	c8 01       	movw	r24, r16
    19e2:	aa 27       	eor	r26, r26
    19e4:	bb 27       	eor	r27, r27
}
void xmit_spi(BYTE dat)
{
	//TODO
	//send a byte to the slave
	SPDR = dat;
    19e6:	8e bd       	out	0x2e, r24	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    19e8:	0d b4       	in	r0, 0x2d	; 45
    19ea:	07 fe       	sbrs	r0, 7
    19ec:	fd cf       	rjmp	.-6      	; 0x19e8 <send_cmd+0x68>

	/* Send a command packet */
	xmit_spi(cmd);						/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    19ee:	bb 27       	eor	r27, r27
    19f0:	a1 2f       	mov	r26, r17
    19f2:	90 2f       	mov	r25, r16
    19f4:	8f 2d       	mov	r24, r15
}
void xmit_spi(BYTE dat)
{
	//TODO
	//send a byte to the slave
	SPDR = dat;
    19f6:	8e bd       	out	0x2e, r24	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    19f8:	0d b4       	in	r0, 0x2d	; 45
    19fa:	07 fe       	sbrs	r0, 7
    19fc:	fd cf       	rjmp	.-6      	; 0x19f8 <send_cmd+0x78>
}
void xmit_spi(BYTE dat)
{
	//TODO
	//send a byte to the slave
	SPDR = dat;
    19fe:	ee bc       	out	0x2e, r14	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    1a00:	0d b4       	in	r0, 0x2d	; 45
    1a02:	07 fe       	sbrs	r0, 7
    1a04:	fd cf       	rjmp	.-6      	; 0x1a00 <send_cmd+0x80>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    1a06:	80 e4       	ldi	r24, 0x40	; 64
    1a08:	d8 16       	cp	r13, r24
    1a0a:	11 f4       	brne	.+4      	; 0x1a10 <send_cmd+0x90>
    1a0c:	85 e9       	ldi	r24, 0x95	; 149
    1a0e:	06 c0       	rjmp	.+12     	; 0x1a1c <send_cmd+0x9c>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    1a10:	88 e4       	ldi	r24, 0x48	; 72
    1a12:	d8 16       	cp	r13, r24
    1a14:	11 f4       	brne	.+4      	; 0x1a1a <send_cmd+0x9a>
    1a16:	87 e8       	ldi	r24, 0x87	; 135
    1a18:	01 c0       	rjmp	.+2      	; 0x1a1c <send_cmd+0x9c>
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
}
void xmit_spi(BYTE dat)
{
	//TODO
	//send a byte to the slave
	SPDR = dat;
    1a1c:	8e bd       	out	0x2e, r24	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    1a1e:	0d b4       	in	r0, 0x2d	; 45
    1a20:	07 fe       	sbrs	r0, 7
    1a22:	fd cf       	rjmp	.-6      	; 0x1a1e <send_cmd+0x9e>
    1a24:	9a e0       	ldi	r25, 0x0A	; 10
	xmit_spi(n);

	/* Receive a command response */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = rcv_spi();
    1a26:	2f ef       	ldi	r18, 0xFF	; 255
    1a28:	2e bd       	out	0x2e, r18	; 46
    1a2a:	0d b4       	in	r0, 0x2d	; 45
    1a2c:	07 fe       	sbrs	r0, 7
    1a2e:	fd cf       	rjmp	.-6      	; 0x1a2a <send_cmd+0xaa>
    1a30:	8e b5       	in	r24, 0x2e	; 46
	} while ((res & 0x80) && --n);
    1a32:	87 ff       	sbrs	r24, 7
    1a34:	02 c0       	rjmp	.+4      	; 0x1a3a <send_cmd+0xba>
    1a36:	91 50       	subi	r25, 0x01	; 1
    1a38:	b9 f7       	brne	.-18     	; 0x1a28 <send_cmd+0xa8>

	return res;			/* Return with the response value */
}
    1a3a:	1f 91       	pop	r17
    1a3c:	0f 91       	pop	r16
    1a3e:	ff 90       	pop	r15
    1a40:	ef 90       	pop	r14
    1a42:	df 90       	pop	r13
    1a44:	08 95       	ret

00001a46 <disk_readp>:
	BYTE *buff,		/* Pointer to the read buffer (NULL:Read bytes are forwarded to the stream) */
	DWORD lba,		/* Sector number (LBA) */
	WORD ofs,		/* Byte offset to read from (0..511) */
	WORD cnt		/* Number of bytes to read (ofs + cnt mus be <= 512) */
)
{
    1a46:	ef 92       	push	r14
    1a48:	ff 92       	push	r15
    1a4a:	0f 93       	push	r16
    1a4c:	1f 93       	push	r17
    1a4e:	cf 93       	push	r28
    1a50:	df 93       	push	r29
    1a52:	7c 01       	movw	r14, r24
    1a54:	e9 01       	movw	r28, r18
	DRESULT res;
	BYTE rc;
	WORD bc;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert to byte address if needed */
    1a56:	80 91 1f 01 	lds	r24, 0x011F
    1a5a:	83 fd       	sbrc	r24, 3
    1a5c:	07 c0       	rjmp	.+14     	; 0x1a6c <disk_readp+0x26>
    1a5e:	39 e0       	ldi	r19, 0x09	; 9
    1a60:	44 0f       	add	r20, r20
    1a62:	55 1f       	adc	r21, r21
    1a64:	66 1f       	adc	r22, r22
    1a66:	77 1f       	adc	r23, r23
    1a68:	3a 95       	dec	r19
    1a6a:	d1 f7       	brne	.-12     	; 0x1a60 <disk_readp+0x1a>

	res = RES_ERROR;
	if (send_cmd(CMD17, lba) == 0) {		/* READ_SINGLE_BLOCK */
    1a6c:	81 e5       	ldi	r24, 0x51	; 81
    1a6e:	0e 94 c0 0c 	call	0x1980	; 0x1980 <send_cmd>
    1a72:	88 23       	and	r24, r24
    1a74:	09 f0       	breq	.+2      	; 0x1a78 <disk_readp+0x32>
    1a76:	3f c0       	rjmp	.+126    	; 0x1af6 <disk_readp+0xb0>
    1a78:	80 e3       	ldi	r24, 0x30	; 48
    1a7a:	95 e7       	ldi	r25, 0x75	; 117

		bc = 30000;
		do {							/* Wait for data packet in timeout of 100ms */
			rc = rcv_spi();
    1a7c:	3f ef       	ldi	r19, 0xFF	; 255
    1a7e:	3e bd       	out	0x2e, r19	; 46
    1a80:	0d b4       	in	r0, 0x2d	; 45
    1a82:	07 fe       	sbrs	r0, 7
    1a84:	fd cf       	rjmp	.-6      	; 0x1a80 <disk_readp+0x3a>
    1a86:	2e b5       	in	r18, 0x2e	; 46
		} while (rc == 0xFF && --bc);
    1a88:	2f 3f       	cpi	r18, 0xFF	; 255
    1a8a:	19 f4       	brne	.+6      	; 0x1a92 <disk_readp+0x4c>
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	b9 f7       	brne	.-18     	; 0x1a7e <disk_readp+0x38>
    1a90:	32 c0       	rjmp	.+100    	; 0x1af6 <disk_readp+0xb0>

		if (rc == 0xFE) {				/* A data packet arrived */
    1a92:	2e 3f       	cpi	r18, 0xFE	; 254
    1a94:	81 f5       	brne	.+96     	; 0x1af6 <disk_readp+0xb0>
			bc = 514 - ofs - cnt;
    1a96:	22 27       	eor	r18, r18
    1a98:	33 27       	eor	r19, r19
    1a9a:	2c 1b       	sub	r18, r28
    1a9c:	3d 0b       	sbc	r19, r29
    1a9e:	2e 5f       	subi	r18, 0xFE	; 254
    1aa0:	3d 4f       	sbci	r19, 0xFD	; 253
    1aa2:	20 1b       	sub	r18, r16
    1aa4:	31 0b       	sbc	r19, r17

			/* Skip leading bytes */
			if (ofs) {
    1aa6:	20 97       	sbiw	r28, 0x00	; 0
    1aa8:	41 f0       	breq	.+16     	; 0x1aba <disk_readp+0x74>
				do rcv_spi(); while (--ofs);
    1aaa:	8f ef       	ldi	r24, 0xFF	; 255
    1aac:	8e bd       	out	0x2e, r24	; 46
    1aae:	0d b4       	in	r0, 0x2d	; 45
    1ab0:	07 fe       	sbrs	r0, 7
    1ab2:	fd cf       	rjmp	.-6      	; 0x1aae <disk_readp+0x68>
    1ab4:	9e b5       	in	r25, 0x2e	; 46
    1ab6:	21 97       	sbiw	r28, 0x01	; 1
    1ab8:	c9 f7       	brne	.-14     	; 0x1aac <disk_readp+0x66>
			}

			/* Receive a part of the sector */
			if (buff) {	/* Store data to the memory */
    1aba:	e1 14       	cp	r14, r1
    1abc:	f1 04       	cpc	r15, r1
    1abe:	79 f0       	breq	.+30     	; 0x1ade <disk_readp+0x98>
				do
					*buff++ = rcv_spi();
    1ac0:	9f ef       	ldi	r25, 0xFF	; 255
    1ac2:	9e bd       	out	0x2e, r25	; 46
    1ac4:	0d b4       	in	r0, 0x2d	; 45
    1ac6:	07 fe       	sbrs	r0, 7
    1ac8:	fd cf       	rjmp	.-6      	; 0x1ac4 <disk_readp+0x7e>
    1aca:	8e b5       	in	r24, 0x2e	; 46
    1acc:	f7 01       	movw	r30, r14
    1ace:	80 83       	st	Z, r24
				while (--cnt);
    1ad0:	01 50       	subi	r16, 0x01	; 1
    1ad2:	10 40       	sbci	r17, 0x00	; 0
    1ad4:	21 f0       	breq	.+8      	; 0x1ade <disk_readp+0x98>
			}

			/* Receive a part of the sector */
			if (buff) {	/* Store data to the memory */
				do
					*buff++ = rcv_spi();
    1ad6:	08 94       	sec
    1ad8:	e1 1c       	adc	r14, r1
    1ada:	f1 1c       	adc	r15, r1
    1adc:	f2 cf       	rjmp	.-28     	; 0x1ac2 <disk_readp+0x7c>
				while (--cnt);
			} 
			
			/* Skip trailing bytes and CRC */
			do rcv_spi(); while (--bc);
    1ade:	8f ef       	ldi	r24, 0xFF	; 255
    1ae0:	8e bd       	out	0x2e, r24	; 46
    1ae2:	0d b4       	in	r0, 0x2d	; 45
    1ae4:	07 fe       	sbrs	r0, 7
    1ae6:	fd cf       	rjmp	.-6      	; 0x1ae2 <disk_readp+0x9c>
    1ae8:	9e b5       	in	r25, 0x2e	; 46
    1aea:	21 50       	subi	r18, 0x01	; 1
    1aec:	30 40       	sbci	r19, 0x00	; 0
    1aee:	c1 f7       	brne	.-16     	; 0x1ae0 <disk_readp+0x9a>
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <disk_readp+0xb4>
    1af6:	21 e0       	ldi	r18, 0x01	; 1
    1af8:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	DESELECT();
    1afa:	5e 9a       	sbi	0x0b, 6	; 11
	rcv_spi();
    1afc:	8f ef       	ldi	r24, 0xFF	; 255
    1afe:	8e bd       	out	0x2e, r24	; 46
    1b00:	0d b4       	in	r0, 0x2d	; 45
    1b02:	07 fe       	sbrs	r0, 7
    1b04:	fd cf       	rjmp	.-6      	; 0x1b00 <disk_readp+0xba>
    1b06:	8e b5       	in	r24, 0x2e	; 46
	}

	release_spi();

	return res;
}
    1b08:	c9 01       	movw	r24, r18
    1b0a:	cd b7       	in	r28, 0x3d	; 61
    1b0c:	de b7       	in	r29, 0x3e	; 62
    1b0e:	e6 e0       	ldi	r30, 0x06	; 6
    1b10:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__epilogue_restores__+0x18>

00001b14 <disk_writep>:

DRESULT disk_writep (
	const BYTE *buff,	/* Pointer to the bytes to be written (NULL:Initiate/Finalize sector write) */
	DWORD sa			/* Number of bytes to send, Sector number (LBA) or zero */
)
{
    1b14:	fc 01       	movw	r30, r24
	static WORD wc;


	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
    1b16:	00 97       	sbiw	r24, 0x00	; 0
    1b18:	09 f1       	breq	.+66     	; 0x1b5c <disk_writep+0x48>
		bc = (WORD)sa;
    1b1a:	20 91 1d 01 	lds	r18, 0x011D
    1b1e:	30 91 1e 01 	lds	r19, 0x011E
    1b22:	0a c0       	rjmp	.+20     	; 0x1b38 <disk_writep+0x24>
		while (bc && wc) {		/* Send data bytes to the card */
			xmit_spi(*buff++);
    1b24:	80 81       	ld	r24, Z
}
void xmit_spi(BYTE dat)
{
	//TODO
	//send a byte to the slave
	SPDR = dat;
    1b26:	8e bd       	out	0x2e, r24	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    1b28:	0d b4       	in	r0, 0x2d	; 45
    1b2a:	07 fe       	sbrs	r0, 7
    1b2c:	fd cf       	rjmp	.-6      	; 0x1b28 <disk_writep+0x14>
	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
		bc = (WORD)sa;
		while (bc && wc) {		/* Send data bytes to the card */
			xmit_spi(*buff++);
    1b2e:	31 96       	adiw	r30, 0x01	; 1
			wc--; bc--;
    1b30:	41 50       	subi	r20, 0x01	; 1
    1b32:	50 40       	sbci	r21, 0x00	; 0
    1b34:	21 50       	subi	r18, 0x01	; 1
    1b36:	30 40       	sbci	r19, 0x00	; 0

	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
		bc = (WORD)sa;
		while (bc && wc) {		/* Send data bytes to the card */
    1b38:	41 15       	cp	r20, r1
    1b3a:	51 05       	cpc	r21, r1
    1b3c:	29 f4       	brne	.+10     	; 0x1b48 <disk_writep+0x34>
    1b3e:	30 93 1e 01 	sts	0x011E, r19
    1b42:	20 93 1d 01 	sts	0x011D, r18
    1b46:	07 c0       	rjmp	.+14     	; 0x1b56 <disk_writep+0x42>
    1b48:	21 15       	cp	r18, r1
    1b4a:	31 05       	cpc	r19, r1
    1b4c:	59 f7       	brne	.-42     	; 0x1b24 <disk_writep+0x10>
    1b4e:	10 92 1e 01 	sts	0x011E, r1
    1b52:	10 92 1d 01 	sts	0x011D, r1
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	5d c0       	rjmp	.+186    	; 0x1c16 <disk_writep+0x102>
			xmit_spi(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
	} else {
		if (sa) {	/* Initiate sector write process */
    1b5c:	41 15       	cp	r20, r1
    1b5e:	51 05       	cpc	r21, r1
    1b60:	61 05       	cpc	r22, r1
    1b62:	71 05       	cpc	r23, r1
    1b64:	21 f1       	breq	.+72     	; 0x1bae <disk_writep+0x9a>
			if (!(CardType & CT_BLOCK)) sa *= 512;	/* Convert to byte address if needed */
    1b66:	80 91 1f 01 	lds	r24, 0x011F
    1b6a:	83 fd       	sbrc	r24, 3
    1b6c:	07 c0       	rjmp	.+14     	; 0x1b7c <disk_writep+0x68>
    1b6e:	e9 e0       	ldi	r30, 0x09	; 9
    1b70:	44 0f       	add	r20, r20
    1b72:	55 1f       	adc	r21, r21
    1b74:	66 1f       	adc	r22, r22
    1b76:	77 1f       	adc	r23, r23
    1b78:	ea 95       	dec	r30
    1b7a:	d1 f7       	brne	.-12     	; 0x1b70 <disk_writep+0x5c>
			if (send_cmd(CMD24, sa) == 0) {			/* WRITE_SINGLE_BLOCK */
    1b7c:	88 e5       	ldi	r24, 0x58	; 88
    1b7e:	0e 94 c0 0c 	call	0x1980	; 0x1980 <send_cmd>
    1b82:	88 23       	and	r24, r24
    1b84:	19 f0       	breq	.+6      	; 0x1b8c <disk_writep+0x78>
    1b86:	21 e0       	ldi	r18, 0x01	; 1
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	45 c0       	rjmp	.+138    	; 0x1c16 <disk_writep+0x102>
}
void xmit_spi(BYTE dat)
{
	//TODO
	//send a byte to the slave
	SPDR = dat;
    1b8c:	8f ef       	ldi	r24, 0xFF	; 255
    1b8e:	8e bd       	out	0x2e, r24	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    1b90:	0d b4       	in	r0, 0x2d	; 45
    1b92:	07 fe       	sbrs	r0, 7
    1b94:	fd cf       	rjmp	.-6      	; 0x1b90 <disk_writep+0x7c>
}
void xmit_spi(BYTE dat)
{
	//TODO
	//send a byte to the slave
	SPDR = dat;
    1b96:	8e ef       	ldi	r24, 0xFE	; 254
    1b98:	8e bd       	out	0x2e, r24	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    1b9a:	0d b4       	in	r0, 0x2d	; 45
    1b9c:	07 fe       	sbrs	r0, 7
    1b9e:	fd cf       	rjmp	.-6      	; 0x1b9a <disk_writep+0x86>
	} else {
		if (sa) {	/* Initiate sector write process */
			if (!(CardType & CT_BLOCK)) sa *= 512;	/* Convert to byte address if needed */
			if (send_cmd(CMD24, sa) == 0) {			/* WRITE_SINGLE_BLOCK */
				xmit_spi(0xFF); xmit_spi(0xFE);		/* Data block header */
				wc = 512;							/* Set byte counter */
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	92 e0       	ldi	r25, 0x02	; 2
    1ba4:	90 93 1e 01 	sts	0x011E, r25
    1ba8:	80 93 1d 01 	sts	0x011D, r24
    1bac:	d4 cf       	rjmp	.-88     	; 0x1b56 <disk_writep+0x42>
				res = RES_OK;
			}
		} else {	/* Finalize sector write process */
			bc = wc + 2;
    1bae:	80 91 1d 01 	lds	r24, 0x011D
    1bb2:	90 91 1e 01 	lds	r25, 0x011E
    1bb6:	02 96       	adiw	r24, 0x02	; 2
    1bb8:	05 c0       	rjmp	.+10     	; 0x1bc4 <disk_writep+0xb0>
}
void xmit_spi(BYTE dat)
{
	//TODO
	//send a byte to the slave
	SPDR = dat;
    1bba:	1e bc       	out	0x2e, r1	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    1bbc:	0d b4       	in	r0, 0x2d	; 45
    1bbe:	07 fe       	sbrs	r0, 7
    1bc0:	fd cf       	rjmp	.-6      	; 0x1bbc <disk_writep+0xa8>
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
				wc = 512;							/* Set byte counter */
				res = RES_OK;
			}
		} else {	/* Finalize sector write process */
			bc = wc + 2;
			while (bc--) xmit_spi(0);	/* Fill left bytes and CRC with zeros */
    1bc4:	00 97       	sbiw	r24, 0x00	; 0
    1bc6:	c9 f7       	brne	.-14     	; 0x1bba <disk_writep+0xa6>
			if ((rcv_spi() & 0x1F) == 0x05) {	/* Receive data resp and wait for end of write process in timeout of 300ms */
    1bc8:	8f ef       	ldi	r24, 0xFF	; 255
    1bca:	8e bd       	out	0x2e, r24	; 46
    1bcc:	0d b4       	in	r0, 0x2d	; 45
    1bce:	07 fe       	sbrs	r0, 7
    1bd0:	fd cf       	rjmp	.-6      	; 0x1bcc <disk_writep+0xb8>
    1bd2:	8e b5       	in	r24, 0x2e	; 46
    1bd4:	8f 71       	andi	r24, 0x1F	; 31
    1bd6:	85 30       	cpi	r24, 0x05	; 5
    1bd8:	a9 f4       	brne	.+42     	; 0x1c04 <disk_writep+0xf0>
    1bda:	48 ee       	ldi	r20, 0xE8	; 232
    1bdc:	5d ef       	ldi	r21, 0xFD	; 253
				for (bc = 65000; rcv_spi() != 0xFF && bc; bc--) ;	/* Wait ready */
    1bde:	9f ef       	ldi	r25, 0xFF	; 255
    1be0:	02 c0       	rjmp	.+4      	; 0x1be6 <disk_writep+0xd2>
    1be2:	41 50       	subi	r20, 0x01	; 1
    1be4:	50 40       	sbci	r21, 0x00	; 0
    1be6:	9e bd       	out	0x2e, r25	; 46
    1be8:	0d b4       	in	r0, 0x2d	; 45
    1bea:	07 fe       	sbrs	r0, 7
    1bec:	fd cf       	rjmp	.-6      	; 0x1be8 <disk_writep+0xd4>
    1bee:	8e b5       	in	r24, 0x2e	; 46
    1bf0:	8f 3f       	cpi	r24, 0xFF	; 255
    1bf2:	21 f0       	breq	.+8      	; 0x1bfc <disk_writep+0xe8>
    1bf4:	41 15       	cp	r20, r1
    1bf6:	51 05       	cpc	r21, r1
    1bf8:	a1 f7       	brne	.-24     	; 0x1be2 <disk_writep+0xce>
    1bfa:	04 c0       	rjmp	.+8      	; 0x1c04 <disk_writep+0xf0>
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	45 2b       	or	r20, r21
    1c02:	11 f4       	brne	.+4      	; 0x1c08 <disk_writep+0xf4>
    1c04:	21 e0       	ldi	r18, 0x01	; 1
    1c06:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	DESELECT();
    1c08:	5e 9a       	sbi	0x0b, 6	; 11
	rcv_spi();
    1c0a:	8f ef       	ldi	r24, 0xFF	; 255
    1c0c:	8e bd       	out	0x2e, r24	; 46
    1c0e:	0d b4       	in	r0, 0x2d	; 45
    1c10:	07 fe       	sbrs	r0, 7
    1c12:	fd cf       	rjmp	.-6      	; 0x1c0e <disk_writep+0xfa>
    1c14:	8e b5       	in	r24, 0x2e	; 46
			release_spi();
		}
	}

	return res;
}
    1c16:	c9 01       	movw	r24, r18
    1c18:	08 95       	ret

00001c1a <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (void)
{
    1c1a:	a4 e0       	ldi	r26, 0x04	; 4
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e3 e1       	ldi	r30, 0x13	; 19
    1c20:	fe e0       	ldi	r31, 0x0E	; 14
    1c22:	0c 94 3d 10 	jmp	0x207a	; 0x207a <__prologue_saves__+0x14>
	BYTE n, cmd, ty, ocr[4];
	WORD tmr;


	init_spi();
    1c26:	0e 94 a5 0c 	call	0x194a	; 0x194a <init_spi>

#if _WRITE_FUNC
	if (MMC_SEL) disk_writep(0, 0);		/* Finalize write process if it is in progress */
    1c2a:	2c 99       	sbic	0x05, 4	; 5
    1c2c:	08 c0       	rjmp	.+16     	; 0x1c3e <disk_initialize+0x24>
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	40 e0       	ldi	r20, 0x00	; 0
    1c34:	50 e0       	ldi	r21, 0x00	; 0
    1c36:	60 e0       	ldi	r22, 0x00	; 0
    1c38:	70 e0       	ldi	r23, 0x00	; 0
    1c3a:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <disk_writep>
    1c3e:	84 e6       	ldi	r24, 0x64	; 100
#endif
	for (n = 100; n; n--) rcv_spi();	/* Dummy clocks */
    1c40:	9f ef       	ldi	r25, 0xFF	; 255
    1c42:	9e bd       	out	0x2e, r25	; 46
    1c44:	0d b4       	in	r0, 0x2d	; 45
    1c46:	07 fe       	sbrs	r0, 7
    1c48:	fd cf       	rjmp	.-6      	; 0x1c44 <disk_initialize+0x2a>
    1c4a:	2e b5       	in	r18, 0x2e	; 46
    1c4c:	81 50       	subi	r24, 0x01	; 1
    1c4e:	c9 f7       	brne	.-14     	; 0x1c42 <disk_initialize+0x28>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    1c50:	80 e4       	ldi	r24, 0x40	; 64
    1c52:	40 e0       	ldi	r20, 0x00	; 0
    1c54:	50 e0       	ldi	r21, 0x00	; 0
    1c56:	60 e0       	ldi	r22, 0x00	; 0
    1c58:	70 e0       	ldi	r23, 0x00	; 0
    1c5a:	0e 94 c0 0c 	call	0x1980	; 0x1980 <send_cmd>
    1c5e:	81 30       	cpi	r24, 0x01	; 1
    1c60:	09 f0       	breq	.+2      	; 0x1c64 <disk_initialize+0x4a>
    1c62:	6e c0       	rjmp	.+220    	; 0x1d40 <disk_initialize+0x126>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
    1c64:	88 e4       	ldi	r24, 0x48	; 72
    1c66:	4a ea       	ldi	r20, 0xAA	; 170
    1c68:	51 e0       	ldi	r21, 0x01	; 1
    1c6a:	60 e0       	ldi	r22, 0x00	; 0
    1c6c:	70 e0       	ldi	r23, 0x00	; 0
    1c6e:	0e 94 c0 0c 	call	0x1980	; 0x1980 <send_cmd>
    1c72:	81 30       	cpi	r24, 0x01	; 1
    1c74:	09 f0       	breq	.+2      	; 0x1c78 <disk_initialize+0x5e>
    1c76:	42 c0       	rjmp	.+132    	; 0x1cfc <disk_initialize+0xe2>
    1c78:	6e 01       	movw	r12, r28
    1c7a:	08 94       	sec
    1c7c:	c1 1c       	adc	r12, r1
    1c7e:	d1 1c       	adc	r13, r1
    1c80:	76 01       	movw	r14, r12
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
    1c82:	9f ef       	ldi	r25, 0xFF	; 255
    1c84:	9e 01       	movw	r18, r28
    1c86:	2b 5f       	subi	r18, 0xFB	; 251
    1c88:	3f 4f       	sbci	r19, 0xFF	; 255
    1c8a:	9e bd       	out	0x2e, r25	; 46
    1c8c:	0d b4       	in	r0, 0x2d	; 45
    1c8e:	07 fe       	sbrs	r0, 7
    1c90:	fd cf       	rjmp	.-6      	; 0x1c8c <disk_initialize+0x72>
    1c92:	8e b5       	in	r24, 0x2e	; 46
    1c94:	f7 01       	movw	r30, r14
    1c96:	81 93       	st	Z+, r24
    1c98:	7f 01       	movw	r14, r30
    1c9a:	e2 17       	cp	r30, r18
    1c9c:	f3 07       	cpc	r31, r19
    1c9e:	a9 f7       	brne	.-22     	; 0x1c8a <disk_initialize+0x70>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    1ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca2:	81 30       	cpi	r24, 0x01	; 1
    1ca4:	09 f0       	breq	.+2      	; 0x1ca8 <disk_initialize+0x8e>
    1ca6:	4c c0       	rjmp	.+152    	; 0x1d40 <disk_initialize+0x126>
    1ca8:	8c 81       	ldd	r24, Y+4	; 0x04
    1caa:	8a 3a       	cpi	r24, 0xAA	; 170
    1cac:	09 f0       	breq	.+2      	; 0x1cb0 <disk_initialize+0x96>
    1cae:	48 c0       	rjmp	.+144    	; 0x1d40 <disk_initialize+0x126>
    1cb0:	00 ee       	ldi	r16, 0xE0	; 224
    1cb2:	1e e2       	ldi	r17, 0x2E	; 46
    1cb4:	04 c0       	rjmp	.+8      	; 0x1cbe <disk_initialize+0xa4>
				for (tmr = 12000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) ;	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    1cb6:	01 50       	subi	r16, 0x01	; 1
    1cb8:	10 40       	sbci	r17, 0x00	; 0
    1cba:	09 f4       	brne	.+2      	; 0x1cbe <disk_initialize+0xa4>
    1cbc:	41 c0       	rjmp	.+130    	; 0x1d40 <disk_initialize+0x126>
    1cbe:	89 ee       	ldi	r24, 0xE9	; 233
    1cc0:	40 e0       	ldi	r20, 0x00	; 0
    1cc2:	50 e0       	ldi	r21, 0x00	; 0
    1cc4:	60 e0       	ldi	r22, 0x00	; 0
    1cc6:	70 e4       	ldi	r23, 0x40	; 64
    1cc8:	0e 94 c0 0c 	call	0x1980	; 0x1980 <send_cmd>
    1ccc:	88 23       	and	r24, r24
    1cce:	99 f7       	brne	.-26     	; 0x1cb6 <disk_initialize+0x9c>
    1cd0:	49 c0       	rjmp	.+146    	; 0x1d64 <disk_initialize+0x14a>
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
    1cd2:	9f ef       	ldi	r25, 0xFF	; 255
    1cd4:	9e bd       	out	0x2e, r25	; 46
    1cd6:	0d b4       	in	r0, 0x2d	; 45
    1cd8:	07 fe       	sbrs	r0, 7
    1cda:	fd cf       	rjmp	.-6      	; 0x1cd6 <disk_initialize+0xbc>
    1cdc:	8e b5       	in	r24, 0x2e	; 46
    1cde:	f6 01       	movw	r30, r12
    1ce0:	81 93       	st	Z+, r24
    1ce2:	6f 01       	movw	r12, r30
    1ce4:	ee 15       	cp	r30, r14
    1ce6:	ff 05       	cpc	r31, r15
    1ce8:	a9 f7       	brne	.-22     	; 0x1cd4 <disk_initialize+0xba>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	86 fd       	sbrc	r24, 6
    1cee:	03 c0       	rjmp	.+6      	; 0x1cf6 <disk_initialize+0xdc>
    1cf0:	94 e0       	ldi	r25, 0x04	; 4
    1cf2:	f9 2e       	mov	r15, r25
    1cf4:	26 c0       	rjmp	.+76     	; 0x1d42 <disk_initialize+0x128>
    1cf6:	8c e0       	ldi	r24, 0x0C	; 12
    1cf8:	f8 2e       	mov	r15, r24
    1cfa:	23 c0       	rjmp	.+70     	; 0x1d42 <disk_initialize+0x128>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    1cfc:	89 ee       	ldi	r24, 0xE9	; 233
    1cfe:	40 e0       	ldi	r20, 0x00	; 0
    1d00:	50 e0       	ldi	r21, 0x00	; 0
    1d02:	60 e0       	ldi	r22, 0x00	; 0
    1d04:	70 e0       	ldi	r23, 0x00	; 0
    1d06:	0e 94 c0 0c 	call	0x1980	; 0x1980 <send_cmd>
    1d0a:	82 30       	cpi	r24, 0x02	; 2
    1d0c:	28 f0       	brcs	.+10     	; 0x1d18 <disk_initialize+0xfe>
    1d0e:	b1 e4       	ldi	r27, 0x41	; 65
    1d10:	eb 2e       	mov	r14, r27
    1d12:	ff 24       	eor	r15, r15
    1d14:	f3 94       	inc	r15
    1d16:	04 c0       	rjmp	.+8      	; 0x1d20 <disk_initialize+0x106>
    1d18:	a9 ee       	ldi	r26, 0xE9	; 233
    1d1a:	ea 2e       	mov	r14, r26
    1d1c:	f2 e0       	ldi	r31, 0x02	; 2
    1d1e:	ff 2e       	mov	r15, r31
    1d20:	08 ea       	ldi	r16, 0xA8	; 168
    1d22:	11 e6       	ldi	r17, 0x61	; 97
    1d24:	03 c0       	rjmp	.+6      	; 0x1d2c <disk_initialize+0x112>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 25000; tmr && send_cmd(cmd, 0); tmr--) ;	/* Wait for leaving idle state */
    1d26:	01 50       	subi	r16, 0x01	; 1
    1d28:	10 40       	sbci	r17, 0x00	; 0
    1d2a:	51 f0       	breq	.+20     	; 0x1d40 <disk_initialize+0x126>
    1d2c:	8e 2d       	mov	r24, r14
    1d2e:	40 e0       	ldi	r20, 0x00	; 0
    1d30:	50 e0       	ldi	r21, 0x00	; 0
    1d32:	60 e0       	ldi	r22, 0x00	; 0
    1d34:	70 e0       	ldi	r23, 0x00	; 0
    1d36:	0e 94 c0 0c 	call	0x1980	; 0x1980 <send_cmd>
    1d3a:	88 23       	and	r24, r24
    1d3c:	a1 f7       	brne	.-24     	; 0x1d26 <disk_initialize+0x10c>
    1d3e:	1d c0       	rjmp	.+58     	; 0x1d7a <disk_initialize+0x160>
    1d40:	ff 24       	eor	r15, r15
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    1d42:	f0 92 1f 01 	sts	0x011F, r15
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	DESELECT();
    1d46:	5e 9a       	sbi	0x0b, 6	; 11
	rcv_spi();
    1d48:	8f ef       	ldi	r24, 0xFF	; 255
    1d4a:	8e bd       	out	0x2e, r24	; 46
    1d4c:	0d b4       	in	r0, 0x2d	; 45
    1d4e:	07 fe       	sbrs	r0, 7
    1d50:	fd cf       	rjmp	.-6      	; 0x1d4c <disk_initialize+0x132>
    1d52:	8e b5       	in	r24, 0x2e	; 46
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	ff 20       	and	r15, r15
    1d58:	09 f4       	brne	.+2      	; 0x1d5c <disk_initialize+0x142>
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
	}
	CardType = ty;
	release_spi();

	return ty ? 0 : STA_NOINIT;
}
    1d5c:	24 96       	adiw	r28, 0x04	; 4
    1d5e:	e8 e0       	ldi	r30, 0x08	; 8
    1d60:	0c 94 59 10 	jmp	0x20b2	; 0x20b2 <__epilogue_restores__+0x14>
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 12000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) ;	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    1d64:	8a e7       	ldi	r24, 0x7A	; 122
    1d66:	40 e0       	ldi	r20, 0x00	; 0
    1d68:	50 e0       	ldi	r21, 0x00	; 0
    1d6a:	60 e0       	ldi	r22, 0x00	; 0
    1d6c:	70 e0       	ldi	r23, 0x00	; 0
    1d6e:	0e 94 c0 0c 	call	0x1980	; 0x1980 <send_cmd>
    1d72:	88 23       	and	r24, r24
    1d74:	09 f4       	brne	.+2      	; 0x1d78 <disk_initialize+0x15e>
    1d76:	ad cf       	rjmp	.-166    	; 0x1cd2 <disk_initialize+0xb8>
    1d78:	e3 cf       	rjmp	.-58     	; 0x1d40 <disk_initialize+0x126>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 25000; tmr && send_cmd(cmd, 0); tmr--) ;	/* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
    1d7a:	80 e5       	ldi	r24, 0x50	; 80
    1d7c:	40 e0       	ldi	r20, 0x00	; 0
    1d7e:	52 e0       	ldi	r21, 0x02	; 2
    1d80:	60 e0       	ldi	r22, 0x00	; 0
    1d82:	70 e0       	ldi	r23, 0x00	; 0
    1d84:	0e 94 c0 0c 	call	0x1980	; 0x1980 <send_cmd>
    1d88:	88 23       	and	r24, r24
    1d8a:	d1 f6       	brne	.-76     	; 0x1d40 <disk_initialize+0x126>
    1d8c:	da cf       	rjmp	.-76     	; 0x1d42 <disk_initialize+0x128>

00001d8e <LCD_write>:
	
}

void LCD_write(unsigned char _byte)
{
	ENABLE();										// Setam Pinul E pe high
    1d8e:	42 9a       	sbi	0x08, 2	; 8
	E_DELAY();										// Asteptam o perioada de timp T				
    1d90:	00 00       	nop
    1d92:	00 00       	nop
    1d94:	00 00       	nop
    1d96:	00 c0       	rjmp	.+0      	; 0x1d98 <LCD_write+0xa>
	
	PORTC = (PORTC & 0x87) | ((_byte & 0xf0) >> 1);
    1d98:	48 b1       	in	r20, 0x08	; 8
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	9c 01       	movw	r18, r24
    1d9e:	20 7f       	andi	r18, 0xF0	; 240
    1da0:	30 70       	andi	r19, 0x00	; 0
    1da2:	35 95       	asr	r19
    1da4:	27 95       	ror	r18
    1da6:	47 78       	andi	r20, 0x87	; 135
    1da8:	42 2b       	or	r20, r18
    1daa:	48 b9       	out	0x08, r20	; 8
	//PORTC = ((_byte & 0xf0) >> 1);	
	
	DISABLE();										// Setam Pinul E pe low				
    1dac:	42 98       	cbi	0x08, 2	; 8
	E_DELAY();										// Asteptam o perioada de timp T
    1dae:	00 00       	nop
    1db0:	00 00       	nop
    1db2:	00 00       	nop
    1db4:	00 c0       	rjmp	.+0      	; 0x1db6 <LCD_write+0x28>
	
	
	
	ENABLE();										// Setam Pinul E pe high
    1db6:	42 9a       	sbi	0x08, 2	; 8
	E_DELAY();										// Asteptam o perioada de timp T				
    1db8:	00 00       	nop
    1dba:	00 00       	nop
    1dbc:	00 00       	nop
    1dbe:	00 c0       	rjmp	.+0      	; 0x1dc0 <LCD_write+0x32>
	
	PORTC = (PORTC & 0x87) | ((_byte & 0x0f) << 3);
    1dc0:	28 b1       	in	r18, 0x08	; 8
    1dc2:	8f 70       	andi	r24, 0x0F	; 15
    1dc4:	90 70       	andi	r25, 0x00	; 0
    1dc6:	33 e0       	ldi	r19, 0x03	; 3
    1dc8:	88 0f       	add	r24, r24
    1dca:	99 1f       	adc	r25, r25
    1dcc:	3a 95       	dec	r19
    1dce:	e1 f7       	brne	.-8      	; 0x1dc8 <LCD_write+0x3a>
    1dd0:	27 78       	andi	r18, 0x87	; 135
    1dd2:	28 2b       	or	r18, r24
    1dd4:	28 b9       	out	0x08, r18	; 8
	//PORTC = ((_byte & 0x0f) << 3);
	
	
	DISABLE();										// Setam Pinul E pe low				
    1dd6:	42 98       	cbi	0x08, 2	; 8
	E_DELAY();										// Asteptam o perioada de timp T
    1dd8:	00 00       	nop
    1dda:	00 00       	nop
    1ddc:	00 00       	nop
    1dde:	00 c0       	rjmp	.+0      	; 0x1de0 <LCD_write+0x52>
	// scriem cei mai putin semnificativi 4 biti pe firele de date
	
	// Setam Pinul E pe high
	// Asteptam o perioada de timp T
	// Setam Pinul E pe low
}
    1de0:	08 95       	ret

00001de2 <LCD_waitNotBusy>:

void LCD_waitNotBusy()
{	
	unsigned char _loop = 1;

	LcdDATA_DDR &= ~(1<<LcdD7);	// Setam pinii de date de la LCD pe in pt a citi busy flag
    1de2:	3e 98       	cbi	0x07, 6	; 7
	LcdDATA_PORT &= ~(1<<LcdD7); 	// Dezactivam pullup resistor pentru pinii de in
    1de4:	46 98       	cbi	0x08, 6	; 8
	
	LcdCMD_PORT &= ~(1<<LcdE);					// Setam pin-ul e pe low; ar trebui sa fie deja low, doar ne asiguram
    1de6:	42 98       	cbi	0x08, 2	; 8
	LcdCMD_PORT &= ~(1<<LcdRS);					// Setam pinul RS pe low
    1de8:	40 98       	cbi	0x08, 0	; 8
	LcdCMD_PORT |=  (1<<LcdRW);					// Setam pinul RW pe high (acum suntem in modul de interogare busy/adr)
    1dea:	41 9a       	sbi	0x08, 1	; 8
	
	while (_loop)
	{	
		ENABLE();										// Setam Pinul E pe high
    1dec:	42 9a       	sbi	0x08, 2	; 8
		E_DELAY();										// Asteptam o perioada de timp T				
    1dee:	00 00       	nop
    1df0:	00 00       	nop
    1df2:	00 00       	nop
    1df4:	00 c0       	rjmp	.+0      	; 0x1df6 <LCD_waitNotBusy+0x14>
		_loop = LcdDATA_PIN & (1<<LcdD7);				// Citim busy flag-ul
    1df6:	86 b1       	in	r24, 0x06	; 6
		DISABLE();										// Setam Pinul E pe low		
    1df8:	42 98       	cbi	0x08, 2	; 8
	

		ENABLE();										// Setam Pinul E pe high
    1dfa:	42 9a       	sbi	0x08, 2	; 8
		E_DELAY();										// Asteptam o perioada de timp T				
    1dfc:	00 00       	nop
    1dfe:	00 00       	nop
    1e00:	00 00       	nop
    1e02:	00 c0       	rjmp	.+0      	; 0x1e04 <LCD_waitNotBusy+0x22>
		DISABLE();										// Setam Pinul E pe low				
    1e04:	42 98       	cbi	0x08, 2	; 8
		E_DELAY();										// Asteptam o perioada de timp T	
    1e06:	00 00       	nop
    1e08:	00 00       	nop
    1e0a:	00 00       	nop
    1e0c:	00 c0       	rjmp	.+0      	; 0x1e0e <LCD_waitNotBusy+0x2c>
	
	LcdCMD_PORT &= ~(1<<LcdE);					// Setam pin-ul e pe low; ar trebui sa fie deja low, doar ne asiguram
	LcdCMD_PORT &= ~(1<<LcdRS);					// Setam pinul RS pe low
	LcdCMD_PORT |=  (1<<LcdRW);					// Setam pinul RW pe high (acum suntem in modul de interogare busy/adr)
	
	while (_loop)
    1e0e:	86 fd       	sbrc	r24, 6
    1e10:	ed cf       	rjmp	.-38     	; 0x1dec <LCD_waitNotBusy+0xa>
		ENABLE();										// Setam Pinul E pe high
		E_DELAY();										// Asteptam o perioada de timp T				
		DISABLE();										// Setam Pinul E pe low				
		E_DELAY();										// Asteptam o perioada de timp T	
	}
	LcdDATA_DDR |= (1<<LcdD7); // Setam Portul de LCD ca port de iesire la loc*/
    1e12:	3e 9a       	sbi	0x07, 6	; 7
}
    1e14:	08 95       	ret

00001e16 <LCD_writeData>:
	
}

/* Trimite date catre LCD pentru afisare	*/
void LCD_writeData(unsigned char _data)
{
    1e16:	1f 93       	push	r17
    1e18:	18 2f       	mov	r17, r24
	/* TODO */
	// similar cu LCD_writeInstruction, dar pentru scriere date	
	LCD_waitNotBusy();
    1e1a:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <LCD_waitNotBusy>
	
	RS_HIGH();
    1e1e:	40 9a       	sbi	0x08, 0	; 8
	RW_LOW();
    1e20:	41 98       	cbi	0x08, 1	; 8
	LCD_write(_data);
    1e22:	81 2f       	mov	r24, r17
    1e24:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LCD_write>
	
}
    1e28:	1f 91       	pop	r17
    1e2a:	08 95       	ret

00001e2c <LCD_writeInstruction>:
	
}

/* Trimite o instructiune catre lcd (vezi datasheet) */
void LCD_writeInstruction(unsigned char _instruction)
{				
    1e2c:	1f 93       	push	r17
    1e2e:	18 2f       	mov	r17, r24
	/* TODO */					
	// asteptam ca LCD-ul sa fie liber sa primeasca comenzile	
	// setam pinul RS pe low (low=instructiuni, high=date)
	// setam pinul RW pe low (suntem in modul de comenzi acum)
	// apelam procedura ce trimite byte-ul pe firele de date, LCD_write	
	LCD_waitNotBusy();
    1e30:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <LCD_waitNotBusy>
	
	RS_LOW();
    1e34:	40 98       	cbi	0x08, 0	; 8
	RW_LOW();
    1e36:	41 98       	cbi	0x08, 1	; 8
	LCD_write(_instruction);
    1e38:	81 2f       	mov	r24, r17
    1e3a:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LCD_write>
	
}
    1e3e:	1f 91       	pop	r17
    1e40:	08 95       	ret

00001e42 <LCD_init>:
 * IMPLEMENTARE API LCD.     *
 *****************************/

void LCD_init()
{
	LcdDATA_DDR |=  (1<<LcdD4)|(1<<LcdD5)|(1<<LcdD6)|(1<<LcdD7);	// Setam pinii de date ca pini de iesire
    1e42:	87 b1       	in	r24, 0x07	; 7
    1e44:	88 67       	ori	r24, 0x78	; 120
    1e46:	87 b9       	out	0x07, r24	; 7
	LcdCMD_DDR  |=  (1<<LcdRS)|(1<<LcdRW)|(1<<LcdE);				// Setam pinii de comenzi ca pini de iesire
    1e48:	87 b1       	in	r24, 0x07	; 7
    1e4a:	87 60       	ori	r24, 0x07	; 7
    1e4c:	87 b9       	out	0x07, r24	; 7

	LCD_waitNotBusy();
    1e4e:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <LCD_waitNotBusy>
	
	LcdCMD_PORT   &= ~(1<<LcdRS);								// Setam linia RS pe low
    1e52:	40 98       	cbi	0x08, 0	; 8
	LcdCMD_PORT   &= ~(1<<LcdRW);								// Setam linia RW pe low (acum suntem in modul de trimis instructiuni)
    1e54:	41 98       	cbi	0x08, 1	; 8
	LcdDATA_PORT  &= ~(1<<LcdD4)&~(1<<LcdD6)&~(1<<LcdD7); 		// Specificam ca vrem 4 fire de date, prima comanda (LcdD5 activ, restul nu)
    1e56:	88 b1       	in	r24, 0x08	; 8
    1e58:	87 79       	andi	r24, 0x97	; 151
    1e5a:	88 b9       	out	0x08, r24	; 8
	LcdDATA_PORT  |=  (1<<LcdD5);								// Setam pinii de comenzi ca pini de iesire
    1e5c:	44 9a       	sbi	0x08, 4	; 8
	
	
	ENABLE();									// Setam linia E(nable) pe high; aceasta ii specifica LCD-ului sa preia datele
    1e5e:	42 9a       	sbi	0x08, 2	; 8
	E_DELAY(); 									// Asteptam o perioada de timp T
    1e60:	00 00       	nop
    1e62:	00 00       	nop
    1e64:	00 00       	nop
    1e66:	00 c0       	rjmp	.+0      	; 0x1e68 <LCD_init+0x26>
	DISABLE();									// Setam linia E(nable) pe low; transferul s-a terminat
    1e68:	42 98       	cbi	0x08, 2	; 8

	
	LCD_writeInstruction(LCD_INSTR_4wire); 		// Incarcam comanda: 4 bit data, 2 lines, 5x8 font
    1e6a:	88 e2       	ldi	r24, 0x28	; 40
    1e6c:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_writeInstruction>
	LCD_writeInstruction(LCD_INSTR_display); 	// Display On, Cursor On, Blinking On
    1e70:	8c e0       	ldi	r24, 0x0C	; 12
    1e72:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_writeInstruction>
	LCD_writeInstruction(LCD_INSTR_incnoshift);	// Increment, no shift
    1e76:	86 e0       	ldi	r24, 0x06	; 6
    1e78:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_writeInstruction>
	LCD_writeInstruction(LCD_INSTR_clearDisplay);// Clear Display
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_writeInstruction>
	
}
    1e82:	08 95       	ret

00001e84 <LCD_waitInstructions>:

void LCD_waitInstructions(unsigned char _instructions)
{
	while (_instructions--)
		;
}
    1e84:	08 95       	ret

00001e86 <LCD_printDecimal2u>:


void LCD_printDecimal2u(unsigned int _n)
{
    1e86:	0f 93       	push	r16
    1e88:	1f 93       	push	r17
    1e8a:	64 e6       	ldi	r22, 0x64	; 100
    1e8c:	70 e0       	ldi	r23, 0x00	; 0
    1e8e:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <__udivmodhi4>
    1e92:	18 2f       	mov	r17, r24
    1e94:	09 2f       	mov	r16, r25
	while(_n>=10){
		tmp++;
		_n-=10;
	}

	LCD_writeData(tmp+'0');
    1e96:	6a e0       	ldi	r22, 0x0A	; 10
    1e98:	70 e0       	ldi	r23, 0x00	; 0
    1e9a:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <__udivmodhi4>
    1e9e:	86 2f       	mov	r24, r22
    1ea0:	80 5d       	subi	r24, 0xD0	; 208
    1ea2:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <LCD_writeData>
	LCD_writeData(_n+'0');
    1ea6:	81 2f       	mov	r24, r17
    1ea8:	90 2f       	mov	r25, r16
    1eaa:	6a e0       	ldi	r22, 0x0A	; 10
    1eac:	70 e0       	ldi	r23, 0x00	; 0
    1eae:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <__udivmodhi4>
    1eb2:	80 5d       	subi	r24, 0xD0	; 208
    1eb4:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <LCD_writeData>
}
    1eb8:	1f 91       	pop	r17
    1eba:	0f 91       	pop	r16
    1ebc:	08 95       	ret

00001ebe <LCD_printHexa>:

void LCD_printHexa(unsigned int _n)
{
    1ebe:	cf 93       	push	r28
    1ec0:	df 93       	push	r29
    1ec2:	ec 01       	movw	r28, r24
	unsigned char _tmp = _n>>4;
    1ec4:	64 e0       	ldi	r22, 0x04	; 4
    1ec6:	96 95       	lsr	r25
    1ec8:	87 95       	ror	r24
    1eca:	6a 95       	dec	r22
    1ecc:	e1 f7       	brne	.-8      	; 0x1ec6 <LCD_printHexa+0x8>
	if (_tmp>9)
    1ece:	8a 30       	cpi	r24, 0x0A	; 10
    1ed0:	10 f0       	brcs	.+4      	; 0x1ed6 <LCD_printHexa+0x18>
		_tmp += 'A'-10;
    1ed2:	89 5c       	subi	r24, 0xC9	; 201
    1ed4:	01 c0       	rjmp	.+2      	; 0x1ed8 <LCD_printHexa+0x1a>
	else
		_tmp += '0';
    1ed6:	80 5d       	subi	r24, 0xD0	; 208
	LCD_writeData( _tmp );
    1ed8:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <LCD_writeData>
	_tmp = _n & 0x0F;
    1edc:	9e 01       	movw	r18, r28
    1ede:	2f 70       	andi	r18, 0x0F	; 15
    1ee0:	82 2f       	mov	r24, r18
	if (_tmp>9)
    1ee2:	2a 30       	cpi	r18, 0x0A	; 10
    1ee4:	10 f0       	brcs	.+4      	; 0x1eea <LCD_printHexa+0x2c>
		_tmp += 'A'-10;
    1ee6:	89 5c       	subi	r24, 0xC9	; 201
    1ee8:	01 c0       	rjmp	.+2      	; 0x1eec <LCD_printHexa+0x2e>
	else
		_tmp += '0';
    1eea:	80 5d       	subi	r24, 0xD0	; 208
	LCD_writeData( _tmp );
    1eec:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <LCD_writeData>
}
    1ef0:	df 91       	pop	r29
    1ef2:	cf 91       	pop	r28
    1ef4:	08 95       	ret

00001ef6 <LCD_print>:


void LCD_print(char* _msg)
{
    1ef6:	0f 93       	push	r16
    1ef8:	1f 93       	push	r17
    1efa:	cf 93       	push	r28
    1efc:	df 93       	push	r29
    1efe:	8c 01       	movw	r16, r24
    1f00:	c0 e0       	ldi	r28, 0x00	; 0
    1f02:	d0 e0       	ldi	r29, 0x00	; 0
    1f04:	02 c0       	rjmp	.+4      	; 0x1f0a <LCD_print+0x14>
	unsigned char i=0;
	for( ; _msg[i]!=0 && i<16; i++)
		LCD_writeData( _msg[i] );
    1f06:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <LCD_writeData>


void LCD_print(char* _msg)
{
	unsigned char i=0;
	for( ; _msg[i]!=0 && i<16; i++)
    1f0a:	f8 01       	movw	r30, r16
    1f0c:	ec 0f       	add	r30, r28
    1f0e:	fd 1f       	adc	r31, r29
    1f10:	80 81       	ld	r24, Z
    1f12:	88 23       	and	r24, r24
    1f14:	21 f0       	breq	.+8      	; 0x1f1e <LCD_print+0x28>
    1f16:	21 96       	adiw	r28, 0x01	; 1
    1f18:	c1 31       	cpi	r28, 0x11	; 17
    1f1a:	d1 05       	cpc	r29, r1
    1f1c:	a1 f7       	brne	.-24     	; 0x1f06 <LCD_print+0x10>
		LCD_writeData( _msg[i] );
}
    1f1e:	df 91       	pop	r29
    1f20:	cf 91       	pop	r28
    1f22:	1f 91       	pop	r17
    1f24:	0f 91       	pop	r16
    1f26:	08 95       	ret

00001f28 <LCD_printn>:

void LCD_printn(char* _msg, uint8_t n)
{
    1f28:	0f 93       	push	r16
    1f2a:	1f 93       	push	r17
    1f2c:	cf 93       	push	r28
    1f2e:	df 93       	push	r29
    1f30:	ec 01       	movw	r28, r24
    1f32:	06 2f       	mov	r16, r22
    1f34:	10 e0       	ldi	r17, 0x00	; 0
    1f36:	03 c0       	rjmp	.+6      	; 0x1f3e <LCD_printn+0x16>
	unsigned char i=0;
	for( ; _msg[i]!=0 && i<n; i++)
		LCD_writeData( _msg[i] );
    1f38:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <LCD_writeData>
}

void LCD_printn(char* _msg, uint8_t n)
{
	unsigned char i=0;
	for( ; _msg[i]!=0 && i<n; i++)
    1f3c:	1f 5f       	subi	r17, 0xFF	; 255
    1f3e:	fe 01       	movw	r30, r28
    1f40:	e1 0f       	add	r30, r17
    1f42:	f1 1d       	adc	r31, r1
    1f44:	80 81       	ld	r24, Z
    1f46:	88 23       	and	r24, r24
    1f48:	11 f0       	breq	.+4      	; 0x1f4e <LCD_printn+0x26>
    1f4a:	10 17       	cp	r17, r16
    1f4c:	a8 f3       	brcs	.-22     	; 0x1f38 <LCD_printn+0x10>
		LCD_writeData( _msg[i] );
}
    1f4e:	df 91       	pop	r29
    1f50:	cf 91       	pop	r28
    1f52:	1f 91       	pop	r17
    1f54:	0f 91       	pop	r16
    1f56:	08 95       	ret

00001f58 <LCD_print2>:

void LCD_print2(char* _msg1, char* _msg2)
{
    1f58:	ef 92       	push	r14
    1f5a:	ff 92       	push	r15
    1f5c:	0f 93       	push	r16
    1f5e:	1f 93       	push	r17
    1f60:	8c 01       	movw	r16, r24
    1f62:	7b 01       	movw	r14, r22
	LCD_writeInstruction(LCD_INSTR_clearDisplay);
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_writeInstruction>
	LCD_print(_msg1);
    1f6a:	c8 01       	movw	r24, r16
    1f6c:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <LCD_print>
	LCD_writeInstruction(LCD_INSTR_nextLine);
    1f70:	80 ec       	ldi	r24, 0xC0	; 192
    1f72:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_writeInstruction>
	LCD_print(_msg2);
    1f76:	c7 01       	movw	r24, r14
    1f78:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <LCD_print>
}
    1f7c:	1f 91       	pop	r17
    1f7e:	0f 91       	pop	r16
    1f80:	ff 90       	pop	r15
    1f82:	ef 90       	pop	r14
    1f84:	08 95       	ret

00001f86 <__mulsi3>:
    1f86:	62 9f       	mul	r22, r18
    1f88:	d0 01       	movw	r26, r0
    1f8a:	73 9f       	mul	r23, r19
    1f8c:	f0 01       	movw	r30, r0
    1f8e:	82 9f       	mul	r24, r18
    1f90:	e0 0d       	add	r30, r0
    1f92:	f1 1d       	adc	r31, r1
    1f94:	64 9f       	mul	r22, r20
    1f96:	e0 0d       	add	r30, r0
    1f98:	f1 1d       	adc	r31, r1
    1f9a:	92 9f       	mul	r25, r18
    1f9c:	f0 0d       	add	r31, r0
    1f9e:	83 9f       	mul	r24, r19
    1fa0:	f0 0d       	add	r31, r0
    1fa2:	74 9f       	mul	r23, r20
    1fa4:	f0 0d       	add	r31, r0
    1fa6:	65 9f       	mul	r22, r21
    1fa8:	f0 0d       	add	r31, r0
    1faa:	99 27       	eor	r25, r25
    1fac:	72 9f       	mul	r23, r18
    1fae:	b0 0d       	add	r27, r0
    1fb0:	e1 1d       	adc	r30, r1
    1fb2:	f9 1f       	adc	r31, r25
    1fb4:	63 9f       	mul	r22, r19
    1fb6:	b0 0d       	add	r27, r0
    1fb8:	e1 1d       	adc	r30, r1
    1fba:	f9 1f       	adc	r31, r25
    1fbc:	bd 01       	movw	r22, r26
    1fbe:	cf 01       	movw	r24, r30
    1fc0:	11 24       	eor	r1, r1
    1fc2:	08 95       	ret

00001fc4 <__udivmodhi4>:
    1fc4:	aa 1b       	sub	r26, r26
    1fc6:	bb 1b       	sub	r27, r27
    1fc8:	51 e1       	ldi	r21, 0x11	; 17
    1fca:	07 c0       	rjmp	.+14     	; 0x1fda <__udivmodhi4_ep>

00001fcc <__udivmodhi4_loop>:
    1fcc:	aa 1f       	adc	r26, r26
    1fce:	bb 1f       	adc	r27, r27
    1fd0:	a6 17       	cp	r26, r22
    1fd2:	b7 07       	cpc	r27, r23
    1fd4:	10 f0       	brcs	.+4      	; 0x1fda <__udivmodhi4_ep>
    1fd6:	a6 1b       	sub	r26, r22
    1fd8:	b7 0b       	sbc	r27, r23

00001fda <__udivmodhi4_ep>:
    1fda:	88 1f       	adc	r24, r24
    1fdc:	99 1f       	adc	r25, r25
    1fde:	5a 95       	dec	r21
    1fe0:	a9 f7       	brne	.-22     	; 0x1fcc <__udivmodhi4_loop>
    1fe2:	80 95       	com	r24
    1fe4:	90 95       	com	r25
    1fe6:	bc 01       	movw	r22, r24
    1fe8:	cd 01       	movw	r24, r26
    1fea:	08 95       	ret

00001fec <__udivmodsi4>:
    1fec:	a1 e2       	ldi	r26, 0x21	; 33
    1fee:	1a 2e       	mov	r1, r26
    1ff0:	aa 1b       	sub	r26, r26
    1ff2:	bb 1b       	sub	r27, r27
    1ff4:	fd 01       	movw	r30, r26
    1ff6:	0d c0       	rjmp	.+26     	; 0x2012 <__udivmodsi4_ep>

00001ff8 <__udivmodsi4_loop>:
    1ff8:	aa 1f       	adc	r26, r26
    1ffa:	bb 1f       	adc	r27, r27
    1ffc:	ee 1f       	adc	r30, r30
    1ffe:	ff 1f       	adc	r31, r31
    2000:	a2 17       	cp	r26, r18
    2002:	b3 07       	cpc	r27, r19
    2004:	e4 07       	cpc	r30, r20
    2006:	f5 07       	cpc	r31, r21
    2008:	20 f0       	brcs	.+8      	; 0x2012 <__udivmodsi4_ep>
    200a:	a2 1b       	sub	r26, r18
    200c:	b3 0b       	sbc	r27, r19
    200e:	e4 0b       	sbc	r30, r20
    2010:	f5 0b       	sbc	r31, r21

00002012 <__udivmodsi4_ep>:
    2012:	66 1f       	adc	r22, r22
    2014:	77 1f       	adc	r23, r23
    2016:	88 1f       	adc	r24, r24
    2018:	99 1f       	adc	r25, r25
    201a:	1a 94       	dec	r1
    201c:	69 f7       	brne	.-38     	; 0x1ff8 <__udivmodsi4_loop>
    201e:	60 95       	com	r22
    2020:	70 95       	com	r23
    2022:	80 95       	com	r24
    2024:	90 95       	com	r25
    2026:	9b 01       	movw	r18, r22
    2028:	ac 01       	movw	r20, r24
    202a:	bd 01       	movw	r22, r26
    202c:	cf 01       	movw	r24, r30
    202e:	08 95       	ret

00002030 <__divmodsi4>:
    2030:	97 fb       	bst	r25, 7
    2032:	09 2e       	mov	r0, r25
    2034:	05 26       	eor	r0, r21
    2036:	0e d0       	rcall	.+28     	; 0x2054 <__divmodsi4_neg1>
    2038:	57 fd       	sbrc	r21, 7
    203a:	04 d0       	rcall	.+8      	; 0x2044 <__divmodsi4_neg2>
    203c:	d7 df       	rcall	.-82     	; 0x1fec <__udivmodsi4>
    203e:	0a d0       	rcall	.+20     	; 0x2054 <__divmodsi4_neg1>
    2040:	00 1c       	adc	r0, r0
    2042:	38 f4       	brcc	.+14     	; 0x2052 <__divmodsi4_exit>

00002044 <__divmodsi4_neg2>:
    2044:	50 95       	com	r21
    2046:	40 95       	com	r20
    2048:	30 95       	com	r19
    204a:	21 95       	neg	r18
    204c:	3f 4f       	sbci	r19, 0xFF	; 255
    204e:	4f 4f       	sbci	r20, 0xFF	; 255
    2050:	5f 4f       	sbci	r21, 0xFF	; 255

00002052 <__divmodsi4_exit>:
    2052:	08 95       	ret

00002054 <__divmodsi4_neg1>:
    2054:	f6 f7       	brtc	.-4      	; 0x2052 <__divmodsi4_exit>
    2056:	90 95       	com	r25
    2058:	80 95       	com	r24
    205a:	70 95       	com	r23
    205c:	61 95       	neg	r22
    205e:	7f 4f       	sbci	r23, 0xFF	; 255
    2060:	8f 4f       	sbci	r24, 0xFF	; 255
    2062:	9f 4f       	sbci	r25, 0xFF	; 255
    2064:	08 95       	ret

00002066 <__prologue_saves__>:
    2066:	2f 92       	push	r2
    2068:	3f 92       	push	r3
    206a:	4f 92       	push	r4
    206c:	5f 92       	push	r5
    206e:	6f 92       	push	r6
    2070:	7f 92       	push	r7
    2072:	8f 92       	push	r8
    2074:	9f 92       	push	r9
    2076:	af 92       	push	r10
    2078:	bf 92       	push	r11
    207a:	cf 92       	push	r12
    207c:	df 92       	push	r13
    207e:	ef 92       	push	r14
    2080:	ff 92       	push	r15
    2082:	0f 93       	push	r16
    2084:	1f 93       	push	r17
    2086:	cf 93       	push	r28
    2088:	df 93       	push	r29
    208a:	cd b7       	in	r28, 0x3d	; 61
    208c:	de b7       	in	r29, 0x3e	; 62
    208e:	ca 1b       	sub	r28, r26
    2090:	db 0b       	sbc	r29, r27
    2092:	0f b6       	in	r0, 0x3f	; 63
    2094:	f8 94       	cli
    2096:	de bf       	out	0x3e, r29	; 62
    2098:	0f be       	out	0x3f, r0	; 63
    209a:	cd bf       	out	0x3d, r28	; 61
    209c:	09 94       	ijmp

0000209e <__epilogue_restores__>:
    209e:	2a 88       	ldd	r2, Y+18	; 0x12
    20a0:	39 88       	ldd	r3, Y+17	; 0x11
    20a2:	48 88       	ldd	r4, Y+16	; 0x10
    20a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    20a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    20a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    20aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    20ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    20ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    20b0:	b9 84       	ldd	r11, Y+9	; 0x09
    20b2:	c8 84       	ldd	r12, Y+8	; 0x08
    20b4:	df 80       	ldd	r13, Y+7	; 0x07
    20b6:	ee 80       	ldd	r14, Y+6	; 0x06
    20b8:	fd 80       	ldd	r15, Y+5	; 0x05
    20ba:	0c 81       	ldd	r16, Y+4	; 0x04
    20bc:	1b 81       	ldd	r17, Y+3	; 0x03
    20be:	aa 81       	ldd	r26, Y+2	; 0x02
    20c0:	b9 81       	ldd	r27, Y+1	; 0x01
    20c2:	ce 0f       	add	r28, r30
    20c4:	d1 1d       	adc	r29, r1
    20c6:	0f b6       	in	r0, 0x3f	; 63
    20c8:	f8 94       	cli
    20ca:	de bf       	out	0x3e, r29	; 62
    20cc:	0f be       	out	0x3f, r0	; 63
    20ce:	cd bf       	out	0x3d, r28	; 61
    20d0:	ed 01       	movw	r28, r26
    20d2:	08 95       	ret

000020d4 <strcat>:
    20d4:	fb 01       	movw	r30, r22
    20d6:	dc 01       	movw	r26, r24
    20d8:	0d 90       	ld	r0, X+
    20da:	00 20       	and	r0, r0
    20dc:	e9 f7       	brne	.-6      	; 0x20d8 <strcat+0x4>
    20de:	11 97       	sbiw	r26, 0x01	; 1
    20e0:	01 90       	ld	r0, Z+
    20e2:	0d 92       	st	X+, r0
    20e4:	00 20       	and	r0, r0
    20e6:	e1 f7       	brne	.-8      	; 0x20e0 <strcat+0xc>
    20e8:	08 95       	ret

000020ea <strcmp>:
    20ea:	fb 01       	movw	r30, r22
    20ec:	dc 01       	movw	r26, r24
    20ee:	8d 91       	ld	r24, X+
    20f0:	01 90       	ld	r0, Z+
    20f2:	80 19       	sub	r24, r0
    20f4:	01 10       	cpse	r0, r1
    20f6:	d9 f3       	breq	.-10     	; 0x20ee <strcmp+0x4>
    20f8:	99 0b       	sbc	r25, r25
    20fa:	08 95       	ret

000020fc <strcpy>:
    20fc:	fb 01       	movw	r30, r22
    20fe:	dc 01       	movw	r26, r24
    2100:	01 90       	ld	r0, Z+
    2102:	0d 92       	st	X+, r0
    2104:	00 20       	and	r0, r0
    2106:	e1 f7       	brne	.-8      	; 0x2100 <strcpy+0x4>
    2108:	08 95       	ret

0000210a <strstr>:
    210a:	fb 01       	movw	r30, r22
    210c:	51 91       	ld	r21, Z+
    210e:	55 23       	and	r21, r21
    2110:	a9 f0       	breq	.+42     	; 0x213c <strstr+0x32>
    2112:	bf 01       	movw	r22, r30
    2114:	dc 01       	movw	r26, r24
    2116:	4d 91       	ld	r20, X+
    2118:	45 17       	cp	r20, r21
    211a:	41 11       	cpse	r20, r1
    211c:	e1 f7       	brne	.-8      	; 0x2116 <strstr+0xc>
    211e:	59 f4       	brne	.+22     	; 0x2136 <strstr+0x2c>
    2120:	cd 01       	movw	r24, r26
    2122:	01 90       	ld	r0, Z+
    2124:	00 20       	and	r0, r0
    2126:	49 f0       	breq	.+18     	; 0x213a <strstr+0x30>
    2128:	4d 91       	ld	r20, X+
    212a:	40 15       	cp	r20, r0
    212c:	41 11       	cpse	r20, r1
    212e:	c9 f3       	breq	.-14     	; 0x2122 <strstr+0x18>
    2130:	fb 01       	movw	r30, r22
    2132:	41 11       	cpse	r20, r1
    2134:	ef cf       	rjmp	.-34     	; 0x2114 <strstr+0xa>
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	08 95       	ret

0000213e <sprintf>:
    213e:	ae e0       	ldi	r26, 0x0E	; 14
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	e5 ea       	ldi	r30, 0xA5	; 165
    2144:	f0 e1       	ldi	r31, 0x10	; 16
    2146:	0c 94 41 10 	jmp	0x2082	; 0x2082 <__prologue_saves__+0x1c>
    214a:	0d 89       	ldd	r16, Y+21	; 0x15
    214c:	1e 89       	ldd	r17, Y+22	; 0x16
    214e:	86 e0       	ldi	r24, 0x06	; 6
    2150:	8c 83       	std	Y+4, r24	; 0x04
    2152:	1a 83       	std	Y+2, r17	; 0x02
    2154:	09 83       	std	Y+1, r16	; 0x01
    2156:	8f ef       	ldi	r24, 0xFF	; 255
    2158:	9f e7       	ldi	r25, 0x7F	; 127
    215a:	9e 83       	std	Y+6, r25	; 0x06
    215c:	8d 83       	std	Y+5, r24	; 0x05
    215e:	9e 01       	movw	r18, r28
    2160:	27 5e       	subi	r18, 0xE7	; 231
    2162:	3f 4f       	sbci	r19, 0xFF	; 255
    2164:	ce 01       	movw	r24, r28
    2166:	01 96       	adiw	r24, 0x01	; 1
    2168:	6f 89       	ldd	r22, Y+23	; 0x17
    216a:	78 8d       	ldd	r23, Y+24	; 0x18
    216c:	a9 01       	movw	r20, r18
    216e:	0e 94 c3 10 	call	0x2186	; 0x2186 <vfprintf>
    2172:	2f 81       	ldd	r18, Y+7	; 0x07
    2174:	38 85       	ldd	r19, Y+8	; 0x08
    2176:	02 0f       	add	r16, r18
    2178:	13 1f       	adc	r17, r19
    217a:	f8 01       	movw	r30, r16
    217c:	10 82       	st	Z, r1
    217e:	2e 96       	adiw	r28, 0x0e	; 14
    2180:	e4 e0       	ldi	r30, 0x04	; 4
    2182:	0c 94 5d 10 	jmp	0x20ba	; 0x20ba <__epilogue_restores__+0x1c>

00002186 <vfprintf>:
    2186:	ab e0       	ldi	r26, 0x0B	; 11
    2188:	b0 e0       	ldi	r27, 0x00	; 0
    218a:	e9 ec       	ldi	r30, 0xC9	; 201
    218c:	f0 e1       	ldi	r31, 0x10	; 16
    218e:	0c 94 33 10 	jmp	0x2066	; 0x2066 <__prologue_saves__>
    2192:	3c 01       	movw	r6, r24
    2194:	2b 01       	movw	r4, r22
    2196:	5a 01       	movw	r10, r20
    2198:	fc 01       	movw	r30, r24
    219a:	17 82       	std	Z+7, r1	; 0x07
    219c:	16 82       	std	Z+6, r1	; 0x06
    219e:	83 81       	ldd	r24, Z+3	; 0x03
    21a0:	81 fd       	sbrc	r24, 1
    21a2:	03 c0       	rjmp	.+6      	; 0x21aa <vfprintf+0x24>
    21a4:	6f ef       	ldi	r22, 0xFF	; 255
    21a6:	7f ef       	ldi	r23, 0xFF	; 255
    21a8:	c6 c1       	rjmp	.+908    	; 0x2536 <vfprintf+0x3b0>
    21aa:	9a e0       	ldi	r25, 0x0A	; 10
    21ac:	89 2e       	mov	r8, r25
    21ae:	1e 01       	movw	r2, r28
    21b0:	08 94       	sec
    21b2:	21 1c       	adc	r2, r1
    21b4:	31 1c       	adc	r3, r1
    21b6:	f3 01       	movw	r30, r6
    21b8:	23 81       	ldd	r18, Z+3	; 0x03
    21ba:	f2 01       	movw	r30, r4
    21bc:	23 fd       	sbrc	r18, 3
    21be:	85 91       	lpm	r24, Z+
    21c0:	23 ff       	sbrs	r18, 3
    21c2:	81 91       	ld	r24, Z+
    21c4:	2f 01       	movw	r4, r30
    21c6:	88 23       	and	r24, r24
    21c8:	09 f4       	brne	.+2      	; 0x21cc <vfprintf+0x46>
    21ca:	b2 c1       	rjmp	.+868    	; 0x2530 <vfprintf+0x3aa>
    21cc:	85 32       	cpi	r24, 0x25	; 37
    21ce:	39 f4       	brne	.+14     	; 0x21de <vfprintf+0x58>
    21d0:	23 fd       	sbrc	r18, 3
    21d2:	85 91       	lpm	r24, Z+
    21d4:	23 ff       	sbrs	r18, 3
    21d6:	81 91       	ld	r24, Z+
    21d8:	2f 01       	movw	r4, r30
    21da:	85 32       	cpi	r24, 0x25	; 37
    21dc:	29 f4       	brne	.+10     	; 0x21e8 <vfprintf+0x62>
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	b3 01       	movw	r22, r6
    21e2:	0e 94 b6 12 	call	0x256c	; 0x256c <fputc>
    21e6:	e7 cf       	rjmp	.-50     	; 0x21b6 <vfprintf+0x30>
    21e8:	98 2f       	mov	r25, r24
    21ea:	ff 24       	eor	r15, r15
    21ec:	ee 24       	eor	r14, r14
    21ee:	99 24       	eor	r9, r9
    21f0:	ff e1       	ldi	r31, 0x1F	; 31
    21f2:	ff 15       	cp	r31, r15
    21f4:	d0 f0       	brcs	.+52     	; 0x222a <vfprintf+0xa4>
    21f6:	9b 32       	cpi	r25, 0x2B	; 43
    21f8:	69 f0       	breq	.+26     	; 0x2214 <vfprintf+0x8e>
    21fa:	9c 32       	cpi	r25, 0x2C	; 44
    21fc:	28 f4       	brcc	.+10     	; 0x2208 <vfprintf+0x82>
    21fe:	90 32       	cpi	r25, 0x20	; 32
    2200:	59 f0       	breq	.+22     	; 0x2218 <vfprintf+0x92>
    2202:	93 32       	cpi	r25, 0x23	; 35
    2204:	91 f4       	brne	.+36     	; 0x222a <vfprintf+0xa4>
    2206:	0e c0       	rjmp	.+28     	; 0x2224 <vfprintf+0x9e>
    2208:	9d 32       	cpi	r25, 0x2D	; 45
    220a:	49 f0       	breq	.+18     	; 0x221e <vfprintf+0x98>
    220c:	90 33       	cpi	r25, 0x30	; 48
    220e:	69 f4       	brne	.+26     	; 0x222a <vfprintf+0xa4>
    2210:	41 e0       	ldi	r20, 0x01	; 1
    2212:	24 c0       	rjmp	.+72     	; 0x225c <vfprintf+0xd6>
    2214:	52 e0       	ldi	r21, 0x02	; 2
    2216:	f5 2a       	or	r15, r21
    2218:	84 e0       	ldi	r24, 0x04	; 4
    221a:	f8 2a       	or	r15, r24
    221c:	28 c0       	rjmp	.+80     	; 0x226e <vfprintf+0xe8>
    221e:	98 e0       	ldi	r25, 0x08	; 8
    2220:	f9 2a       	or	r15, r25
    2222:	25 c0       	rjmp	.+74     	; 0x226e <vfprintf+0xe8>
    2224:	e0 e1       	ldi	r30, 0x10	; 16
    2226:	fe 2a       	or	r15, r30
    2228:	22 c0       	rjmp	.+68     	; 0x226e <vfprintf+0xe8>
    222a:	f7 fc       	sbrc	r15, 7
    222c:	29 c0       	rjmp	.+82     	; 0x2280 <vfprintf+0xfa>
    222e:	89 2f       	mov	r24, r25
    2230:	80 53       	subi	r24, 0x30	; 48
    2232:	8a 30       	cpi	r24, 0x0A	; 10
    2234:	70 f4       	brcc	.+28     	; 0x2252 <vfprintf+0xcc>
    2236:	f6 fe       	sbrs	r15, 6
    2238:	05 c0       	rjmp	.+10     	; 0x2244 <vfprintf+0xbe>
    223a:	98 9c       	mul	r9, r8
    223c:	90 2c       	mov	r9, r0
    223e:	11 24       	eor	r1, r1
    2240:	98 0e       	add	r9, r24
    2242:	15 c0       	rjmp	.+42     	; 0x226e <vfprintf+0xe8>
    2244:	e8 9c       	mul	r14, r8
    2246:	e0 2c       	mov	r14, r0
    2248:	11 24       	eor	r1, r1
    224a:	e8 0e       	add	r14, r24
    224c:	f0 e2       	ldi	r31, 0x20	; 32
    224e:	ff 2a       	or	r15, r31
    2250:	0e c0       	rjmp	.+28     	; 0x226e <vfprintf+0xe8>
    2252:	9e 32       	cpi	r25, 0x2E	; 46
    2254:	29 f4       	brne	.+10     	; 0x2260 <vfprintf+0xda>
    2256:	f6 fc       	sbrc	r15, 6
    2258:	6b c1       	rjmp	.+726    	; 0x2530 <vfprintf+0x3aa>
    225a:	40 e4       	ldi	r20, 0x40	; 64
    225c:	f4 2a       	or	r15, r20
    225e:	07 c0       	rjmp	.+14     	; 0x226e <vfprintf+0xe8>
    2260:	9c 36       	cpi	r25, 0x6C	; 108
    2262:	19 f4       	brne	.+6      	; 0x226a <vfprintf+0xe4>
    2264:	50 e8       	ldi	r21, 0x80	; 128
    2266:	f5 2a       	or	r15, r21
    2268:	02 c0       	rjmp	.+4      	; 0x226e <vfprintf+0xe8>
    226a:	98 36       	cpi	r25, 0x68	; 104
    226c:	49 f4       	brne	.+18     	; 0x2280 <vfprintf+0xfa>
    226e:	f2 01       	movw	r30, r4
    2270:	23 fd       	sbrc	r18, 3
    2272:	95 91       	lpm	r25, Z+
    2274:	23 ff       	sbrs	r18, 3
    2276:	91 91       	ld	r25, Z+
    2278:	2f 01       	movw	r4, r30
    227a:	99 23       	and	r25, r25
    227c:	09 f0       	breq	.+2      	; 0x2280 <vfprintf+0xfa>
    227e:	b8 cf       	rjmp	.-144    	; 0x21f0 <vfprintf+0x6a>
    2280:	89 2f       	mov	r24, r25
    2282:	85 54       	subi	r24, 0x45	; 69
    2284:	83 30       	cpi	r24, 0x03	; 3
    2286:	18 f0       	brcs	.+6      	; 0x228e <vfprintf+0x108>
    2288:	80 52       	subi	r24, 0x20	; 32
    228a:	83 30       	cpi	r24, 0x03	; 3
    228c:	38 f4       	brcc	.+14     	; 0x229c <vfprintf+0x116>
    228e:	44 e0       	ldi	r20, 0x04	; 4
    2290:	50 e0       	ldi	r21, 0x00	; 0
    2292:	a4 0e       	add	r10, r20
    2294:	b5 1e       	adc	r11, r21
    2296:	5f e3       	ldi	r21, 0x3F	; 63
    2298:	59 83       	std	Y+1, r21	; 0x01
    229a:	0f c0       	rjmp	.+30     	; 0x22ba <vfprintf+0x134>
    229c:	93 36       	cpi	r25, 0x63	; 99
    229e:	31 f0       	breq	.+12     	; 0x22ac <vfprintf+0x126>
    22a0:	93 37       	cpi	r25, 0x73	; 115
    22a2:	79 f0       	breq	.+30     	; 0x22c2 <vfprintf+0x13c>
    22a4:	93 35       	cpi	r25, 0x53	; 83
    22a6:	09 f0       	breq	.+2      	; 0x22aa <vfprintf+0x124>
    22a8:	56 c0       	rjmp	.+172    	; 0x2356 <vfprintf+0x1d0>
    22aa:	20 c0       	rjmp	.+64     	; 0x22ec <vfprintf+0x166>
    22ac:	f5 01       	movw	r30, r10
    22ae:	80 81       	ld	r24, Z
    22b0:	89 83       	std	Y+1, r24	; 0x01
    22b2:	42 e0       	ldi	r20, 0x02	; 2
    22b4:	50 e0       	ldi	r21, 0x00	; 0
    22b6:	a4 0e       	add	r10, r20
    22b8:	b5 1e       	adc	r11, r21
    22ba:	61 01       	movw	r12, r2
    22bc:	01 e0       	ldi	r16, 0x01	; 1
    22be:	10 e0       	ldi	r17, 0x00	; 0
    22c0:	12 c0       	rjmp	.+36     	; 0x22e6 <vfprintf+0x160>
    22c2:	f5 01       	movw	r30, r10
    22c4:	c0 80       	ld	r12, Z
    22c6:	d1 80       	ldd	r13, Z+1	; 0x01
    22c8:	f6 fc       	sbrc	r15, 6
    22ca:	03 c0       	rjmp	.+6      	; 0x22d2 <vfprintf+0x14c>
    22cc:	6f ef       	ldi	r22, 0xFF	; 255
    22ce:	7f ef       	ldi	r23, 0xFF	; 255
    22d0:	02 c0       	rjmp	.+4      	; 0x22d6 <vfprintf+0x150>
    22d2:	69 2d       	mov	r22, r9
    22d4:	70 e0       	ldi	r23, 0x00	; 0
    22d6:	42 e0       	ldi	r20, 0x02	; 2
    22d8:	50 e0       	ldi	r21, 0x00	; 0
    22da:	a4 0e       	add	r10, r20
    22dc:	b5 1e       	adc	r11, r21
    22de:	c6 01       	movw	r24, r12
    22e0:	0e 94 ab 12 	call	0x2556	; 0x2556 <strnlen>
    22e4:	8c 01       	movw	r16, r24
    22e6:	5f e7       	ldi	r21, 0x7F	; 127
    22e8:	f5 22       	and	r15, r21
    22ea:	14 c0       	rjmp	.+40     	; 0x2314 <vfprintf+0x18e>
    22ec:	f5 01       	movw	r30, r10
    22ee:	c0 80       	ld	r12, Z
    22f0:	d1 80       	ldd	r13, Z+1	; 0x01
    22f2:	f6 fc       	sbrc	r15, 6
    22f4:	03 c0       	rjmp	.+6      	; 0x22fc <vfprintf+0x176>
    22f6:	6f ef       	ldi	r22, 0xFF	; 255
    22f8:	7f ef       	ldi	r23, 0xFF	; 255
    22fa:	02 c0       	rjmp	.+4      	; 0x2300 <vfprintf+0x17a>
    22fc:	69 2d       	mov	r22, r9
    22fe:	70 e0       	ldi	r23, 0x00	; 0
    2300:	42 e0       	ldi	r20, 0x02	; 2
    2302:	50 e0       	ldi	r21, 0x00	; 0
    2304:	a4 0e       	add	r10, r20
    2306:	b5 1e       	adc	r11, r21
    2308:	c6 01       	movw	r24, r12
    230a:	0e 94 a0 12 	call	0x2540	; 0x2540 <strnlen_P>
    230e:	8c 01       	movw	r16, r24
    2310:	50 e8       	ldi	r21, 0x80	; 128
    2312:	f5 2a       	or	r15, r21
    2314:	f3 fe       	sbrs	r15, 3
    2316:	07 c0       	rjmp	.+14     	; 0x2326 <vfprintf+0x1a0>
    2318:	1a c0       	rjmp	.+52     	; 0x234e <vfprintf+0x1c8>
    231a:	80 e2       	ldi	r24, 0x20	; 32
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	b3 01       	movw	r22, r6
    2320:	0e 94 b6 12 	call	0x256c	; 0x256c <fputc>
    2324:	ea 94       	dec	r14
    2326:	8e 2d       	mov	r24, r14
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	08 17       	cp	r16, r24
    232c:	19 07       	cpc	r17, r25
    232e:	a8 f3       	brcs	.-22     	; 0x231a <vfprintf+0x194>
    2330:	0e c0       	rjmp	.+28     	; 0x234e <vfprintf+0x1c8>
    2332:	f6 01       	movw	r30, r12
    2334:	f7 fc       	sbrc	r15, 7
    2336:	85 91       	lpm	r24, Z+
    2338:	f7 fe       	sbrs	r15, 7
    233a:	81 91       	ld	r24, Z+
    233c:	6f 01       	movw	r12, r30
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	b3 01       	movw	r22, r6
    2342:	0e 94 b6 12 	call	0x256c	; 0x256c <fputc>
    2346:	e1 10       	cpse	r14, r1
    2348:	ea 94       	dec	r14
    234a:	01 50       	subi	r16, 0x01	; 1
    234c:	10 40       	sbci	r17, 0x00	; 0
    234e:	01 15       	cp	r16, r1
    2350:	11 05       	cpc	r17, r1
    2352:	79 f7       	brne	.-34     	; 0x2332 <vfprintf+0x1ac>
    2354:	ea c0       	rjmp	.+468    	; 0x252a <vfprintf+0x3a4>
    2356:	94 36       	cpi	r25, 0x64	; 100
    2358:	11 f0       	breq	.+4      	; 0x235e <vfprintf+0x1d8>
    235a:	99 36       	cpi	r25, 0x69	; 105
    235c:	69 f5       	brne	.+90     	; 0x23b8 <vfprintf+0x232>
    235e:	f7 fe       	sbrs	r15, 7
    2360:	08 c0       	rjmp	.+16     	; 0x2372 <vfprintf+0x1ec>
    2362:	f5 01       	movw	r30, r10
    2364:	20 81       	ld	r18, Z
    2366:	31 81       	ldd	r19, Z+1	; 0x01
    2368:	42 81       	ldd	r20, Z+2	; 0x02
    236a:	53 81       	ldd	r21, Z+3	; 0x03
    236c:	84 e0       	ldi	r24, 0x04	; 4
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	0a c0       	rjmp	.+20     	; 0x2386 <vfprintf+0x200>
    2372:	f5 01       	movw	r30, r10
    2374:	80 81       	ld	r24, Z
    2376:	91 81       	ldd	r25, Z+1	; 0x01
    2378:	9c 01       	movw	r18, r24
    237a:	44 27       	eor	r20, r20
    237c:	37 fd       	sbrc	r19, 7
    237e:	40 95       	com	r20
    2380:	54 2f       	mov	r21, r20
    2382:	82 e0       	ldi	r24, 0x02	; 2
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	a8 0e       	add	r10, r24
    2388:	b9 1e       	adc	r11, r25
    238a:	9f e6       	ldi	r25, 0x6F	; 111
    238c:	f9 22       	and	r15, r25
    238e:	57 ff       	sbrs	r21, 7
    2390:	09 c0       	rjmp	.+18     	; 0x23a4 <vfprintf+0x21e>
    2392:	50 95       	com	r21
    2394:	40 95       	com	r20
    2396:	30 95       	com	r19
    2398:	21 95       	neg	r18
    239a:	3f 4f       	sbci	r19, 0xFF	; 255
    239c:	4f 4f       	sbci	r20, 0xFF	; 255
    239e:	5f 4f       	sbci	r21, 0xFF	; 255
    23a0:	e0 e8       	ldi	r30, 0x80	; 128
    23a2:	fe 2a       	or	r15, r30
    23a4:	ca 01       	movw	r24, r20
    23a6:	b9 01       	movw	r22, r18
    23a8:	a1 01       	movw	r20, r2
    23aa:	2a e0       	ldi	r18, 0x0A	; 10
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <__ultoa_invert>
    23b2:	d8 2e       	mov	r13, r24
    23b4:	d2 18       	sub	r13, r2
    23b6:	40 c0       	rjmp	.+128    	; 0x2438 <vfprintf+0x2b2>
    23b8:	95 37       	cpi	r25, 0x75	; 117
    23ba:	29 f4       	brne	.+10     	; 0x23c6 <vfprintf+0x240>
    23bc:	1f 2d       	mov	r17, r15
    23be:	1f 7e       	andi	r17, 0xEF	; 239
    23c0:	2a e0       	ldi	r18, 0x0A	; 10
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	1d c0       	rjmp	.+58     	; 0x2400 <vfprintf+0x27a>
    23c6:	1f 2d       	mov	r17, r15
    23c8:	19 7f       	andi	r17, 0xF9	; 249
    23ca:	9f 36       	cpi	r25, 0x6F	; 111
    23cc:	61 f0       	breq	.+24     	; 0x23e6 <vfprintf+0x260>
    23ce:	90 37       	cpi	r25, 0x70	; 112
    23d0:	20 f4       	brcc	.+8      	; 0x23da <vfprintf+0x254>
    23d2:	98 35       	cpi	r25, 0x58	; 88
    23d4:	09 f0       	breq	.+2      	; 0x23d8 <vfprintf+0x252>
    23d6:	ac c0       	rjmp	.+344    	; 0x2530 <vfprintf+0x3aa>
    23d8:	0f c0       	rjmp	.+30     	; 0x23f8 <vfprintf+0x272>
    23da:	90 37       	cpi	r25, 0x70	; 112
    23dc:	39 f0       	breq	.+14     	; 0x23ec <vfprintf+0x266>
    23de:	98 37       	cpi	r25, 0x78	; 120
    23e0:	09 f0       	breq	.+2      	; 0x23e4 <vfprintf+0x25e>
    23e2:	a6 c0       	rjmp	.+332    	; 0x2530 <vfprintf+0x3aa>
    23e4:	04 c0       	rjmp	.+8      	; 0x23ee <vfprintf+0x268>
    23e6:	28 e0       	ldi	r18, 0x08	; 8
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	0a c0       	rjmp	.+20     	; 0x2400 <vfprintf+0x27a>
    23ec:	10 61       	ori	r17, 0x10	; 16
    23ee:	14 fd       	sbrc	r17, 4
    23f0:	14 60       	ori	r17, 0x04	; 4
    23f2:	20 e1       	ldi	r18, 0x10	; 16
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	04 c0       	rjmp	.+8      	; 0x2400 <vfprintf+0x27a>
    23f8:	14 fd       	sbrc	r17, 4
    23fa:	16 60       	ori	r17, 0x06	; 6
    23fc:	20 e1       	ldi	r18, 0x10	; 16
    23fe:	32 e0       	ldi	r19, 0x02	; 2
    2400:	17 ff       	sbrs	r17, 7
    2402:	08 c0       	rjmp	.+16     	; 0x2414 <vfprintf+0x28e>
    2404:	f5 01       	movw	r30, r10
    2406:	60 81       	ld	r22, Z
    2408:	71 81       	ldd	r23, Z+1	; 0x01
    240a:	82 81       	ldd	r24, Z+2	; 0x02
    240c:	93 81       	ldd	r25, Z+3	; 0x03
    240e:	44 e0       	ldi	r20, 0x04	; 4
    2410:	50 e0       	ldi	r21, 0x00	; 0
    2412:	08 c0       	rjmp	.+16     	; 0x2424 <vfprintf+0x29e>
    2414:	f5 01       	movw	r30, r10
    2416:	80 81       	ld	r24, Z
    2418:	91 81       	ldd	r25, Z+1	; 0x01
    241a:	bc 01       	movw	r22, r24
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	42 e0       	ldi	r20, 0x02	; 2
    2422:	50 e0       	ldi	r21, 0x00	; 0
    2424:	a4 0e       	add	r10, r20
    2426:	b5 1e       	adc	r11, r21
    2428:	a1 01       	movw	r20, r2
    242a:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <__ultoa_invert>
    242e:	d8 2e       	mov	r13, r24
    2430:	d2 18       	sub	r13, r2
    2432:	8f e7       	ldi	r24, 0x7F	; 127
    2434:	f8 2e       	mov	r15, r24
    2436:	f1 22       	and	r15, r17
    2438:	f6 fe       	sbrs	r15, 6
    243a:	0b c0       	rjmp	.+22     	; 0x2452 <vfprintf+0x2cc>
    243c:	5e ef       	ldi	r21, 0xFE	; 254
    243e:	f5 22       	and	r15, r21
    2440:	d9 14       	cp	r13, r9
    2442:	38 f4       	brcc	.+14     	; 0x2452 <vfprintf+0x2cc>
    2444:	f4 fe       	sbrs	r15, 4
    2446:	07 c0       	rjmp	.+14     	; 0x2456 <vfprintf+0x2d0>
    2448:	f2 fc       	sbrc	r15, 2
    244a:	05 c0       	rjmp	.+10     	; 0x2456 <vfprintf+0x2d0>
    244c:	8f ee       	ldi	r24, 0xEF	; 239
    244e:	f8 22       	and	r15, r24
    2450:	02 c0       	rjmp	.+4      	; 0x2456 <vfprintf+0x2d0>
    2452:	1d 2d       	mov	r17, r13
    2454:	01 c0       	rjmp	.+2      	; 0x2458 <vfprintf+0x2d2>
    2456:	19 2d       	mov	r17, r9
    2458:	f4 fe       	sbrs	r15, 4
    245a:	0d c0       	rjmp	.+26     	; 0x2476 <vfprintf+0x2f0>
    245c:	fe 01       	movw	r30, r28
    245e:	ed 0d       	add	r30, r13
    2460:	f1 1d       	adc	r31, r1
    2462:	80 81       	ld	r24, Z
    2464:	80 33       	cpi	r24, 0x30	; 48
    2466:	19 f4       	brne	.+6      	; 0x246e <vfprintf+0x2e8>
    2468:	99 ee       	ldi	r25, 0xE9	; 233
    246a:	f9 22       	and	r15, r25
    246c:	08 c0       	rjmp	.+16     	; 0x247e <vfprintf+0x2f8>
    246e:	1f 5f       	subi	r17, 0xFF	; 255
    2470:	f2 fe       	sbrs	r15, 2
    2472:	05 c0       	rjmp	.+10     	; 0x247e <vfprintf+0x2f8>
    2474:	03 c0       	rjmp	.+6      	; 0x247c <vfprintf+0x2f6>
    2476:	8f 2d       	mov	r24, r15
    2478:	86 78       	andi	r24, 0x86	; 134
    247a:	09 f0       	breq	.+2      	; 0x247e <vfprintf+0x2f8>
    247c:	1f 5f       	subi	r17, 0xFF	; 255
    247e:	0f 2d       	mov	r16, r15
    2480:	f3 fc       	sbrc	r15, 3
    2482:	14 c0       	rjmp	.+40     	; 0x24ac <vfprintf+0x326>
    2484:	f0 fe       	sbrs	r15, 0
    2486:	0f c0       	rjmp	.+30     	; 0x24a6 <vfprintf+0x320>
    2488:	1e 15       	cp	r17, r14
    248a:	10 f0       	brcs	.+4      	; 0x2490 <vfprintf+0x30a>
    248c:	9d 2c       	mov	r9, r13
    248e:	0b c0       	rjmp	.+22     	; 0x24a6 <vfprintf+0x320>
    2490:	9d 2c       	mov	r9, r13
    2492:	9e 0c       	add	r9, r14
    2494:	91 1a       	sub	r9, r17
    2496:	1e 2d       	mov	r17, r14
    2498:	06 c0       	rjmp	.+12     	; 0x24a6 <vfprintf+0x320>
    249a:	80 e2       	ldi	r24, 0x20	; 32
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	b3 01       	movw	r22, r6
    24a0:	0e 94 b6 12 	call	0x256c	; 0x256c <fputc>
    24a4:	1f 5f       	subi	r17, 0xFF	; 255
    24a6:	1e 15       	cp	r17, r14
    24a8:	c0 f3       	brcs	.-16     	; 0x249a <vfprintf+0x314>
    24aa:	04 c0       	rjmp	.+8      	; 0x24b4 <vfprintf+0x32e>
    24ac:	1e 15       	cp	r17, r14
    24ae:	10 f4       	brcc	.+4      	; 0x24b4 <vfprintf+0x32e>
    24b0:	e1 1a       	sub	r14, r17
    24b2:	01 c0       	rjmp	.+2      	; 0x24b6 <vfprintf+0x330>
    24b4:	ee 24       	eor	r14, r14
    24b6:	04 ff       	sbrs	r16, 4
    24b8:	0f c0       	rjmp	.+30     	; 0x24d8 <vfprintf+0x352>
    24ba:	80 e3       	ldi	r24, 0x30	; 48
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	b3 01       	movw	r22, r6
    24c0:	0e 94 b6 12 	call	0x256c	; 0x256c <fputc>
    24c4:	02 ff       	sbrs	r16, 2
    24c6:	1d c0       	rjmp	.+58     	; 0x2502 <vfprintf+0x37c>
    24c8:	01 fd       	sbrc	r16, 1
    24ca:	03 c0       	rjmp	.+6      	; 0x24d2 <vfprintf+0x34c>
    24cc:	88 e7       	ldi	r24, 0x78	; 120
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	0e c0       	rjmp	.+28     	; 0x24ee <vfprintf+0x368>
    24d2:	88 e5       	ldi	r24, 0x58	; 88
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	0b c0       	rjmp	.+22     	; 0x24ee <vfprintf+0x368>
    24d8:	80 2f       	mov	r24, r16
    24da:	86 78       	andi	r24, 0x86	; 134
    24dc:	91 f0       	breq	.+36     	; 0x2502 <vfprintf+0x37c>
    24de:	01 ff       	sbrs	r16, 1
    24e0:	02 c0       	rjmp	.+4      	; 0x24e6 <vfprintf+0x360>
    24e2:	8b e2       	ldi	r24, 0x2B	; 43
    24e4:	01 c0       	rjmp	.+2      	; 0x24e8 <vfprintf+0x362>
    24e6:	80 e2       	ldi	r24, 0x20	; 32
    24e8:	f7 fc       	sbrc	r15, 7
    24ea:	8d e2       	ldi	r24, 0x2D	; 45
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	b3 01       	movw	r22, r6
    24f0:	0e 94 b6 12 	call	0x256c	; 0x256c <fputc>
    24f4:	06 c0       	rjmp	.+12     	; 0x2502 <vfprintf+0x37c>
    24f6:	80 e3       	ldi	r24, 0x30	; 48
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	b3 01       	movw	r22, r6
    24fc:	0e 94 b6 12 	call	0x256c	; 0x256c <fputc>
    2500:	9a 94       	dec	r9
    2502:	d9 14       	cp	r13, r9
    2504:	c0 f3       	brcs	.-16     	; 0x24f6 <vfprintf+0x370>
    2506:	da 94       	dec	r13
    2508:	f1 01       	movw	r30, r2
    250a:	ed 0d       	add	r30, r13
    250c:	f1 1d       	adc	r31, r1
    250e:	80 81       	ld	r24, Z
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	b3 01       	movw	r22, r6
    2514:	0e 94 b6 12 	call	0x256c	; 0x256c <fputc>
    2518:	dd 20       	and	r13, r13
    251a:	a9 f7       	brne	.-22     	; 0x2506 <vfprintf+0x380>
    251c:	06 c0       	rjmp	.+12     	; 0x252a <vfprintf+0x3a4>
    251e:	80 e2       	ldi	r24, 0x20	; 32
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	b3 01       	movw	r22, r6
    2524:	0e 94 b6 12 	call	0x256c	; 0x256c <fputc>
    2528:	ea 94       	dec	r14
    252a:	ee 20       	and	r14, r14
    252c:	c1 f7       	brne	.-16     	; 0x251e <vfprintf+0x398>
    252e:	43 ce       	rjmp	.-890    	; 0x21b6 <vfprintf+0x30>
    2530:	f3 01       	movw	r30, r6
    2532:	66 81       	ldd	r22, Z+6	; 0x06
    2534:	77 81       	ldd	r23, Z+7	; 0x07
    2536:	cb 01       	movw	r24, r22
    2538:	2b 96       	adiw	r28, 0x0b	; 11
    253a:	e2 e1       	ldi	r30, 0x12	; 18
    253c:	0c 94 4f 10 	jmp	0x209e	; 0x209e <__epilogue_restores__>

00002540 <strnlen_P>:
    2540:	fc 01       	movw	r30, r24
    2542:	05 90       	lpm	r0, Z+
    2544:	61 50       	subi	r22, 0x01	; 1
    2546:	70 40       	sbci	r23, 0x00	; 0
    2548:	01 10       	cpse	r0, r1
    254a:	d8 f7       	brcc	.-10     	; 0x2542 <strnlen_P+0x2>
    254c:	80 95       	com	r24
    254e:	90 95       	com	r25
    2550:	8e 0f       	add	r24, r30
    2552:	9f 1f       	adc	r25, r31
    2554:	08 95       	ret

00002556 <strnlen>:
    2556:	fc 01       	movw	r30, r24
    2558:	61 50       	subi	r22, 0x01	; 1
    255a:	70 40       	sbci	r23, 0x00	; 0
    255c:	01 90       	ld	r0, Z+
    255e:	01 10       	cpse	r0, r1
    2560:	d8 f7       	brcc	.-10     	; 0x2558 <strnlen+0x2>
    2562:	80 95       	com	r24
    2564:	90 95       	com	r25
    2566:	8e 0f       	add	r24, r30
    2568:	9f 1f       	adc	r25, r31
    256a:	08 95       	ret

0000256c <fputc>:
    256c:	0f 93       	push	r16
    256e:	1f 93       	push	r17
    2570:	cf 93       	push	r28
    2572:	df 93       	push	r29
    2574:	8c 01       	movw	r16, r24
    2576:	eb 01       	movw	r28, r22
    2578:	8b 81       	ldd	r24, Y+3	; 0x03
    257a:	81 ff       	sbrs	r24, 1
    257c:	1b c0       	rjmp	.+54     	; 0x25b4 <fputc+0x48>
    257e:	82 ff       	sbrs	r24, 2
    2580:	0d c0       	rjmp	.+26     	; 0x259c <fputc+0x30>
    2582:	2e 81       	ldd	r18, Y+6	; 0x06
    2584:	3f 81       	ldd	r19, Y+7	; 0x07
    2586:	8c 81       	ldd	r24, Y+4	; 0x04
    2588:	9d 81       	ldd	r25, Y+5	; 0x05
    258a:	28 17       	cp	r18, r24
    258c:	39 07       	cpc	r19, r25
    258e:	64 f4       	brge	.+24     	; 0x25a8 <fputc+0x3c>
    2590:	e8 81       	ld	r30, Y
    2592:	f9 81       	ldd	r31, Y+1	; 0x01
    2594:	01 93       	st	Z+, r16
    2596:	f9 83       	std	Y+1, r31	; 0x01
    2598:	e8 83       	st	Y, r30
    259a:	06 c0       	rjmp	.+12     	; 0x25a8 <fputc+0x3c>
    259c:	e8 85       	ldd	r30, Y+8	; 0x08
    259e:	f9 85       	ldd	r31, Y+9	; 0x09
    25a0:	80 2f       	mov	r24, r16
    25a2:	09 95       	icall
    25a4:	89 2b       	or	r24, r25
    25a6:	31 f4       	brne	.+12     	; 0x25b4 <fputc+0x48>
    25a8:	8e 81       	ldd	r24, Y+6	; 0x06
    25aa:	9f 81       	ldd	r25, Y+7	; 0x07
    25ac:	01 96       	adiw	r24, 0x01	; 1
    25ae:	9f 83       	std	Y+7, r25	; 0x07
    25b0:	8e 83       	std	Y+6, r24	; 0x06
    25b2:	02 c0       	rjmp	.+4      	; 0x25b8 <fputc+0x4c>
    25b4:	0f ef       	ldi	r16, 0xFF	; 255
    25b6:	1f ef       	ldi	r17, 0xFF	; 255
    25b8:	c8 01       	movw	r24, r16
    25ba:	df 91       	pop	r29
    25bc:	cf 91       	pop	r28
    25be:	1f 91       	pop	r17
    25c0:	0f 91       	pop	r16
    25c2:	08 95       	ret

000025c4 <__ultoa_invert>:
    25c4:	fa 01       	movw	r30, r20
    25c6:	aa 27       	eor	r26, r26
    25c8:	28 30       	cpi	r18, 0x08	; 8
    25ca:	51 f1       	breq	.+84     	; 0x2620 <__ultoa_invert+0x5c>
    25cc:	20 31       	cpi	r18, 0x10	; 16
    25ce:	81 f1       	breq	.+96     	; 0x2630 <__ultoa_invert+0x6c>
    25d0:	e8 94       	clt
    25d2:	6f 93       	push	r22
    25d4:	6e 7f       	andi	r22, 0xFE	; 254
    25d6:	6e 5f       	subi	r22, 0xFE	; 254
    25d8:	7f 4f       	sbci	r23, 0xFF	; 255
    25da:	8f 4f       	sbci	r24, 0xFF	; 255
    25dc:	9f 4f       	sbci	r25, 0xFF	; 255
    25de:	af 4f       	sbci	r26, 0xFF	; 255
    25e0:	b1 e0       	ldi	r27, 0x01	; 1
    25e2:	3e d0       	rcall	.+124    	; 0x2660 <__ultoa_invert+0x9c>
    25e4:	b4 e0       	ldi	r27, 0x04	; 4
    25e6:	3c d0       	rcall	.+120    	; 0x2660 <__ultoa_invert+0x9c>
    25e8:	67 0f       	add	r22, r23
    25ea:	78 1f       	adc	r23, r24
    25ec:	89 1f       	adc	r24, r25
    25ee:	9a 1f       	adc	r25, r26
    25f0:	a1 1d       	adc	r26, r1
    25f2:	68 0f       	add	r22, r24
    25f4:	79 1f       	adc	r23, r25
    25f6:	8a 1f       	adc	r24, r26
    25f8:	91 1d       	adc	r25, r1
    25fa:	a1 1d       	adc	r26, r1
    25fc:	6a 0f       	add	r22, r26
    25fe:	71 1d       	adc	r23, r1
    2600:	81 1d       	adc	r24, r1
    2602:	91 1d       	adc	r25, r1
    2604:	a1 1d       	adc	r26, r1
    2606:	20 d0       	rcall	.+64     	; 0x2648 <__ultoa_invert+0x84>
    2608:	09 f4       	brne	.+2      	; 0x260c <__ultoa_invert+0x48>
    260a:	68 94       	set
    260c:	3f 91       	pop	r19
    260e:	2a e0       	ldi	r18, 0x0A	; 10
    2610:	26 9f       	mul	r18, r22
    2612:	11 24       	eor	r1, r1
    2614:	30 19       	sub	r19, r0
    2616:	30 5d       	subi	r19, 0xD0	; 208
    2618:	31 93       	st	Z+, r19
    261a:	de f6       	brtc	.-74     	; 0x25d2 <__ultoa_invert+0xe>
    261c:	cf 01       	movw	r24, r30
    261e:	08 95       	ret
    2620:	46 2f       	mov	r20, r22
    2622:	47 70       	andi	r20, 0x07	; 7
    2624:	40 5d       	subi	r20, 0xD0	; 208
    2626:	41 93       	st	Z+, r20
    2628:	b3 e0       	ldi	r27, 0x03	; 3
    262a:	0f d0       	rcall	.+30     	; 0x264a <__ultoa_invert+0x86>
    262c:	c9 f7       	brne	.-14     	; 0x2620 <__ultoa_invert+0x5c>
    262e:	f6 cf       	rjmp	.-20     	; 0x261c <__ultoa_invert+0x58>
    2630:	46 2f       	mov	r20, r22
    2632:	4f 70       	andi	r20, 0x0F	; 15
    2634:	40 5d       	subi	r20, 0xD0	; 208
    2636:	4a 33       	cpi	r20, 0x3A	; 58
    2638:	18 f0       	brcs	.+6      	; 0x2640 <__ultoa_invert+0x7c>
    263a:	49 5d       	subi	r20, 0xD9	; 217
    263c:	31 fd       	sbrc	r19, 1
    263e:	40 52       	subi	r20, 0x20	; 32
    2640:	41 93       	st	Z+, r20
    2642:	02 d0       	rcall	.+4      	; 0x2648 <__ultoa_invert+0x84>
    2644:	a9 f7       	brne	.-22     	; 0x2630 <__ultoa_invert+0x6c>
    2646:	ea cf       	rjmp	.-44     	; 0x261c <__ultoa_invert+0x58>
    2648:	b4 e0       	ldi	r27, 0x04	; 4
    264a:	a6 95       	lsr	r26
    264c:	97 95       	ror	r25
    264e:	87 95       	ror	r24
    2650:	77 95       	ror	r23
    2652:	67 95       	ror	r22
    2654:	ba 95       	dec	r27
    2656:	c9 f7       	brne	.-14     	; 0x264a <__ultoa_invert+0x86>
    2658:	00 97       	sbiw	r24, 0x00	; 0
    265a:	61 05       	cpc	r22, r1
    265c:	71 05       	cpc	r23, r1
    265e:	08 95       	ret
    2660:	9b 01       	movw	r18, r22
    2662:	ac 01       	movw	r20, r24
    2664:	0a 2e       	mov	r0, r26
    2666:	06 94       	lsr	r0
    2668:	57 95       	ror	r21
    266a:	47 95       	ror	r20
    266c:	37 95       	ror	r19
    266e:	27 95       	ror	r18
    2670:	ba 95       	dec	r27
    2672:	c9 f7       	brne	.-14     	; 0x2666 <__ultoa_invert+0xa2>
    2674:	62 0f       	add	r22, r18
    2676:	73 1f       	adc	r23, r19
    2678:	84 1f       	adc	r24, r20
    267a:	95 1f       	adc	r25, r21
    267c:	a0 1d       	adc	r26, r0
    267e:	08 95       	ret

00002680 <_exit>:
    2680:	f8 94       	cli

00002682 <__stop_program>:
    2682:	ff cf       	rjmp	.-2      	; 0x2682 <__stop_program>
