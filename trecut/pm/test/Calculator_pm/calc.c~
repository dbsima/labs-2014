/************************************************************************ *********
 * Proiectarea cu Microprocesoare
 * Laboratorul 1
 * Digital I/O
 *********************************************************************************/

#include <avr/io.h>
#include <avr/interrupt.h>
#define F_CPU 16000000
#include <util/delay.h>
#include <string.h>
#include <math.h>
#include <stdio.h>

#include "lcd.h"
#include "key.h"

#define ON	1
#define OFF	0

#define MAX_LEN	16
#define N 		10
#define PI		3.14

#define RAD(grade)	PI * grade / 180
#define GRADE(rad)	rad * 180 / PI

char str[MAX_LEN];

unsigned int error;

int ok_d;
int ok_o;

int virg; // retine cate cifre se introduc dupa virgula

float last_num; // retine ultimul numar introdus(inainte de a se apasa o tasta pentru operatie)

int new_num; // 1 daca se introduce un nou numar, 0 daca se introduc cifre pentru formarea unui numar

float result; // rezultatul afisat pe ecran

float elems[N]; // numerele introduse de utilizator

unsigned char operands[5]; // operatiile ce trebuie efectuate

int num_elems; // numarul de numere introduse(size de elems[])

int num_op; // numarul de operanzi introdusi (size de operands[])

void push_elems(float elem)
{
	elems[num_elems++] = elem;
}

float pop_elems()
{
	num_elems--;
	return elems[num_elems]; 
}

int top_elems()
{
	return elems[num_elems - 1];
}

int size_elems()
{
	return num_elems;
}

void push_op(unsigned char op)
{
	operands[num_op++] = op;
}

unsigned char pop_op()
{
	num_op--;
	return operands[num_op]; 
}

int size_op()
{
	return num_op;
}

int top_op()
{
	return operands[num_op - 1];
}

// functie ce returneaza prioritatea unui operand (0 ce mai mica , 3 cea mai mare)
unsigned int get_priority(unsigned char val)
{
	if(val == '+' || val == '-')
	{
		return 0;
	}
	if(val == '*' || val == '/')
	{
		return 1;
	}
	if(val == 'r' || val == 'p' ||
	   val == 't' || val == 'z' ||
	   val == 's' || val == 'x' ||
	   val == 'c' || val == 'y')
	{
		return 2;
	}
	return 3;
}

unsigned int is_digit(unsigned char val)
{
	return val >= '0' && val <= '9';
}

int key_to_int(unsigned char key)
{
	return key - '0';
}

// transforma un float in string pentru a fi afisat pe ecaran, rezultatul e pus in str[](declarat global)
void result_to_string(float val)
{
	char str1[MAX_LEN]; // retine partea intreaga
	char str2[MAX_LEN]; // retine partea de dupa virgula

	memset(str1, 0, MAX_LEN);
	memset(str2, 0, MAX_LEN);
	memset(str, 0, MAX_LEN);
	
	int k = 0, i, s = 0;

	// pentru determiarea semnului, se completeaza s[0] cu '-' daca val e negativ
	if(val < 0)
	{
		val = val * (-1);
		str[0] = '-';
		s = 1;
	}
	
	int p1 = (int)val;
	int t = 0;
	
	int digit = (int)(val * 10) % 10;
	val = val * 10;
	while(digit > 0 && digit < 10)
	{
		str2[t++] = digit + '0';
		digit = (int)(val * 10) % 10; 
		val = val * 10;
	}
	
	
	if(p1 == 0)
		str1[k++] = '0';
	while(p1)
	{
		str1[k++] = (p1 % 10) + '0';
		p1 = p1 / 10;
	}
	
	for(i = s; i < (k + s); i++)
	{
		str[i] = str1[k - (i - s) - 1];
	}
	
	if(strlen(str2) > 0)
	{
		str[i++] = '.';
		for(k = 0; k < t; k++)
		{
			str[i++] = str2[k];
		}
	}
	
}

void reset_values()
{
	error = 0;
	num_op = 0;
	num_elems = 0;
	last_num = 0;
	new_num = 1;
	virg = 0;
	memset(str, 0, MAX_LEN);
}

// efectueaza o operatie(op) intre num1 si num2
float calculate(float num2, float num1, unsigned char op)
{
	switch(op)
	{
		case '+':
			return num1 + num2;
		case '-':
			return num1 - num2;
		case '*':
			return num1 * num2;
		case '/':
			if(num2 == 0)
			{
				error = 1;
				return 0;
			}
			return num1 / num2;
		case 'p': //putere
			return pow(num1, num2);
		case 'r': //radical
			return sqrt(num1);
		case 't':
			return  tan(RAD(num1));
		case 'z':
			return GRADE(atan(num1));
		case 's':
			return sin(RAD(num1));
		case 'x':
			if(num1 > 1 || num1 < -1)
			{
				error = 1;
				return 0;
			}
			return GRADE(asin(num1));
		case 'c':
			return cos(RAD(num1));
		case 'y':
			if(num1 > 1 || num1 < -1)
			{
				error = 1;
				return 0;
			}
			return GRADE(acos(num1));	
		default: return num1;	
	}	
	return 0;
} 

int main()
{
	int index_key;
	unsigned int status = OFF;
	
	LCD_init(); 
	
	key_init();
	
	unsigned char key;

	int print_result;

	char last_key; // ultima tasta apasata(daca a apasat doua taste pentru operatie la rand se ia ultima)
	
	char op_ant;
	
	LCD_print("START");
	
	while(1)
	{
		index_key = get_key();
	
		if(index_key < 0)
			continue;
	
		key = key_pressed[index_key];
	
		if(status == ON)
		{
			if(is_digit(key))
			{
				if(new_num == 1) //daca introduc un nou numar fac clear la veciul numar de pe display
				{
					last_num = 0;
					LCD_writeInstruction(LCD_INSTR_clearDisplay);
				}
				
				if(virg > 0) // daca s-a apsat deja '.', atunci cifrele introduse sunt dupa virgula
					virg ++; 
				
				last_num = last_num * 10 + key_to_int(key); // formez numarul intodus
				
				new_num = 0;
				
				LCD_writeData(key);
				
				last_key = 'k'; // k - s-a introdus o cifra
			}
			else 
			{
				print_result = 0;
				
				if(key == '.')
				{
					virg = 1;
					last_key = 'k';
					LCD_writeData(key);
				}
				
				else if(key == 'o') //reset
				{
					last_key = 'k';
					LCD_writeInstruction(LCD_INSTR_clearDisplay);
					LCD_writeData('0');
					reset_values();
				}
				
				else
				{
					new_num = 1;
					if(virg)
					{
						last_num = (float) (last_num / pow(10, virg - 1));
					}	

					if(last_key != 'o')	
						push_elems(last_num);

					virg = 0;
					if(key == '=')
					{
						last_key = 'k';
						
						// scot din vectori, si calculez rezultatul final
						while(size_elems() > 1)
						{
							result = calculate(pop_elems(), pop_elems(), pop_op());
							push_elems(result);
						}
						
						if(error)
						{
							LCD_writeInstruction(LCD_INSTR_clearDisplay);
							LCD_print("ERROR");
						}
						else
							print_result = 1;	
						reset_values();
					}
					else 
					{
						// aici se va calcula un rezultat partial in functie de prioritatea ultimului operand fata de operanzii care sunt deja operands
						
						if(last_key == 'o') // daca s-a mai introdus o operatie la pasul precedent se pastereaza ultima operatie
						{
							pop_op();
						}
						
						last_key = 'o';
						
						if(size_op() > 0)
						{
							if(top_op() == 'p') // p are prioritate maxima si se calculeaza, nu mai este important ce operand urmeaza
							{
								result = calculate(pop_elems(), pop_elems(), 'p');
								push_elems(result);
								print_result = 1;
							}
						
							else if(get_priority(key) <= get_priority(top_op())) 
							{
								// se calculeaza rezultatul partial doar daca am introdus numai operanzi cu prioritate mai mica sau egala
								while(size_elems() > 1)
								{
									op_ant = top_op();
									if(get_priority(op_ant) < get_priority(key))
										break;
									result = calculate(pop_elems(), pop_elems(), pop_op());
									push_elems(result);
								}
								print_result = 1;
							}
							
						}
						
						if(get_priority(key) == 2 && key != 'p') //prioritate maxima(sin, cos fara p(astept la ce putere )etc) -> calculez rezultatul
						{
							result = calculate(0, pop_elems(), key);
							push_elems(result);
							print_result = 1;
						}
						else
						{
							push_op(key);
						}
					}	
					
					if(error)
					{
						LCD_writeInstruction(LCD_INSTR_clearDisplay);
						LCD_print("ERROR");
					}
					else if(print_result)
					{
						LCD_writeInstruction(LCD_INSTR_clearDisplay);
						result_to_string(result);
						LCD_print(str);
					}	
				}
			}
		}
		if(status == OFF && key_pressed[index_key] == 'o')
		{
			status = ON;
			LCD_writeInstruction(LCD_INSTR_clearDisplay);
			LCD_writeData('0');
			reset_values();
		}
	}
	return 0;
}
