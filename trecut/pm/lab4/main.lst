
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00002516  000025aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002516  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000278  00800118  00800118  000025c2  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  000025c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002d4  00000000  00000000  00002642  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001acf  00000000  00000000  00002916  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000081b  00000000  00000000  000043e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000163f  00000000  00000000  00004c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000280  00000000  00000000  00006240  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000583  00000000  00000000  000064c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000019e1  00000000  00000000  00006a43  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000188  00000000  00000000  00008424  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__vector_9>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_16>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e6 e1       	ldi	r30, 0x16	; 22
      90:	f5 e2       	ldi	r31, 0x25	; 37
      92:	02 c0       	rjmp	.+4      	; 0x98 <.do_copy_data_start>

00000094 <.do_copy_data_loop>:
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0

00000098 <.do_copy_data_start>:
      98:	a8 31       	cpi	r26, 0x18	; 24
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <.do_copy_data_loop>

0000009e <__do_clear_bss>:
      9e:	13 e0       	ldi	r17, 0x03	; 3
      a0:	a8 e1       	ldi	r26, 0x18	; 24
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a0 39       	cpi	r26, 0x90	; 144
      aa:	b1 07       	cpc	r27, r17
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <main>
      b2:	0c 94 89 12 	jmp	0x2512	; 0x2512 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <__vector_16>:

volatile uint8_t sync = 0;


ISR(TIMER0_COMPA_vect)
{
      ba:	1f 92       	push	r1
      bc:	0f 92       	push	r0
      be:	0f b6       	in	r0, 0x3f	; 63
      c0:	0f 92       	push	r0
      c2:	11 24       	eor	r1, r1
      c4:	2f 93       	push	r18
      c6:	3f 93       	push	r19
      c8:	4f 93       	push	r20
      ca:	8f 93       	push	r24
      cc:	9f 93       	push	r25
      ce:	ef 93       	push	r30
      d0:	ff 93       	push	r31
	
	
	if(sync == 1)
      d2:	40 91 1a 01 	lds	r20, 0x011A
      d6:	41 30       	cpi	r20, 0x01	; 1
      d8:	09 f0       	breq	.+2      	; 0xdc <__vector_16+0x22>
      da:	45 c0       	rjmp	.+138    	; 0x166 <__vector_16+0xac>
	{
		
		if(read1 == 1)
      dc:	80 91 17 01 	lds	r24, 0x0117
      e0:	81 30       	cpi	r24, 0x01	; 1
      e2:	e9 f4       	brne	.+58     	; 0x11e <__vector_16+0x64>
		{
			OCR1A = (unsigned char)Buff1[counter++];
      e4:	20 91 18 01 	lds	r18, 0x0118
      e8:	30 91 19 01 	lds	r19, 0x0119
      ec:	f9 01       	movw	r30, r18
      ee:	e0 57       	subi	r30, 0x70	; 112
      f0:	fd 4f       	sbci	r31, 0xFD	; 253
      f2:	80 81       	ld	r24, Z
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	90 93 89 00 	sts	0x0089, r25
      fa:	80 93 88 00 	sts	0x0088, r24
      fe:	2f 5f       	subi	r18, 0xFF	; 255
     100:	3f 4f       	sbci	r19, 0xFF	; 255
     102:	30 93 19 01 	sts	0x0119, r19
     106:	20 93 18 01 	sts	0x0118, r18
			
			if(counter == 256)
     10a:	80 91 18 01 	lds	r24, 0x0118
     10e:	90 91 19 01 	lds	r25, 0x0119
     112:	80 50       	subi	r24, 0x00	; 0
     114:	91 40       	sbci	r25, 0x01	; 1
     116:	39 f5       	brne	.+78     	; 0x166 <__vector_16+0xac>
			{
				//PORTC = 0x80;
				read1 = 0;
     118:	10 92 17 01 	sts	0x0117, r1
     11c:	20 c0       	rjmp	.+64     	; 0x15e <__vector_16+0xa4>
				counter = 0;
			}
		}
		else if(read1 == 0)
     11e:	80 91 17 01 	lds	r24, 0x0117
     122:	88 23       	and	r24, r24
     124:	01 f5       	brne	.+64     	; 0x166 <__vector_16+0xac>
		{
			OCR1A = (unsigned char)Buff2[counter++];
     126:	20 91 18 01 	lds	r18, 0x0118
     12a:	30 91 19 01 	lds	r19, 0x0119
     12e:	f9 01       	movw	r30, r18
     130:	e6 5c       	subi	r30, 0xC6	; 198
     132:	fe 4f       	sbci	r31, 0xFE	; 254
     134:	80 81       	ld	r24, Z
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	90 93 89 00 	sts	0x0089, r25
     13c:	80 93 88 00 	sts	0x0088, r24
     140:	2f 5f       	subi	r18, 0xFF	; 255
     142:	3f 4f       	sbci	r19, 0xFF	; 255
     144:	30 93 19 01 	sts	0x0119, r19
     148:	20 93 18 01 	sts	0x0118, r18
			if(counter == 256)
     14c:	80 91 18 01 	lds	r24, 0x0118
     150:	90 91 19 01 	lds	r25, 0x0119
     154:	80 50       	subi	r24, 0x00	; 0
     156:	91 40       	sbci	r25, 0x01	; 1
     158:	31 f4       	brne	.+12     	; 0x166 <__vector_16+0xac>
			{
				//PORTC = 0x40;
				read1 = 1;
     15a:	40 93 17 01 	sts	0x0117, r20
				counter = 0;
     15e:	10 92 19 01 	sts	0x0119, r1
     162:	10 92 18 01 	sts	0x0118, r1
			}
		}
		
		
	}
}
     166:	ff 91       	pop	r31
     168:	ef 91       	pop	r30
     16a:	9f 91       	pop	r25
     16c:	8f 91       	pop	r24
     16e:	4f 91       	pop	r20
     170:	3f 91       	pop	r19
     172:	2f 91       	pop	r18
     174:	0f 90       	pop	r0
     176:	0f be       	out	0x3f, r0	; 63
     178:	0f 90       	pop	r0
     17a:	1f 90       	pop	r1
     17c:	18 95       	reti

0000017e <Timer0_init>:
	}
}

void Timer0_init(void)
{
	TCCR0A = _BV(WGM01);
     17e:	82 e0       	ldi	r24, 0x02	; 2
     180:	84 bd       	out	0x24, r24	; 36
	TCCR0B = _BV(CS01);//CTC, FCPU/8
     182:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = _BV(OCIE0A);
     184:	80 93 6e 00 	sts	0x006E, r24
}
     188:	08 95       	ret

0000018a <Timer1_init>:

void Timer1_init(void)
{
	TCCR1A = _BV(COM1A1)|_BV(COM1A0)|_BV(WGM10);
     18a:	81 ec       	ldi	r24, 0xC1	; 193
     18c:	80 93 80 00 	sts	0x0080, r24
	TCCR1B = _BV(WGM12)|_BV(CS10);
     190:	89 e0       	ldi	r24, 0x09	; 9
     192:	80 93 81 00 	sts	0x0081, r24
}
     196:	08 95       	ret

00000198 <Timer2_init>:

void Timer2_init(void)
{
	TCCR2A = _BV(WGM21);
     198:	82 e0       	ldi	r24, 0x02	; 2
     19a:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = _BV(CS22)|_BV(CS20);//CTC, FCPU/8
     19e:	95 e0       	ldi	r25, 0x05	; 5
     1a0:	90 93 b1 00 	sts	0x00B1, r25
	TIMSK2 = _BV(OCIE2A);
     1a4:	80 93 70 00 	sts	0x0070, r24
	OCR2A = 125;
     1a8:	8d e7       	ldi	r24, 0x7D	; 125
     1aa:	80 93 b3 00 	sts	0x00B3, r24
}
     1ae:	08 95       	ret

000001b0 <main>:
}

/*-----------------------------------------------------------------------*/
/* Main                                                                  */
int main (void)
{
     1b0:	a0 e0       	ldi	r26, 0x00	; 0
     1b2:	b0 e0       	ldi	r27, 0x00	; 0
     1b4:	ee ed       	ldi	r30, 0xDE	; 222
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	0c 94 91 0f 	jmp	0x1f22	; 0x1f22 <__prologue_saves__+0xa>
	// setare pin 5 (difuzor) si pin 6 (CS_SD) al portului A ca pin de iesire
	DDRD |= (1<<PD5) | (1<<PD6);
     1bc:	8a b1       	in	r24, 0x0a	; 10
     1be:	80 66       	ori	r24, 0x60	; 96
     1c0:	8a b9       	out	0x0a, r24	; 10
	
	// setam toti pinii portului C ca pini de iesire
	DDRC = 0xFF;
     1c2:	8f ef       	ldi	r24, 0xFF	; 255
     1c4:	87 b9       	out	0x07, r24	; 7
	
	DDRB &= ~(1<<PB0);
     1c6:	20 98       	cbi	0x04, 0	; 4
	DDRB &= ~(1<<PB1);
     1c8:	21 98       	cbi	0x04, 1	; 4
	
	PORTB |= (1<<PB1) | (1<<PB0);
     1ca:	85 b1       	in	r24, 0x05	; 5
     1cc:	83 60       	ori	r24, 0x03	; 3
     1ce:	85 b9       	out	0x05, r24	; 5
	PORTD &= ~((1<<PD5) | (1<<PD6));
     1d0:	8b b1       	in	r24, 0x0b	; 11
     1d2:	8f 79       	andi	r24, 0x9F	; 159
     1d4:	8b b9       	out	0x0b, r24	; 11
	PORTD &= ~((1<<PD5) | (1<<PD6));
     1d6:	8b b1       	in	r24, 0x0b	; 11
     1d8:	8f 79       	andi	r24, 0x9F	; 159
     1da:	8b b9       	out	0x0b, r24	; 11
	

	LCD_init();
     1dc:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <LCD_init>
		
	sei();
     1e0:	78 94       	sei
     1e2:	20 e1       	ldi	r18, 0x10	; 16
     1e4:	37 e2       	ldi	r19, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1e6:	00 e9       	ldi	r16, 0x90	; 144
     1e8:	11 e0       	ldi	r17, 0x01	; 1
     1ea:	05 c0       	rjmp	.+10     	; 0x1f6 <main+0x46>
     1ec:	c8 01       	movw	r24, r16
     1ee:	01 97       	sbiw	r24, 0x01	; 1
     1f0:	f1 f7       	brne	.-4      	; 0x1ee <main+0x3e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1f2:	21 50       	subi	r18, 0x01	; 1
     1f4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1f6:	21 15       	cp	r18, r1
     1f8:	31 05       	cpc	r19, r1
     1fa:	c1 f7       	brne	.-16     	; 0x1ec <main+0x3c>

	for (;;)
	{
		_delay_ms(1000);							/* Delay 1000ms for things to settle down */
		
		if (pf_mount(&Fs)) 
     1fc:	84 e6       	ldi	r24, 0x64	; 100
     1fe:	92 e0       	ldi	r25, 0x02	; 2
     200:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <pf_mount>
     204:	89 2b       	or	r24, r25
     206:	19 f0       	breq	.+6      	; 0x20e <main+0x5e>
     208:	20 e1       	ldi	r18, 0x10	; 16
     20a:	37 e2       	ldi	r19, 0x27	; 39
     20c:	ef cf       	rjmp	.-34     	; 0x1ec <main+0x3c>
		{	
			continue;	/* Initialize FS */
		}
		
		if (pf_opendir(&Dir, "wav")) break;		/* Open /wav folder */
     20e:	8c e3       	ldi	r24, 0x3C	; 60
     210:	92 e0       	ldi	r25, 0x02	; 2
     212:	60 e0       	ldi	r22, 0x00	; 0
     214:	71 e0       	ldi	r23, 0x01	; 1
     216:	0e 94 e7 07 	call	0xfce	; 0xfce <pf_opendir>
     21a:	89 2b       	or	r24, r25
     21c:	09 f0       	breq	.+2      	; 0x220 <main+0x70>
     21e:	53 c1       	rjmp	.+678    	; 0x4c6 <main+0x316>
		int state = STAHPED;
		char* filename, first_wav, last_wav_played;
		
		
		
		if (!pf_readdir(&Dir, &Fno) && Fno.fname[0]) /* go to next file*/
     220:	8c e3       	ldi	r24, 0x3C	; 60
     222:	92 e0       	ldi	r25, 0x02	; 2
     224:	62 e2       	ldi	r22, 0x22	; 34
     226:	71 e0       	ldi	r23, 0x01	; 1
     228:	0e 94 10 06 	call	0xc20	; 0xc20 <pf_readdir>
     22c:	89 2b       	or	r24, r25
     22e:	a1 f4       	brne	.+40     	; 0x258 <main+0xa8>
     230:	80 91 2b 01 	lds	r24, 0x012B
     234:	88 23       	and	r24, r24
     236:	81 f0       	breq	.+32     	; 0x258 <main+0xa8>
			{		
				if (!(Fno.fattrib & (AM_DIR|AM_HID)) && strstr(Fno.fname, "WAV")) /* filter out all the folders, hidden files and the files that are not "WAV" */
     238:	80 91 2a 01 	lds	r24, 0x012A
     23c:	82 71       	andi	r24, 0x12	; 18
     23e:	61 f4       	brne	.+24     	; 0x258 <main+0xa8>
     240:	8b e2       	ldi	r24, 0x2B	; 43
     242:	91 e0       	ldi	r25, 0x01	; 1
     244:	64 e0       	ldi	r22, 0x04	; 4
     246:	71 e0       	ldi	r23, 0x01	; 1
     248:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <strstr>
     24c:	00 97       	sbiw	r24, 0x00	; 0
     24e:	21 f0       	breq	.+8      	; 0x258 <main+0xa8>
				{	
					/* display the filename on the LCD */
					LCD_print(Fno.fname);
     250:	8b e2       	ldi	r24, 0x2B	; 43
     252:	91 e0       	ldi	r25, 0x01	; 1
     254:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_print>
	}
}

void Timer0_init(void)
{
	TCCR0A = _BV(WGM01);
     258:	42 e0       	ldi	r20, 0x02	; 2
     25a:	d4 2e       	mov	r13, r20
	TIMSK0 = _BV(OCIE0A);
}

void Timer1_init(void)
{
	TCCR1A = _BV(COM1A1)|_BV(COM1A0)|_BV(WGM10);
     25c:	31 ec       	ldi	r19, 0xC1	; 193
     25e:	73 2e       	mov	r7, r19
	TCCR1B = _BV(WGM12)|_BV(CS10);
     260:	29 e0       	ldi	r18, 0x09	; 9
     262:	82 2e       	mov	r8, r18
		sz = load_header();			/* Load file header */
		if (sz < 256) return (UINT)sz;
		
		
		FifoCt = 0; FifoRi = 0; FifoWi = 0;		/* Reset FIFO */
		pf_read(Buff1, 512 - (Fs.fptr % 512), &rb);	/* Snip sector unaligned part */
     264:	a1 2c       	mov	r10, r1
     266:	92 e0       	ldi	r25, 0x02	; 2
     268:	b9 2e       	mov	r11, r25

			
		res = pf_read(Buff1, size, &rb);
		if (res != FR_OK) { PORTC = 0x08; while (FifoCt) ; return res; }
		
		sync = 1;
     26a:	99 24       	eor	r9, r9
     26c:	93 94       	inc	r9
     26e:	c0 e9       	ldi	r28, 0x90	; 144
     270:	d1 e0       	ldi	r29, 0x01	; 1
			if(read1 == 1)	
				res = pf_read(Buff2, size, &rb);
			else
				res = pf_read(Buff1, size, &rb);
				
			if (res != FR_OK) { PORTC = 0x08; break; }
     272:	88 e0       	ldi	r24, 0x08	; 8
     274:	c8 2e       	mov	r12, r24
				}
			}		

		while(1) 
		{
			play(strcat("wav", Fno.fname));
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	91 e0       	ldi	r25, 0x01	; 1
     27a:	6b e2       	ldi	r22, 0x2B	; 43
     27c:	71 e0       	ldi	r23, 0x01	; 1
     27e:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <strcat>
	unsigned char read2;

	
	uint16_t size = 256;
	
	if ((res = pf_open(fn)) == FR_OK) {
     282:	0e 94 32 08 	call	0x1064	; 0x1064 <pf_open>
     286:	89 2b       	or	r24, r25
     288:	09 f0       	breq	.+2      	; 0x28c <main+0xdc>
     28a:	18 c1       	rjmp	.+560    	; 0x4bc <main+0x30c>
	}
}

void Timer0_init(void)
{
	TCCR0A = _BV(WGM01);
     28c:	d4 bc       	out	0x24, r13	; 36
	TCCR0B = _BV(CS01);//CTC, FCPU/8
     28e:	d5 bc       	out	0x25, r13	; 37
	TIMSK0 = _BV(OCIE0A);
     290:	d0 92 6e 00 	sts	0x006E, r13
}

void Timer1_init(void)
{
	TCCR1A = _BV(COM1A1)|_BV(COM1A0)|_BV(WGM10);
     294:	70 92 80 00 	sts	0x0080, r7
	TCCR1B = _BV(WGM12)|_BV(CS10);
     298:	80 92 81 00 	sts	0x0081, r8
DWORD load_header (void)	/* 0:Invalid format, 1:I/O error, >1:Number of samples */
{
	DWORD sz;


	if (pf_read(Buff1, 12, &rb)) return 1;	/* Load file header (12 bytes) */
     29c:	80 e9       	ldi	r24, 0x90	; 144
     29e:	92 e0       	ldi	r25, 0x02	; 2
     2a0:	6c e0       	ldi	r22, 0x0C	; 12
     2a2:	70 e0       	ldi	r23, 0x00	; 0
     2a4:	48 e3       	ldi	r20, 0x38	; 56
     2a6:	51 e0       	ldi	r21, 0x01	; 1
     2a8:	0e 94 8a 08 	call	0x1114	; 0x1114 <pf_read>
     2ac:	89 2b       	or	r24, r25
     2ae:	19 f7       	brne	.-58     	; 0x276 <main+0xc6>

	if (rb != 12 || LD_DWORD(Buff1+8) != FCC('W','A','V','E')) return 0;
     2b0:	80 91 38 01 	lds	r24, 0x0138
     2b4:	90 91 39 01 	lds	r25, 0x0139
     2b8:	0c 97       	sbiw	r24, 0x0c	; 12
     2ba:	e9 f6       	brne	.-70     	; 0x276 <main+0xc6>
     2bc:	80 91 98 02 	lds	r24, 0x0298
     2c0:	90 91 99 02 	lds	r25, 0x0299
     2c4:	a0 91 9a 02 	lds	r26, 0x029A
     2c8:	b0 91 9b 02 	lds	r27, 0x029B
     2cc:	87 55       	subi	r24, 0x57	; 87
     2ce:	91 44       	sbci	r25, 0x41	; 65
     2d0:	a6 45       	sbci	r26, 0x56	; 86
     2d2:	b5 44       	sbci	r27, 0x45	; 69
     2d4:	81 f6       	brne	.-96     	; 0x276 <main+0xc6>

	for (;;) {
		pf_read(Buff1, 8, &rb);			/* Get Chunk ID and size */
     2d6:	80 e9       	ldi	r24, 0x90	; 144
     2d8:	92 e0       	ldi	r25, 0x02	; 2
     2da:	68 e0       	ldi	r22, 0x08	; 8
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	48 e3       	ldi	r20, 0x38	; 56
     2e0:	51 e0       	ldi	r21, 0x01	; 1
     2e2:	0e 94 8a 08 	call	0x1114	; 0x1114 <pf_read>
		if (rb != 8) return 0;
     2e6:	80 91 38 01 	lds	r24, 0x0138
     2ea:	90 91 39 01 	lds	r25, 0x0139
     2ee:	08 97       	sbiw	r24, 0x08	; 8
     2f0:	09 f0       	breq	.+2      	; 0x2f4 <main+0x144>
     2f2:	c1 cf       	rjmp	.-126    	; 0x276 <main+0xc6>
		sz = LD_DWORD(&Buff1[4]);		/* Chunk size */
     2f4:	e0 90 94 02 	lds	r14, 0x0294
     2f8:	f0 90 95 02 	lds	r15, 0x0295
     2fc:	00 91 96 02 	lds	r16, 0x0296
     300:	10 91 97 02 	lds	r17, 0x0297

		switch (LD_DWORD(&Buff1[0])) {	/* FCC */
     304:	80 91 90 02 	lds	r24, 0x0290
     308:	90 91 91 02 	lds	r25, 0x0291
     30c:	a0 91 92 02 	lds	r26, 0x0292
     310:	b0 91 93 02 	lds	r27, 0x0293
     314:	8c 34       	cpi	r24, 0x4C	; 76
     316:	29 e4       	ldi	r18, 0x49	; 73
     318:	92 07       	cpc	r25, r18
     31a:	23 e5       	ldi	r18, 0x53	; 83
     31c:	a2 07       	cpc	r26, r18
     31e:	24 e5       	ldi	r18, 0x54	; 84
     320:	b2 07       	cpc	r27, r18
     322:	09 f4       	brne	.+2      	; 0x326 <main+0x176>
     324:	5e c0       	rjmp	.+188    	; 0x3e2 <main+0x232>
     326:	8d 34       	cpi	r24, 0x4D	; 77
     328:	29 e4       	ldi	r18, 0x49	; 73
     32a:	92 07       	cpc	r25, r18
     32c:	23 e5       	ldi	r18, 0x53	; 83
     32e:	a2 07       	cpc	r26, r18
     330:	24 e5       	ldi	r18, 0x54	; 84
     332:	b2 07       	cpc	r27, r18
     334:	38 f4       	brcc	.+14     	; 0x344 <main+0x194>
     336:	86 56       	subi	r24, 0x66	; 102
     338:	9d 46       	sbci	r25, 0x6D	; 109
     33a:	a4 47       	sbci	r26, 0x74	; 116
     33c:	b0 42       	sbci	r27, 0x20	; 32
     33e:	09 f0       	breq	.+2      	; 0x342 <main+0x192>
     340:	9a cf       	rjmp	.-204    	; 0x276 <main+0xc6>
     342:	10 c0       	rjmp	.+32     	; 0x364 <main+0x1b4>
     344:	84 36       	cpi	r24, 0x64	; 100
     346:	21 e6       	ldi	r18, 0x61	; 97
     348:	92 07       	cpc	r25, r18
     34a:	24 e7       	ldi	r18, 0x74	; 116
     34c:	a2 07       	cpc	r26, r18
     34e:	21 e6       	ldi	r18, 0x61	; 97
     350:	b2 07       	cpc	r27, r18
     352:	09 f4       	brne	.+2      	; 0x356 <main+0x1a6>
     354:	57 c0       	rjmp	.+174    	; 0x404 <main+0x254>
     356:	86 56       	subi	r24, 0x66	; 102
     358:	91 46       	sbci	r25, 0x61	; 97
     35a:	a3 46       	sbci	r26, 0x63	; 99
     35c:	b4 47       	sbci	r27, 0x74	; 116
     35e:	09 f0       	breq	.+2      	; 0x362 <main+0x1b2>
     360:	8a cf       	rjmp	.-236    	; 0x276 <main+0xc6>
     362:	3f c0       	rjmp	.+126    	; 0x3e2 <main+0x232>
		case FCC('f','m','t',' ') :					/* 'fmt ' chunk */
			if (sz > 100 || sz < 16) return 0;		/* Check chunk size */
     364:	d8 01       	movw	r26, r16
     366:	c7 01       	movw	r24, r14
     368:	40 97       	sbiw	r24, 0x10	; 16
     36a:	a1 09       	sbc	r26, r1
     36c:	b1 09       	sbc	r27, r1
     36e:	85 35       	cpi	r24, 0x55	; 85
     370:	91 05       	cpc	r25, r1
     372:	a1 05       	cpc	r26, r1
     374:	b1 05       	cpc	r27, r1
     376:	08 f0       	brcs	.+2      	; 0x37a <main+0x1ca>
     378:	7e cf       	rjmp	.-260    	; 0x276 <main+0xc6>
			pf_read(Buff1, sz, &rb);					/* Get content */
     37a:	80 e9       	ldi	r24, 0x90	; 144
     37c:	92 e0       	ldi	r25, 0x02	; 2
     37e:	b7 01       	movw	r22, r14
     380:	48 e3       	ldi	r20, 0x38	; 56
     382:	51 e0       	ldi	r21, 0x01	; 1
     384:	0e 94 8a 08 	call	0x1114	; 0x1114 <pf_read>
			if (rb != sz) return 0;
     388:	80 91 38 01 	lds	r24, 0x0138
     38c:	90 91 39 01 	lds	r25, 0x0139
     390:	a0 e0       	ldi	r26, 0x00	; 0
     392:	b0 e0       	ldi	r27, 0x00	; 0
     394:	8e 15       	cp	r24, r14
     396:	9f 05       	cpc	r25, r15
     398:	a0 07       	cpc	r26, r16
     39a:	b1 07       	cpc	r27, r17
     39c:	09 f0       	breq	.+2      	; 0x3a0 <main+0x1f0>
     39e:	6b cf       	rjmp	.-298    	; 0x276 <main+0xc6>
			if (Buff1[0] != 1) return 0;				/* Check coding type (1) */
     3a0:	80 91 90 02 	lds	r24, 0x0290
     3a4:	81 30       	cpi	r24, 0x01	; 1
     3a6:	09 f0       	breq	.+2      	; 0x3aa <main+0x1fa>
     3a8:	66 cf       	rjmp	.-308    	; 0x276 <main+0xc6>
			if (Buff1[2] != 1 && Buff1[2] != 2) 		/* Check channels (1/2) */
     3aa:	80 91 92 02 	lds	r24, 0x0292
     3ae:	81 50       	subi	r24, 0x01	; 1
     3b0:	82 30       	cpi	r24, 0x02	; 2
     3b2:	08 f0       	brcs	.+2      	; 0x3b6 <main+0x206>
     3b4:	60 cf       	rjmp	.-320    	; 0x276 <main+0xc6>
				return 0;
			
			if (Buff1[14] != 8 && Buff1[14] != 16)	/* Check resolution (8/16) */
     3b6:	80 91 9e 02 	lds	r24, 0x029E
     3ba:	88 30       	cpi	r24, 0x08	; 8
     3bc:	19 f0       	breq	.+6      	; 0x3c4 <main+0x214>
     3be:	80 31       	cpi	r24, 0x10	; 16
     3c0:	09 f0       	breq	.+2      	; 0x3c4 <main+0x214>
     3c2:	59 cf       	rjmp	.-334    	; 0x276 <main+0xc6>
				return 0;
			
			OCR0A = (BYTE)(F_CPU/8/LD_WORD(&Buff1[4]))-1;	/* Sampling freq */
     3c4:	20 91 94 02 	lds	r18, 0x0294
     3c8:	30 91 95 02 	lds	r19, 0x0295
     3cc:	40 e0       	ldi	r20, 0x00	; 0
     3ce:	50 e0       	ldi	r21, 0x00	; 0
     3d0:	60 e8       	ldi	r22, 0x80	; 128
     3d2:	74 e8       	ldi	r23, 0x84	; 132
     3d4:	8e e1       	ldi	r24, 0x1E	; 30
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__divmodsi4>
     3dc:	21 50       	subi	r18, 0x01	; 1
     3de:	27 bd       	out	0x27, r18	; 39
     3e0:	7a cf       	rjmp	.-268    	; 0x2d6 <main+0x126>
		case FCC('d','a','t','a') :				/* 'data' chunk (start to play) */
			return sz;

		case FCC('L','I','S','T') :				/* 'LIST' chunk (skip) */
		case FCC('f','a','c','t') :				/* 'fact' chunk (skip) */
			pf_lseek(Fs.fptr + sz);
     3e2:	80 91 7c 02 	lds	r24, 0x027C
     3e6:	90 91 7d 02 	lds	r25, 0x027D
     3ea:	a0 91 7e 02 	lds	r26, 0x027E
     3ee:	b0 91 7f 02 	lds	r27, 0x027F
     3f2:	e8 0e       	add	r14, r24
     3f4:	f9 1e       	adc	r15, r25
     3f6:	0a 1f       	adc	r16, r26
     3f8:	1b 1f       	adc	r17, r27
     3fa:	c8 01       	movw	r24, r16
     3fc:	b7 01       	movw	r22, r14
     3fe:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <pf_lseek>
     402:	69 cf       	rjmp	.-302    	; 0x2d6 <main+0x126>
	
		Timer0_init();
		Timer1_init();
		
		sz = load_header();			/* Load file header */
		if (sz < 256) return (UINT)sz;
     404:	8f ef       	ldi	r24, 0xFF	; 255
     406:	e8 16       	cp	r14, r24
     408:	f1 04       	cpc	r15, r1
     40a:	01 05       	cpc	r16, r1
     40c:	11 05       	cpc	r17, r1
     40e:	09 f0       	breq	.+2      	; 0x412 <main+0x262>
     410:	08 f4       	brcc	.+2      	; 0x414 <main+0x264>
     412:	31 cf       	rjmp	.-414    	; 0x276 <main+0xc6>
		
		
		FifoCt = 0; FifoRi = 0; FifoWi = 0;		/* Reset FIFO */
     414:	10 92 61 02 	sts	0x0261, r1
     418:	10 92 21 01 	sts	0x0121, r1
     41c:	10 92 20 01 	sts	0x0120, r1
		pf_read(Buff1, 512 - (Fs.fptr % 512), &rb);	/* Snip sector unaligned part */
     420:	80 91 7c 02 	lds	r24, 0x027C
     424:	90 91 7d 02 	lds	r25, 0x027D
     428:	91 70       	andi	r25, 0x01	; 1
     42a:	b5 01       	movw	r22, r10
     42c:	68 1b       	sub	r22, r24
     42e:	79 0b       	sbc	r23, r25
     430:	80 e9       	ldi	r24, 0x90	; 144
     432:	92 e0       	ldi	r25, 0x02	; 2
     434:	48 e3       	ldi	r20, 0x38	; 56
     436:	51 e0       	ldi	r21, 0x01	; 1
     438:	0e 94 8a 08 	call	0x1114	; 0x1114 <pf_read>
		sz -= rb;

			
		res = pf_read(Buff1, size, &rb);
     43c:	80 e9       	ldi	r24, 0x90	; 144
     43e:	92 e0       	ldi	r25, 0x02	; 2
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	71 e0       	ldi	r23, 0x01	; 1
     444:	48 e3       	ldi	r20, 0x38	; 56
     446:	51 e0       	ldi	r21, 0x01	; 1
     448:	0e 94 8a 08 	call	0x1114	; 0x1114 <pf_read>
		if (res != FR_OK) { PORTC = 0x08; while (FifoCt) ; return res; }
     44c:	89 2b       	or	r24, r25
     44e:	31 f0       	breq	.+12     	; 0x45c <main+0x2ac>
     450:	c8 b8       	out	0x08, r12	; 8
     452:	80 91 61 02 	lds	r24, 0x0261
     456:	88 23       	and	r24, r24
     458:	e1 f7       	brne	.-8      	; 0x452 <main+0x2a2>
     45a:	0d cf       	rjmp	.-486    	; 0x276 <main+0xc6>
		
		sync = 1;
     45c:	90 92 1a 01 	sts	0x011A, r9
				
		do {
				
			read2 = read1;
     460:	10 91 17 01 	lds	r17, 0x0117
			
			if(read1 == 1)	
     464:	80 91 17 01 	lds	r24, 0x0117
     468:	81 30       	cpi	r24, 0x01	; 1
     46a:	19 f4       	brne	.+6      	; 0x472 <main+0x2c2>
				res = pf_read(Buff2, size, &rb);
     46c:	8a e3       	ldi	r24, 0x3A	; 58
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	02 c0       	rjmp	.+4      	; 0x476 <main+0x2c6>
			else
				res = pf_read(Buff1, size, &rb);
     472:	80 e9       	ldi	r24, 0x90	; 144
     474:	92 e0       	ldi	r25, 0x02	; 2
     476:	60 e0       	ldi	r22, 0x00	; 0
     478:	71 e0       	ldi	r23, 0x01	; 1
     47a:	48 e3       	ldi	r20, 0x38	; 56
     47c:	51 e0       	ldi	r21, 0x01	; 1
     47e:	0e 94 8a 08 	call	0x1114	; 0x1114 <pf_read>
				
			if (res != FR_OK) { PORTC = 0x08; break; }
     482:	89 2b       	or	r24, r25
     484:	11 f0       	breq	.+4      	; 0x48a <main+0x2da>
     486:	c8 b8       	out	0x08, r12	; 8
     488:	17 c0       	rjmp	.+46     	; 0x4b8 <main+0x308>
			
			while(read2 == read1);
     48a:	80 91 17 01 	lds	r24, 0x0117
     48e:	18 17       	cp	r17, r24
     490:	e1 f3       	breq	.-8      	; 0x48a <main+0x2da>
			
			if(!(PINB&(1<<PB1))) 
     492:	19 99       	sbic	0x03, 1	; 3
     494:	0a c0       	rjmp	.+20     	; 0x4aa <main+0x2fa>
			{
				sync = 0;
     496:	10 92 1a 01 	sts	0x011A, r1
     49a:	88 e8       	ldi	r24, 0x88	; 136
     49c:	93 e1       	ldi	r25, 0x13	; 19
     49e:	fe 01       	movw	r30, r28
     4a0:	31 97       	sbiw	r30, 0x01	; 1
     4a2:	f1 f7       	brne	.-4      	; 0x4a0 <main+0x2f0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4a6:	d9 f7       	brne	.-10     	; 0x49e <main+0x2ee>
     4a8:	07 c0       	rjmp	.+14     	; 0x4b8 <main+0x308>
				_delay_ms(500); 
				break;
			}
			
		
		} while (rb == size);	/* Repeat until all data read */
     4aa:	80 91 38 01 	lds	r24, 0x0138
     4ae:	90 91 39 01 	lds	r25, 0x0139
     4b2:	80 50       	subi	r24, 0x00	; 0
     4b4:	91 40       	sbci	r25, 0x01	; 1
     4b6:	a1 f2       	breq	.-88     	; 0x460 <main+0x2b0>
		
		sync = 0;
     4b8:	10 92 1a 01 	sts	0x011A, r1
	}

	while (FifoCt) ;			/* Wait for FIFO empty */
     4bc:	80 91 61 02 	lds	r24, 0x0261
     4c0:	88 23       	and	r24, r24
     4c2:	e1 f7       	brne	.-8      	; 0x4bc <main+0x30c>
     4c4:	d8 ce       	rjmp	.-592    	; 0x276 <main+0xc6>
			play(strcat("wav", Fno.fname));
			
		}
	}
	return 1;
}
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	cd b7       	in	r28, 0x3d	; 61
     4cc:	de b7       	in	r29, 0x3e	; 62
     4ce:	ed e0       	ldi	r30, 0x0D	; 13
     4d0:	0c 94 ad 0f 	jmp	0x1f5a	; 0x1f5a <__epilogue_restores__+0xa>

000004d4 <__vector_9>:
		
	}
}

ISR(TIMER2_COMPA_vect)
{
     4d4:	1f 92       	push	r1
     4d6:	0f 92       	push	r0
     4d8:	0f b6       	in	r0, 0x3f	; 63
     4da:	0f 92       	push	r0
     4dc:	11 24       	eor	r1, r1
     4de:	0f 93       	push	r16
     4e0:	1f 93       	push	r17
     4e2:	2f 93       	push	r18
     4e4:	3f 93       	push	r19
     4e6:	4f 93       	push	r20
     4e8:	5f 93       	push	r21
     4ea:	6f 93       	push	r22
     4ec:	7f 93       	push	r23
     4ee:	8f 93       	push	r24
     4f0:	9f 93       	push	r25
     4f2:	af 93       	push	r26
     4f4:	bf 93       	push	r27
     4f6:	ef 93       	push	r30
     4f8:	ff 93       	push	r31
	miliseconds++;
     4fa:	80 91 3a 02 	lds	r24, 0x023A
     4fe:	90 91 3b 02 	lds	r25, 0x023B
     502:	01 96       	adiw	r24, 0x01	; 1
     504:	90 93 3b 02 	sts	0x023B, r25
     508:	80 93 3a 02 	sts	0x023A, r24
	if(miliseconds == 1000)
     50c:	88 5e       	subi	r24, 0xE8	; 232
     50e:	93 40       	sbci	r25, 0x03	; 3
     510:	09 f0       	breq	.+2      	; 0x514 <__vector_9+0x40>
     512:	52 c0       	rjmp	.+164    	; 0x5b8 <__vector_9+0xe4>
	{
		miliseconds = 0;
     514:	10 92 3b 02 	sts	0x023B, r1
     518:	10 92 3a 02 	sts	0x023A, r1
		
		seconds++;
     51c:	80 91 4c 02 	lds	r24, 0x024C
     520:	8f 5f       	subi	r24, 0xFF	; 255
     522:	80 93 4c 02 	sts	0x024C, r24
		
		if(seconds == 60) 
     526:	8c 33       	cpi	r24, 0x3C	; 60
     528:	a1 f4       	brne	.+40     	; 0x552 <__vector_9+0x7e>
		{
			seconds = 0;
     52a:	10 92 4c 02 	sts	0x024C, r1
			minutes++;
     52e:	80 91 62 02 	lds	r24, 0x0262
     532:	8f 5f       	subi	r24, 0xFF	; 255
     534:	80 93 62 02 	sts	0x0262, r24
			if(minutes == 60)
     538:	8c 33       	cpi	r24, 0x3C	; 60
     53a:	59 f4       	brne	.+22     	; 0x552 <__vector_9+0x7e>
			{
				minutes = 0;
     53c:	10 92 62 02 	sts	0x0262, r1
				hours++;
     540:	80 91 63 02 	lds	r24, 0x0263
     544:	8f 5f       	subi	r24, 0xFF	; 255
     546:	80 93 63 02 	sts	0x0263, r24
				if(hours == 24) hours = 0;
     54a:	88 31       	cpi	r24, 0x18	; 24
     54c:	11 f4       	brne	.+4      	; 0x552 <__vector_9+0x7e>
     54e:	10 92 63 02 	sts	0x0263, r1
			}
		}
		
		sprintf(time_string, "%02d:%02d:%02d", hours, minutes, seconds);
     552:	0d e4       	ldi	r16, 0x4D	; 77
     554:	12 e0       	ldi	r17, 0x02	; 2
     556:	8d b7       	in	r24, 0x3d	; 61
     558:	9e b7       	in	r25, 0x3e	; 62
     55a:	0a 97       	sbiw	r24, 0x0a	; 10
     55c:	0f b6       	in	r0, 0x3f	; 63
     55e:	f8 94       	cli
     560:	9e bf       	out	0x3e, r25	; 62
     562:	0f be       	out	0x3f, r0	; 63
     564:	8d bf       	out	0x3d, r24	; 61
     566:	ed b7       	in	r30, 0x3d	; 61
     568:	fe b7       	in	r31, 0x3e	; 62
     56a:	31 96       	adiw	r30, 0x01	; 1
     56c:	ad b7       	in	r26, 0x3d	; 61
     56e:	be b7       	in	r27, 0x3e	; 62
     570:	12 96       	adiw	r26, 0x02	; 2
     572:	1c 93       	st	X, r17
     574:	0e 93       	st	-X, r16
     576:	11 97       	sbiw	r26, 0x01	; 1
     578:	88 e0       	ldi	r24, 0x08	; 8
     57a:	91 e0       	ldi	r25, 0x01	; 1
     57c:	93 83       	std	Z+3, r25	; 0x03
     57e:	82 83       	std	Z+2, r24	; 0x02
     580:	80 91 63 02 	lds	r24, 0x0263
     584:	84 83       	std	Z+4, r24	; 0x04
     586:	15 82       	std	Z+5, r1	; 0x05
     588:	80 91 62 02 	lds	r24, 0x0262
     58c:	86 83       	std	Z+6, r24	; 0x06
     58e:	17 82       	std	Z+7, r1	; 0x07
     590:	80 91 4c 02 	lds	r24, 0x024C
     594:	80 87       	std	Z+8, r24	; 0x08
     596:	11 86       	std	Z+9, r1	; 0x09
     598:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <sprintf>
		LCD_writeInstruction(LCD_INSTR_nextLine);
     59c:	8d b7       	in	r24, 0x3d	; 61
     59e:	9e b7       	in	r25, 0x3e	; 62
     5a0:	0a 96       	adiw	r24, 0x0a	; 10
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	f8 94       	cli
     5a6:	9e bf       	out	0x3e, r25	; 62
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	8d bf       	out	0x3d, r24	; 61
     5ac:	80 ec       	ldi	r24, 0xC0	; 192
     5ae:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_writeInstruction>
		LCD_print(time_string);	
     5b2:	c8 01       	movw	r24, r16
     5b4:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_print>
	}
}
     5b8:	ff 91       	pop	r31
     5ba:	ef 91       	pop	r30
     5bc:	bf 91       	pop	r27
     5be:	af 91       	pop	r26
     5c0:	9f 91       	pop	r25
     5c2:	8f 91       	pop	r24
     5c4:	7f 91       	pop	r23
     5c6:	6f 91       	pop	r22
     5c8:	5f 91       	pop	r21
     5ca:	4f 91       	pop	r20
     5cc:	3f 91       	pop	r19
     5ce:	2f 91       	pop	r18
     5d0:	1f 91       	pop	r17
     5d2:	0f 91       	pop	r16
     5d4:	0f 90       	pop	r0
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	0f 90       	pop	r0
     5da:	1f 90       	pop	r1
     5dc:	18 95       	reti

000005de <dir_rewind>:

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
     5de:	a0 e0       	ldi	r26, 0x00	; 0
     5e0:	b0 e0       	ldi	r27, 0x00	; 0
     5e2:	e5 ef       	ldi	r30, 0xF5	; 245
     5e4:	f2 e0       	ldi	r31, 0x02	; 2
     5e6:	0c 94 96 0f 	jmp	0x1f2c	; 0x1f2c <__prologue_saves__+0x14>
     5ea:	6c 01       	movw	r12, r24
	CLUST clst;
	FATFS *fs = FatFs;
     5ec:	c0 91 1b 01 	lds	r28, 0x011B
     5f0:	d0 91 1c 01 	lds	r29, 0x011C


	dj->index = 0;
     5f4:	fc 01       	movw	r30, r24
     5f6:	11 82       	std	Z+1, r1	; 0x01
     5f8:	10 82       	st	Z, r1
	clst = dj->sclust;
     5fa:	24 81       	ldd	r18, Z+4	; 0x04
     5fc:	35 81       	ldd	r19, Z+5	; 0x05
     5fe:	46 81       	ldd	r20, Z+6	; 0x06
     600:	57 81       	ldd	r21, Z+7	; 0x07
	if (clst == 1 || clst >= fs->max_clust)	/* Check start cluster range */
     602:	21 30       	cpi	r18, 0x01	; 1
     604:	31 05       	cpc	r19, r1
     606:	41 05       	cpc	r20, r1
     608:	51 05       	cpc	r21, r1
     60a:	09 f4       	brne	.+2      	; 0x60e <dir_rewind+0x30>
     60c:	5c c0       	rjmp	.+184    	; 0x6c6 <dir_rewind+0xe8>
     60e:	88 85       	ldd	r24, Y+8	; 0x08
     610:	99 85       	ldd	r25, Y+9	; 0x09
     612:	aa 85       	ldd	r26, Y+10	; 0x0a
     614:	bb 85       	ldd	r27, Y+11	; 0x0b
     616:	28 17       	cp	r18, r24
     618:	39 07       	cpc	r19, r25
     61a:	4a 07       	cpc	r20, r26
     61c:	5b 07       	cpc	r21, r27
     61e:	08 f0       	brcs	.+2      	; 0x622 <dir_rewind+0x44>
     620:	52 c0       	rjmp	.+164    	; 0x6c6 <dir_rewind+0xe8>
		return FR_DISK_ERR;
#if _FS_FAT32
	if (!clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
     622:	21 15       	cp	r18, r1
     624:	31 05       	cpc	r19, r1
     626:	41 05       	cpc	r20, r1
     628:	51 05       	cpc	r21, r1
     62a:	39 f4       	brne	.+14     	; 0x63a <dir_rewind+0x5c>
     62c:	88 81       	ld	r24, Y
     62e:	83 30       	cpi	r24, 0x03	; 3
     630:	21 f4       	brne	.+8      	; 0x63a <dir_rewind+0x5c>
		clst = fs->dirbase;
     632:	28 89       	ldd	r18, Y+16	; 0x10
     634:	39 89       	ldd	r19, Y+17	; 0x11
     636:	4a 89       	ldd	r20, Y+18	; 0x12
     638:	5b 89       	ldd	r21, Y+19	; 0x13
#endif
	dj->clust = clst;						/* Current cluster */
     63a:	f6 01       	movw	r30, r12
     63c:	20 87       	std	Z+8, r18	; 0x08
     63e:	31 87       	std	Z+9, r19	; 0x09
     640:	42 87       	std	Z+10, r20	; 0x0a
     642:	53 87       	std	Z+11, r21	; 0x0b
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     644:	21 15       	cp	r18, r1
     646:	31 05       	cpc	r19, r1
     648:	41 05       	cpc	r20, r1
     64a:	51 05       	cpc	r21, r1
     64c:	81 f1       	breq	.+96     	; 0x6ae <dir_rewind+0xd0>
)
{
	FATFS *fs = FatFs;


	clst -= 2;
     64e:	8e ef       	ldi	r24, 0xFE	; 254
     650:	e8 2e       	mov	r14, r24
     652:	8f ef       	ldi	r24, 0xFF	; 255
     654:	f8 2e       	mov	r15, r24
     656:	8f ef       	ldi	r24, 0xFF	; 255
     658:	08 2f       	mov	r16, r24
     65a:	8f ef       	ldi	r24, 0xFF	; 255
     65c:	18 2f       	mov	r17, r24
     65e:	e2 0e       	add	r14, r18
     660:	f3 1e       	adc	r15, r19
     662:	04 1f       	adc	r16, r20
     664:	15 1f       	adc	r17, r21
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     666:	88 85       	ldd	r24, Y+8	; 0x08
     668:	99 85       	ldd	r25, Y+9	; 0x09
     66a:	aa 85       	ldd	r26, Y+10	; 0x0a
     66c:	bb 85       	ldd	r27, Y+11	; 0x0b
     66e:	02 97       	sbiw	r24, 0x02	; 2
     670:	a1 09       	sbc	r26, r1
     672:	b1 09       	sbc	r27, r1
     674:	e8 16       	cp	r14, r24
     676:	f9 06       	cpc	r15, r25
     678:	0a 07       	cpc	r16, r26
     67a:	1b 07       	cpc	r17, r27
     67c:	28 f0       	brcs	.+10     	; 0x688 <dir_rewind+0xaa>
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	40 e0       	ldi	r20, 0x00	; 0
     684:	50 e0       	ldi	r21, 0x00	; 0
     686:	17 c0       	rjmp	.+46     	; 0x6b6 <dir_rewind+0xd8>
	return (DWORD)clst * fs->csize + fs->database;
     688:	29 81       	ldd	r18, Y+1	; 0x01
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	40 e0       	ldi	r20, 0x00	; 0
     68e:	50 e0       	ldi	r21, 0x00	; 0
     690:	c8 01       	movw	r24, r16
     692:	b7 01       	movw	r22, r14
     694:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <__mulsi3>
     698:	9b 01       	movw	r18, r22
     69a:	ac 01       	movw	r20, r24
     69c:	8c 89       	ldd	r24, Y+20	; 0x14
     69e:	9d 89       	ldd	r25, Y+21	; 0x15
     6a0:	ae 89       	ldd	r26, Y+22	; 0x16
     6a2:	bf 89       	ldd	r27, Y+23	; 0x17
     6a4:	28 0f       	add	r18, r24
     6a6:	39 1f       	adc	r19, r25
     6a8:	4a 1f       	adc	r20, r26
     6aa:	5b 1f       	adc	r21, r27
     6ac:	04 c0       	rjmp	.+8      	; 0x6b6 <dir_rewind+0xd8>
#if _FS_FAT32
	if (!clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = fs->dirbase;
#endif
	dj->clust = clst;						/* Current cluster */
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     6ae:	28 89       	ldd	r18, Y+16	; 0x10
     6b0:	39 89       	ldd	r19, Y+17	; 0x11
     6b2:	4a 89       	ldd	r20, Y+18	; 0x12
     6b4:	5b 89       	ldd	r21, Y+19	; 0x13
     6b6:	f6 01       	movw	r30, r12
     6b8:	24 87       	std	Z+12, r18	; 0x0c
     6ba:	35 87       	std	Z+13, r19	; 0x0d
     6bc:	46 87       	std	Z+14, r20	; 0x0e
     6be:	57 87       	std	Z+15, r21	; 0x0f
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	02 c0       	rjmp	.+4      	; 0x6ca <dir_rewind+0xec>

	return FR_OK;	/* Seek succeeded */
     6c6:	21 e0       	ldi	r18, 0x01	; 1
     6c8:	30 e0       	ldi	r19, 0x00	; 0
}
     6ca:	c9 01       	movw	r24, r18
     6cc:	cd b7       	in	r28, 0x3d	; 61
     6ce:	de b7       	in	r29, 0x3e	; 62
     6d0:	e8 e0       	ldi	r30, 0x08	; 8
     6d2:	0c 94 b2 0f 	jmp	0x1f64	; 0x1f64 <__epilogue_restores__+0x14>

000006d6 <get_fat>:

static
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
     6d6:	a4 e0       	ldi	r26, 0x04	; 4
     6d8:	b0 e0       	ldi	r27, 0x00	; 0
     6da:	e1 e7       	ldi	r30, 0x71	; 113
     6dc:	f3 e0       	ldi	r31, 0x03	; 3
     6de:	0c 94 90 0f 	jmp	0x1f20	; 0x1f20 <__prologue_saves__+0x8>
     6e2:	4b 01       	movw	r8, r22
     6e4:	5c 01       	movw	r10, r24
	WORD wc, bc, ofs;
	BYTE buf[4];
	FATFS *fs = FatFs;
     6e6:	60 90 1b 01 	lds	r6, 0x011B
     6ea:	70 90 1c 01 	lds	r7, 0x011C


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
     6ee:	82 e0       	ldi	r24, 0x02	; 2
     6f0:	88 16       	cp	r8, r24
     6f2:	91 04       	cpc	r9, r1
     6f4:	a1 04       	cpc	r10, r1
     6f6:	b1 04       	cpc	r11, r1
     6f8:	08 f4       	brcc	.+2      	; 0x6fc <get_fat+0x26>
     6fa:	b4 c0       	rjmp	.+360    	; 0x864 <get_fat+0x18e>
     6fc:	f3 01       	movw	r30, r6
     6fe:	80 85       	ldd	r24, Z+8	; 0x08
     700:	91 85       	ldd	r25, Z+9	; 0x09
     702:	a2 85       	ldd	r26, Z+10	; 0x0a
     704:	b3 85       	ldd	r27, Z+11	; 0x0b
     706:	88 16       	cp	r8, r24
     708:	99 06       	cpc	r9, r25
     70a:	aa 06       	cpc	r10, r26
     70c:	bb 06       	cpc	r11, r27
     70e:	08 f0       	brcs	.+2      	; 0x712 <get_fat+0x3c>
     710:	a9 c0       	rjmp	.+338    	; 0x864 <get_fat+0x18e>
		return 1;

	switch (fs->fs_type) {
     712:	80 81       	ld	r24, Z
     714:	82 30       	cpi	r24, 0x02	; 2
     716:	09 f4       	brne	.+2      	; 0x71a <get_fat+0x44>
     718:	5f c0       	rjmp	.+190    	; 0x7d8 <get_fat+0x102>
     71a:	83 30       	cpi	r24, 0x03	; 3
     71c:	09 f4       	brne	.+2      	; 0x720 <get_fat+0x4a>
     71e:	7b c0       	rjmp	.+246    	; 0x816 <get_fat+0x140>
     720:	81 30       	cpi	r24, 0x01	; 1
     722:	09 f0       	breq	.+2      	; 0x726 <get_fat+0x50>
     724:	9f c0       	rjmp	.+318    	; 0x864 <get_fat+0x18e>
	case FS_FAT12 :
		bc = (WORD)clst; bc += bc / 2;
     726:	c4 01       	movw	r24, r8
     728:	96 95       	lsr	r25
     72a:	87 95       	ror	r24
     72c:	88 0d       	add	r24, r8
     72e:	99 1d       	adc	r25, r9
		ofs = bc % 512; bc /= 512;
     730:	9c 01       	movw	r18, r24
     732:	31 70       	andi	r19, 0x01	; 1
     734:	89 2f       	mov	r24, r25
     736:	99 27       	eor	r25, r25
     738:	86 95       	lsr	r24
     73a:	6c 01       	movw	r12, r24
     73c:	ee 24       	eor	r14, r14
     73e:	ff 24       	eor	r15, r15
     740:	f3 01       	movw	r30, r6
     742:	44 85       	ldd	r20, Z+12	; 0x0c
     744:	55 85       	ldd	r21, Z+13	; 0x0d
     746:	66 85       	ldd	r22, Z+14	; 0x0e
     748:	77 85       	ldd	r23, Z+15	; 0x0f
     74a:	ce 01       	movw	r24, r28
     74c:	01 96       	adiw	r24, 0x01	; 1
		if (ofs != 511) {
     74e:	f1 e0       	ldi	r31, 0x01	; 1
     750:	2f 3f       	cpi	r18, 0xFF	; 255
     752:	3f 07       	cpc	r19, r31
     754:	49 f0       	breq	.+18     	; 0x768 <get_fat+0x92>
			if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
     756:	c4 0e       	add	r12, r20
     758:	d5 1e       	adc	r13, r21
     75a:	e6 1e       	adc	r14, r22
     75c:	f7 1e       	adc	r15, r23
     75e:	b7 01       	movw	r22, r14
     760:	a6 01       	movw	r20, r12
     762:	02 e0       	ldi	r16, 0x02	; 2
     764:	10 e0       	ldi	r17, 0x00	; 0
     766:	1e c0       	rjmp	.+60     	; 0x7a4 <get_fat+0xce>
		} else {
			if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
     768:	4c 0d       	add	r20, r12
     76a:	5d 1d       	adc	r21, r13
     76c:	6e 1d       	adc	r22, r14
     76e:	7f 1d       	adc	r23, r15
     770:	2f ef       	ldi	r18, 0xFF	; 255
     772:	31 e0       	ldi	r19, 0x01	; 1
     774:	01 e0       	ldi	r16, 0x01	; 1
     776:	10 e0       	ldi	r17, 0x00	; 0
     778:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <disk_readp>
     77c:	89 2b       	or	r24, r25
     77e:	09 f0       	breq	.+2      	; 0x782 <get_fat+0xac>
     780:	71 c0       	rjmp	.+226    	; 0x864 <get_fat+0x18e>
			if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
     782:	f3 01       	movw	r30, r6
     784:	44 85       	ldd	r20, Z+12	; 0x0c
     786:	55 85       	ldd	r21, Z+13	; 0x0d
     788:	66 85       	ldd	r22, Z+14	; 0x0e
     78a:	77 85       	ldd	r23, Z+15	; 0x0f
     78c:	4f 5f       	subi	r20, 0xFF	; 255
     78e:	5f 4f       	sbci	r21, 0xFF	; 255
     790:	6f 4f       	sbci	r22, 0xFF	; 255
     792:	7f 4f       	sbci	r23, 0xFF	; 255
     794:	4c 0d       	add	r20, r12
     796:	5d 1d       	adc	r21, r13
     798:	6e 1d       	adc	r22, r14
     79a:	7f 1d       	adc	r23, r15
     79c:	ce 01       	movw	r24, r28
     79e:	02 96       	adiw	r24, 0x02	; 2
     7a0:	20 e0       	ldi	r18, 0x00	; 0
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <disk_readp>
     7a8:	89 2b       	or	r24, r25
     7aa:	09 f0       	breq	.+2      	; 0x7ae <get_fat+0xd8>
     7ac:	5b c0       	rjmp	.+182    	; 0x864 <get_fat+0x18e>
		}
		wc = LD_WORD(buf);
     7ae:	69 81       	ldd	r22, Y+1	; 0x01
     7b0:	7a 81       	ldd	r23, Y+2	; 0x02
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
     7b2:	c4 01       	movw	r24, r8
     7b4:	81 70       	andi	r24, 0x01	; 1
     7b6:	90 70       	andi	r25, 0x00	; 0
     7b8:	89 2b       	or	r24, r25
     7ba:	39 f0       	breq	.+14     	; 0x7ca <get_fat+0xf4>
     7bc:	a4 e0       	ldi	r26, 0x04	; 4
     7be:	76 95       	lsr	r23
     7c0:	67 95       	ror	r22
     7c2:	aa 95       	dec	r26
     7c4:	e1 f7       	brne	.-8      	; 0x7be <get_fat+0xe8>
     7c6:	9b 01       	movw	r18, r22
     7c8:	23 c0       	rjmp	.+70     	; 0x810 <get_fat+0x13a>
     7ca:	9b 01       	movw	r18, r22
     7cc:	40 e0       	ldi	r20, 0x00	; 0
     7ce:	50 e0       	ldi	r21, 0x00	; 0
     7d0:	3f 70       	andi	r19, 0x0F	; 15
     7d2:	40 70       	andi	r20, 0x00	; 0
     7d4:	50 70       	andi	r21, 0x00	; 0
     7d6:	4a c0       	rjmp	.+148    	; 0x86c <get_fat+0x196>

	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, (WORD)(((WORD)clst % 256) * 2), 2)) break;
     7d8:	77 27       	eor	r23, r23
     7da:	6b 2d       	mov	r22, r11
     7dc:	5a 2d       	mov	r21, r10
     7de:	49 2d       	mov	r20, r9
     7e0:	f3 01       	movw	r30, r6
     7e2:	84 85       	ldd	r24, Z+12	; 0x0c
     7e4:	95 85       	ldd	r25, Z+13	; 0x0d
     7e6:	a6 85       	ldd	r26, Z+14	; 0x0e
     7e8:	b7 85       	ldd	r27, Z+15	; 0x0f
     7ea:	48 0f       	add	r20, r24
     7ec:	59 1f       	adc	r21, r25
     7ee:	6a 1f       	adc	r22, r26
     7f0:	7b 1f       	adc	r23, r27
     7f2:	94 01       	movw	r18, r8
     7f4:	30 70       	andi	r19, 0x00	; 0
     7f6:	22 0f       	add	r18, r18
     7f8:	33 1f       	adc	r19, r19
     7fa:	ce 01       	movw	r24, r28
     7fc:	01 96       	adiw	r24, 0x01	; 1
     7fe:	02 e0       	ldi	r16, 0x02	; 2
     800:	10 e0       	ldi	r17, 0x00	; 0
     802:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <disk_readp>
     806:	89 2b       	or	r24, r25
     808:	69 f5       	brne	.+90     	; 0x864 <get_fat+0x18e>
		return LD_WORD(buf);
     80a:	89 81       	ldd	r24, Y+1	; 0x01
     80c:	9a 81       	ldd	r25, Y+2	; 0x02
     80e:	9c 01       	movw	r18, r24
     810:	40 e0       	ldi	r20, 0x00	; 0
     812:	50 e0       	ldi	r21, 0x00	; 0
     814:	2b c0       	rjmp	.+86     	; 0x86c <get_fat+0x196>
#if _FS_FAT32
	case FS_FAT32 :
		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
     816:	b5 01       	movw	r22, r10
     818:	a4 01       	movw	r20, r8
     81a:	27 e0       	ldi	r18, 0x07	; 7
     81c:	76 95       	lsr	r23
     81e:	67 95       	ror	r22
     820:	57 95       	ror	r21
     822:	47 95       	ror	r20
     824:	2a 95       	dec	r18
     826:	d1 f7       	brne	.-12     	; 0x81c <get_fat+0x146>
     828:	f3 01       	movw	r30, r6
     82a:	84 85       	ldd	r24, Z+12	; 0x0c
     82c:	95 85       	ldd	r25, Z+13	; 0x0d
     82e:	a6 85       	ldd	r26, Z+14	; 0x0e
     830:	b7 85       	ldd	r27, Z+15	; 0x0f
     832:	48 0f       	add	r20, r24
     834:	59 1f       	adc	r21, r25
     836:	6a 1f       	adc	r22, r26
     838:	7b 1f       	adc	r23, r27
     83a:	94 01       	movw	r18, r8
     83c:	2f 77       	andi	r18, 0x7F	; 127
     83e:	30 70       	andi	r19, 0x00	; 0
     840:	22 0f       	add	r18, r18
     842:	33 1f       	adc	r19, r19
     844:	22 0f       	add	r18, r18
     846:	33 1f       	adc	r19, r19
     848:	ce 01       	movw	r24, r28
     84a:	01 96       	adiw	r24, 0x01	; 1
     84c:	04 e0       	ldi	r16, 0x04	; 4
     84e:	10 e0       	ldi	r17, 0x00	; 0
     850:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <disk_readp>
     854:	89 2b       	or	r24, r25
     856:	31 f4       	brne	.+12     	; 0x864 <get_fat+0x18e>
		return LD_DWORD(buf) & 0x0FFFFFFF;
     858:	29 81       	ldd	r18, Y+1	; 0x01
     85a:	3a 81       	ldd	r19, Y+2	; 0x02
     85c:	4b 81       	ldd	r20, Y+3	; 0x03
     85e:	5c 81       	ldd	r21, Y+4	; 0x04
     860:	5f 70       	andi	r21, 0x0F	; 15
     862:	04 c0       	rjmp	.+8      	; 0x86c <get_fat+0x196>
     864:	21 e0       	ldi	r18, 0x01	; 1
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	40 e0       	ldi	r20, 0x00	; 0
     86a:	50 e0       	ldi	r21, 0x00	; 0
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
}
     86c:	b9 01       	movw	r22, r18
     86e:	ca 01       	movw	r24, r20
     870:	24 96       	adiw	r28, 0x04	; 4
     872:	ee e0       	ldi	r30, 0x0E	; 14
     874:	0c 94 ac 0f 	jmp	0x1f58	; 0x1f58 <__epilogue_restores__+0x8>

00000878 <dir_next>:

static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table */
	DIR *dj			/* Pointer to directory object */
)
{
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	e2 e4       	ldi	r30, 0x42	; 66
     87e:	f4 e0       	ldi	r31, 0x04	; 4
     880:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__prologue_saves__+0x10>
     884:	5c 01       	movw	r10, r24
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;
     886:	c0 91 1b 01 	lds	r28, 0x011B
     88a:	d0 91 1c 01 	lds	r29, 0x011C


	i = dj->index + 1;
     88e:	fc 01       	movw	r30, r24
     890:	c0 80       	ld	r12, Z
     892:	d1 80       	ldd	r13, Z+1	; 0x01
     894:	08 94       	sec
     896:	c1 1c       	adc	r12, r1
     898:	d1 1c       	adc	r13, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
     89a:	c1 14       	cp	r12, r1
     89c:	d1 04       	cpc	r13, r1
     89e:	09 f4       	brne	.+2      	; 0x8a2 <dir_next+0x2a>
     8a0:	91 c0       	rjmp	.+290    	; 0x9c4 <__stack+0xc5>
     8a2:	24 85       	ldd	r18, Z+12	; 0x0c
     8a4:	35 85       	ldd	r19, Z+13	; 0x0d
     8a6:	46 85       	ldd	r20, Z+14	; 0x0e
     8a8:	57 85       	ldd	r21, Z+15	; 0x0f
     8aa:	21 15       	cp	r18, r1
     8ac:	31 05       	cpc	r19, r1
     8ae:	41 05       	cpc	r20, r1
     8b0:	51 05       	cpc	r21, r1
     8b2:	09 f4       	brne	.+2      	; 0x8b6 <dir_next+0x3e>
     8b4:	87 c0       	rjmp	.+270    	; 0x9c4 <__stack+0xc5>
		return FR_NO_FILE;

	if (!(i & (16-1))) {	/* Sector changed? */
     8b6:	c6 01       	movw	r24, r12
     8b8:	8f 70       	andi	r24, 0x0F	; 15
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	89 2b       	or	r24, r25
     8be:	09 f0       	breq	.+2      	; 0x8c2 <dir_next+0x4a>
     8c0:	7b c0       	rjmp	.+246    	; 0x9b8 <__stack+0xb9>
		dj->sect++;			/* Next sector */
     8c2:	2f 5f       	subi	r18, 0xFF	; 255
     8c4:	3f 4f       	sbci	r19, 0xFF	; 255
     8c6:	4f 4f       	sbci	r20, 0xFF	; 255
     8c8:	5f 4f       	sbci	r21, 0xFF	; 255
     8ca:	24 87       	std	Z+12, r18	; 0x0c
     8cc:	35 87       	std	Z+13, r19	; 0x0d
     8ce:	46 87       	std	Z+14, r20	; 0x0e
     8d0:	57 87       	std	Z+15, r21	; 0x0f

		if (dj->clust == 0) {	/* Static table */
     8d2:	40 85       	ldd	r20, Z+8	; 0x08
     8d4:	51 85       	ldd	r21, Z+9	; 0x09
     8d6:	62 85       	ldd	r22, Z+10	; 0x0a
     8d8:	73 85       	ldd	r23, Z+11	; 0x0b
     8da:	41 15       	cp	r20, r1
     8dc:	51 05       	cpc	r21, r1
     8de:	61 05       	cpc	r22, r1
     8e0:	71 05       	cpc	r23, r1
     8e2:	39 f4       	brne	.+14     	; 0x8f2 <dir_next+0x7a>
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
     8e4:	8c 81       	ldd	r24, Y+4	; 0x04
     8e6:	9d 81       	ldd	r25, Y+5	; 0x05
     8e8:	c8 16       	cp	r12, r24
     8ea:	d9 06       	cpc	r13, r25
     8ec:	08 f4       	brcc	.+2      	; 0x8f0 <dir_next+0x78>
     8ee:	64 c0       	rjmp	.+200    	; 0x9b8 <__stack+0xb9>
     8f0:	69 c0       	rjmp	.+210    	; 0x9c4 <__stack+0xc5>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
     8f2:	89 81       	ldd	r24, Y+1	; 0x01
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	01 97       	sbiw	r24, 0x01	; 1
     8f8:	96 01       	movw	r18, r12
     8fa:	e4 e0       	ldi	r30, 0x04	; 4
     8fc:	36 95       	lsr	r19
     8fe:	27 95       	ror	r18
     900:	ea 95       	dec	r30
     902:	e1 f7       	brne	.-8      	; 0x8fc <dir_next+0x84>
     904:	82 23       	and	r24, r18
     906:	93 23       	and	r25, r19
     908:	89 2b       	or	r24, r25
     90a:	09 f0       	breq	.+2      	; 0x90e <__stack+0xf>
     90c:	55 c0       	rjmp	.+170    	; 0x9b8 <__stack+0xb9>
				clst = get_fat(dj->clust);		/* Get next cluster */
     90e:	cb 01       	movw	r24, r22
     910:	ba 01       	movw	r22, r20
     912:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <get_fat>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
				if (clst <= 1) return FR_DISK_ERR;
     91a:	62 30       	cpi	r22, 0x02	; 2
     91c:	71 05       	cpc	r23, r1
     91e:	81 05       	cpc	r24, r1
     920:	91 05       	cpc	r25, r1
     922:	18 f4       	brcc	.+6      	; 0x92a <__stack+0x2b>
     924:	21 e0       	ldi	r18, 0x01	; 1
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	4f c0       	rjmp	.+158    	; 0x9c8 <__stack+0xc9>
				if (clst >= fs->max_clust)		/* When it reached end of dynamic table */
     92a:	88 85       	ldd	r24, Y+8	; 0x08
     92c:	99 85       	ldd	r25, Y+9	; 0x09
     92e:	aa 85       	ldd	r26, Y+10	; 0x0a
     930:	bb 85       	ldd	r27, Y+11	; 0x0b
     932:	28 17       	cp	r18, r24
     934:	39 07       	cpc	r19, r25
     936:	4a 07       	cpc	r20, r26
     938:	5b 07       	cpc	r21, r27
     93a:	08 f0       	brcs	.+2      	; 0x93e <__stack+0x3f>
     93c:	43 c0       	rjmp	.+134    	; 0x9c4 <__stack+0xc5>
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
     93e:	f5 01       	movw	r30, r10
     940:	20 87       	std	Z+8, r18	; 0x08
     942:	31 87       	std	Z+9, r19	; 0x09
     944:	42 87       	std	Z+10, r20	; 0x0a
     946:	53 87       	std	Z+11, r21	; 0x0b
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
     948:	c0 91 1b 01 	lds	r28, 0x011B
     94c:	d0 91 1c 01 	lds	r29, 0x011C


	clst -= 2;
     950:	8e ef       	ldi	r24, 0xFE	; 254
     952:	e8 2e       	mov	r14, r24
     954:	8f ef       	ldi	r24, 0xFF	; 255
     956:	f8 2e       	mov	r15, r24
     958:	8f ef       	ldi	r24, 0xFF	; 255
     95a:	08 2f       	mov	r16, r24
     95c:	8f ef       	ldi	r24, 0xFF	; 255
     95e:	18 2f       	mov	r17, r24
     960:	e2 0e       	add	r14, r18
     962:	f3 1e       	adc	r15, r19
     964:	04 1f       	adc	r16, r20
     966:	15 1f       	adc	r17, r21
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     968:	88 85       	ldd	r24, Y+8	; 0x08
     96a:	99 85       	ldd	r25, Y+9	; 0x09
     96c:	aa 85       	ldd	r26, Y+10	; 0x0a
     96e:	bb 85       	ldd	r27, Y+11	; 0x0b
     970:	02 97       	sbiw	r24, 0x02	; 2
     972:	a1 09       	sbc	r26, r1
     974:	b1 09       	sbc	r27, r1
     976:	e8 16       	cp	r14, r24
     978:	f9 06       	cpc	r15, r25
     97a:	0a 07       	cpc	r16, r26
     97c:	1b 07       	cpc	r17, r27
     97e:	28 f0       	brcs	.+10     	; 0x98a <__stack+0x8b>
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	40 e0       	ldi	r20, 0x00	; 0
     986:	50 e0       	ldi	r21, 0x00	; 0
     988:	12 c0       	rjmp	.+36     	; 0x9ae <__stack+0xaf>
	return (DWORD)clst * fs->csize + fs->database;
     98a:	29 81       	ldd	r18, Y+1	; 0x01
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	c8 01       	movw	r24, r16
     994:	b7 01       	movw	r22, r14
     996:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <__mulsi3>
     99a:	9b 01       	movw	r18, r22
     99c:	ac 01       	movw	r20, r24
     99e:	8c 89       	ldd	r24, Y+20	; 0x14
     9a0:	9d 89       	ldd	r25, Y+21	; 0x15
     9a2:	ae 89       	ldd	r26, Y+22	; 0x16
     9a4:	bf 89       	ldd	r27, Y+23	; 0x17
     9a6:	28 0f       	add	r18, r24
     9a8:	39 1f       	adc	r19, r25
     9aa:	4a 1f       	adc	r20, r26
     9ac:	5b 1f       	adc	r21, r27
				clst = get_fat(dj->clust);		/* Get next cluster */
				if (clst <= 1) return FR_DISK_ERR;
				if (clst >= fs->max_clust)		/* When it reached end of dynamic table */
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(clst);
     9ae:	f5 01       	movw	r30, r10
     9b0:	24 87       	std	Z+12, r18	; 0x0c
     9b2:	35 87       	std	Z+13, r19	; 0x0d
     9b4:	46 87       	std	Z+14, r20	; 0x0e
     9b6:	57 87       	std	Z+15, r21	; 0x0f
			}
		}
	}

	dj->index = i;
     9b8:	f5 01       	movw	r30, r10
     9ba:	d1 82       	std	Z+1, r13	; 0x01
     9bc:	c0 82       	st	Z, r12
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <__stack+0xc9>

	return FR_OK;
     9c4:	23 e0       	ldi	r18, 0x03	; 3
     9c6:	30 e0       	ldi	r19, 0x00	; 0
}
     9c8:	c9 01       	movw	r24, r18
     9ca:	cd b7       	in	r28, 0x3d	; 61
     9cc:	de b7       	in	r29, 0x3e	; 62
     9ce:	ea e0       	ldi	r30, 0x0A	; 10
     9d0:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__epilogue_restores__+0x10>

000009d4 <pf_lseek>:
#if _USE_LSEEK

FRESULT pf_lseek (
	DWORD ofs		/* File pointer from top of file */
)
{
     9d4:	a0 e0       	ldi	r26, 0x00	; 0
     9d6:	b0 e0       	ldi	r27, 0x00	; 0
     9d8:	e0 ef       	ldi	r30, 0xF0	; 240
     9da:	f4 e0       	ldi	r31, 0x04	; 4
     9dc:	0c 94 8c 0f 	jmp	0x1f18	; 0x1f18 <__prologue_saves__>
     9e0:	e8 2f       	mov	r30, r24
	CLUST clst;
	DWORD bcs, sect, ifptr;
	FATFS *fs = FatFs;
     9e2:	c0 91 1b 01 	lds	r28, 0x011B
     9e6:	d0 91 1c 01 	lds	r29, 0x011C


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
     9ea:	20 97       	sbiw	r28, 0x00	; 0
     9ec:	19 f4       	brne	.+6      	; 0x9f4 <pf_lseek+0x20>
     9ee:	26 e0       	ldi	r18, 0x06	; 6
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	10 c1       	rjmp	.+544    	; 0xc14 <pf_lseek+0x240>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
     9f4:	8a 81       	ldd	r24, Y+2	; 0x02
     9f6:	80 fd       	sbrc	r24, 0
     9f8:	03 c0       	rjmp	.+6      	; 0xa00 <pf_lseek+0x2c>
     9fa:	25 e0       	ldi	r18, 0x05	; 5
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	0a c1       	rjmp	.+532    	; 0xc14 <pf_lseek+0x240>
     a00:	ac 8c       	ldd	r10, Y+28	; 0x1c
     a02:	bd 8c       	ldd	r11, Y+29	; 0x1d
     a04:	ce 8c       	ldd	r12, Y+30	; 0x1e
     a06:	df 8c       	ldd	r13, Y+31	; 0x1f
     a08:	4e 2f       	mov	r20, r30
     a0a:	59 2f       	mov	r21, r25
     a0c:	cb 01       	movw	r24, r22
     a0e:	da 01       	movw	r26, r20
     a10:	3c 01       	movw	r6, r24
     a12:	4d 01       	movw	r8, r26
     a14:	a6 14       	cp	r10, r6
     a16:	b7 04       	cpc	r11, r7
     a18:	c8 04       	cpc	r12, r8
     a1a:	d9 04       	cpc	r13, r9
     a1c:	10 f4       	brcc	.+4      	; 0xa22 <pf_lseek+0x4e>
     a1e:	35 01       	movw	r6, r10
     a20:	46 01       	movw	r8, r12
			return FR_NOT_OPENED;

	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
	ifptr = fs->fptr;
     a22:	28 8d       	ldd	r18, Y+24	; 0x18
     a24:	39 8d       	ldd	r19, Y+25	; 0x19
     a26:	4a 8d       	ldd	r20, Y+26	; 0x1a
     a28:	5b 8d       	ldd	r21, Y+27	; 0x1b
	fs->fptr = 0;
     a2a:	18 8e       	std	Y+24, r1	; 0x18
     a2c:	19 8e       	std	Y+25, r1	; 0x19
     a2e:	1a 8e       	std	Y+26, r1	; 0x1a
     a30:	1b 8e       	std	Y+27, r1	; 0x1b
	if (ofs > 0) {
     a32:	61 14       	cp	r6, r1
     a34:	71 04       	cpc	r7, r1
     a36:	81 04       	cpc	r8, r1
     a38:	91 04       	cpc	r9, r1
     a3a:	09 f4       	brne	.+2      	; 0xa3e <pf_lseek+0x6a>
     a3c:	e9 c0       	rjmp	.+466    	; 0xc10 <pf_lseek+0x23c>
		bcs = (DWORD)fs->csize * 512;	/* Cluster size (byte) */
     a3e:	89 81       	ldd	r24, Y+1	; 0x01
     a40:	a8 2e       	mov	r10, r24
     a42:	bb 24       	eor	r11, r11
     a44:	cc 24       	eor	r12, r12
     a46:	dd 24       	eor	r13, r13
     a48:	99 e0       	ldi	r25, 0x09	; 9
     a4a:	aa 0c       	add	r10, r10
     a4c:	bb 1c       	adc	r11, r11
     a4e:	cc 1c       	adc	r12, r12
     a50:	dd 1c       	adc	r13, r13
     a52:	9a 95       	dec	r25
     a54:	d1 f7       	brne	.-12     	; 0xa4a <pf_lseek+0x76>
		if (ifptr > 0 &&
     a56:	21 15       	cp	r18, r1
     a58:	31 05       	cpc	r19, r1
     a5a:	41 05       	cpc	r20, r1
     a5c:	51 05       	cpc	r21, r1
     a5e:	b1 f1       	breq	.+108    	; 0xacc <pf_lseek+0xf8>
     a60:	19 01       	movw	r2, r18
     a62:	2a 01       	movw	r4, r20
     a64:	08 94       	sec
     a66:	21 08       	sbc	r2, r1
     a68:	31 08       	sbc	r3, r1
     a6a:	41 08       	sbc	r4, r1
     a6c:	51 08       	sbc	r5, r1
     a6e:	c4 01       	movw	r24, r8
     a70:	b3 01       	movw	r22, r6
     a72:	61 50       	subi	r22, 0x01	; 1
     a74:	70 40       	sbci	r23, 0x00	; 0
     a76:	80 40       	sbci	r24, 0x00	; 0
     a78:	90 40       	sbci	r25, 0x00	; 0
     a7a:	a6 01       	movw	r20, r12
     a7c:	95 01       	movw	r18, r10
     a7e:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <__udivmodsi4>
     a82:	79 01       	movw	r14, r18
     a84:	8a 01       	movw	r16, r20
     a86:	c2 01       	movw	r24, r4
     a88:	b1 01       	movw	r22, r2
     a8a:	a6 01       	movw	r20, r12
     a8c:	95 01       	movw	r18, r10
     a8e:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <__udivmodsi4>
     a92:	e2 16       	cp	r14, r18
     a94:	f3 06       	cpc	r15, r19
     a96:	04 07       	cpc	r16, r20
     a98:	15 07       	cpc	r17, r21
     a9a:	c0 f0       	brcs	.+48     	; 0xacc <pf_lseek+0xf8>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fs->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
     a9c:	88 27       	eor	r24, r24
     a9e:	99 27       	eor	r25, r25
     aa0:	dc 01       	movw	r26, r24
     aa2:	8a 19       	sub	r24, r10
     aa4:	9b 09       	sbc	r25, r11
     aa6:	ac 09       	sbc	r26, r12
     aa8:	bd 09       	sbc	r27, r13
     aaa:	82 21       	and	r24, r2
     aac:	93 21       	and	r25, r3
     aae:	a4 21       	and	r26, r4
     ab0:	b5 21       	and	r27, r5
     ab2:	88 8f       	std	Y+24, r24	; 0x18
     ab4:	99 8f       	std	Y+25, r25	; 0x19
     ab6:	aa 8f       	std	Y+26, r26	; 0x1a
     ab8:	bb 8f       	std	Y+27, r27	; 0x1b
			ofs -= fs->fptr;
     aba:	68 1a       	sub	r6, r24
     abc:	79 0a       	sbc	r7, r25
     abe:	8a 0a       	sbc	r8, r26
     ac0:	9b 0a       	sbc	r9, r27
			clst = fs->curr_clust;
     ac2:	2c a1       	ldd	r18, Y+36	; 0x24
     ac4:	3d a1       	ldd	r19, Y+37	; 0x25
     ac6:	4e a1       	ldd	r20, Y+38	; 0x26
     ac8:	5f a1       	ldd	r21, Y+39	; 0x27
     aca:	33 c0       	rjmp	.+102    	; 0xb32 <pf_lseek+0x15e>
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
     acc:	28 a1       	ldd	r18, Y+32	; 0x20
     ace:	39 a1       	ldd	r19, Y+33	; 0x21
     ad0:	4a a1       	ldd	r20, Y+34	; 0x22
     ad2:	5b a1       	ldd	r21, Y+35	; 0x23
			fs->curr_clust = clst;
     ad4:	2c a3       	std	Y+36, r18	; 0x24
     ad6:	3d a3       	std	Y+37, r19	; 0x25
     ad8:	4e a3       	std	Y+38, r20	; 0x26
     ada:	5f a3       	std	Y+39, r21	; 0x27
     adc:	2a c0       	rjmp	.+84     	; 0xb32 <pf_lseek+0x15e>
		}
		while (ofs > bcs) {				/* Cluster following loop */
			clst = get_fat(clst);		/* Follow cluster chain */
     ade:	ca 01       	movw	r24, r20
     ae0:	b9 01       	movw	r22, r18
     ae2:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <get_fat>
     ae6:	9b 01       	movw	r18, r22
     ae8:	ac 01       	movw	r20, r24
			if (clst <= 1 || clst >= fs->max_clust) goto fe_abort;
     aea:	62 30       	cpi	r22, 0x02	; 2
     aec:	71 05       	cpc	r23, r1
     aee:	81 05       	cpc	r24, r1
     af0:	91 05       	cpc	r25, r1
     af2:	08 f4       	brcc	.+2      	; 0xaf6 <pf_lseek+0x122>
     af4:	89 c0       	rjmp	.+274    	; 0xc08 <pf_lseek+0x234>
     af6:	88 85       	ldd	r24, Y+8	; 0x08
     af8:	99 85       	ldd	r25, Y+9	; 0x09
     afa:	aa 85       	ldd	r26, Y+10	; 0x0a
     afc:	bb 85       	ldd	r27, Y+11	; 0x0b
     afe:	28 17       	cp	r18, r24
     b00:	39 07       	cpc	r19, r25
     b02:	4a 07       	cpc	r20, r26
     b04:	5b 07       	cpc	r21, r27
     b06:	08 f0       	brcs	.+2      	; 0xb0a <pf_lseek+0x136>
     b08:	7f c0       	rjmp	.+254    	; 0xc08 <pf_lseek+0x234>
			fs->curr_clust = clst;
     b0a:	2c a3       	std	Y+36, r18	; 0x24
     b0c:	3d a3       	std	Y+37, r19	; 0x25
     b0e:	4e a3       	std	Y+38, r20	; 0x26
     b10:	5f a3       	std	Y+39, r21	; 0x27
			fs->fptr += bcs;
     b12:	88 8d       	ldd	r24, Y+24	; 0x18
     b14:	99 8d       	ldd	r25, Y+25	; 0x19
     b16:	aa 8d       	ldd	r26, Y+26	; 0x1a
     b18:	bb 8d       	ldd	r27, Y+27	; 0x1b
     b1a:	8a 0d       	add	r24, r10
     b1c:	9b 1d       	adc	r25, r11
     b1e:	ac 1d       	adc	r26, r12
     b20:	bd 1d       	adc	r27, r13
     b22:	88 8f       	std	Y+24, r24	; 0x18
     b24:	99 8f       	std	Y+25, r25	; 0x19
     b26:	aa 8f       	std	Y+26, r26	; 0x1a
     b28:	bb 8f       	std	Y+27, r27	; 0x1b
			ofs -= bcs;
     b2a:	6a 18       	sub	r6, r10
     b2c:	7b 08       	sbc	r7, r11
     b2e:	8c 08       	sbc	r8, r12
     b30:	9d 08       	sbc	r9, r13
			clst = fs->curr_clust;
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
			fs->curr_clust = clst;
		}
		while (ofs > bcs) {				/* Cluster following loop */
     b32:	a6 14       	cp	r10, r6
     b34:	b7 04       	cpc	r11, r7
     b36:	c8 04       	cpc	r12, r8
     b38:	d9 04       	cpc	r13, r9
     b3a:	88 f2       	brcs	.-94     	; 0xade <pf_lseek+0x10a>
			if (clst <= 1 || clst >= fs->max_clust) goto fe_abort;
			fs->curr_clust = clst;
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
     b3c:	88 8d       	ldd	r24, Y+24	; 0x18
     b3e:	99 8d       	ldd	r25, Y+25	; 0x19
     b40:	aa 8d       	ldd	r26, Y+26	; 0x1a
     b42:	bb 8d       	ldd	r27, Y+27	; 0x1b
     b44:	86 0d       	add	r24, r6
     b46:	97 1d       	adc	r25, r7
     b48:	a8 1d       	adc	r26, r8
     b4a:	b9 1d       	adc	r27, r9
     b4c:	88 8f       	std	Y+24, r24	; 0x18
     b4e:	99 8f       	std	Y+25, r25	; 0x19
     b50:	aa 8f       	std	Y+26, r26	; 0x1a
     b52:	bb 8f       	std	Y+27, r27	; 0x1b
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
     b54:	00 91 1b 01 	lds	r16, 0x011B
     b58:	10 91 1c 01 	lds	r17, 0x011C


	clst -= 2;
     b5c:	8e ef       	ldi	r24, 0xFE	; 254
     b5e:	a8 2e       	mov	r10, r24
     b60:	8f ef       	ldi	r24, 0xFF	; 255
     b62:	b8 2e       	mov	r11, r24
     b64:	8f ef       	ldi	r24, 0xFF	; 255
     b66:	c8 2e       	mov	r12, r24
     b68:	8f ef       	ldi	r24, 0xFF	; 255
     b6a:	d8 2e       	mov	r13, r24
     b6c:	a2 0e       	add	r10, r18
     b6e:	b3 1e       	adc	r11, r19
     b70:	c4 1e       	adc	r12, r20
     b72:	d5 1e       	adc	r13, r21
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
     b74:	f8 01       	movw	r30, r16
     b76:	80 85       	ldd	r24, Z+8	; 0x08
     b78:	91 85       	ldd	r25, Z+9	; 0x09
     b7a:	a2 85       	ldd	r26, Z+10	; 0x0a
     b7c:	b3 85       	ldd	r27, Z+11	; 0x0b
     b7e:	02 97       	sbiw	r24, 0x02	; 2
     b80:	a1 09       	sbc	r26, r1
     b82:	b1 09       	sbc	r27, r1
     b84:	a8 16       	cp	r10, r24
     b86:	b9 06       	cpc	r11, r25
     b88:	ca 06       	cpc	r12, r26
     b8a:	db 06       	cpc	r13, r27
     b8c:	e8 f5       	brcc	.+122    	; 0xc08 <pf_lseek+0x234>
	return (DWORD)clst * fs->csize + fs->database;
     b8e:	21 81       	ldd	r18, Z+1	; 0x01
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	40 e0       	ldi	r20, 0x00	; 0
     b94:	50 e0       	ldi	r21, 0x00	; 0
     b96:	c6 01       	movw	r24, r12
     b98:	b5 01       	movw	r22, r10
     b9a:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <__mulsi3>
     b9e:	9b 01       	movw	r18, r22
     ba0:	ac 01       	movw	r20, r24
     ba2:	f8 01       	movw	r30, r16
     ba4:	84 89       	ldd	r24, Z+20	; 0x14
     ba6:	95 89       	ldd	r25, Z+21	; 0x15
     ba8:	a6 89       	ldd	r26, Z+22	; 0x16
     baa:	b7 89       	ldd	r27, Z+23	; 0x17
     bac:	28 0f       	add	r18, r24
     bae:	39 1f       	adc	r19, r25
     bb0:	4a 1f       	adc	r20, r26
     bb2:	5b 1f       	adc	r21, r27
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
		sect = clust2sect(clst);		/* Current sector */
		if (!sect) goto fe_abort;
     bb4:	21 15       	cp	r18, r1
     bb6:	31 05       	cpc	r19, r1
     bb8:	41 05       	cpc	r20, r1
     bba:	51 05       	cpc	r21, r1
     bbc:	29 f1       	breq	.+74     	; 0xc08 <pf_lseek+0x234>
		fs->csect = (BYTE)(ofs / 512);	/* Sector offset in the cluster */
     bbe:	d4 01       	movw	r26, r8
     bc0:	c3 01       	movw	r24, r6
     bc2:	19 e0       	ldi	r17, 0x09	; 9
     bc4:	b6 95       	lsr	r27
     bc6:	a7 95       	ror	r26
     bc8:	97 95       	ror	r25
     bca:	87 95       	ror	r24
     bcc:	1a 95       	dec	r17
     bce:	d1 f7       	brne	.-12     	; 0xbc4 <pf_lseek+0x1f0>
     bd0:	98 2f       	mov	r25, r24
     bd2:	8b 83       	std	Y+3, r24	; 0x03
		if (ofs % 512)
     bd4:	ff ef       	ldi	r31, 0xFF	; 255
     bd6:	ef 2e       	mov	r14, r31
     bd8:	f1 e0       	ldi	r31, 0x01	; 1
     bda:	ff 2e       	mov	r15, r31
     bdc:	01 2d       	mov	r16, r1
     bde:	11 2d       	mov	r17, r1
     be0:	6e 20       	and	r6, r14
     be2:	7f 20       	and	r7, r15
     be4:	80 22       	and	r8, r16
     be6:	91 22       	and	r9, r17
     be8:	61 14       	cp	r6, r1
     bea:	71 04       	cpc	r7, r1
     bec:	81 04       	cpc	r8, r1
     bee:	91 04       	cpc	r9, r1
     bf0:	79 f0       	breq	.+30     	; 0xc10 <pf_lseek+0x23c>
			fs->dsect = sect + fs->csect++;
     bf2:	28 0f       	add	r18, r24
     bf4:	31 1d       	adc	r19, r1
     bf6:	41 1d       	adc	r20, r1
     bf8:	51 1d       	adc	r21, r1
     bfa:	28 a7       	std	Y+40, r18	; 0x28
     bfc:	39 a7       	std	Y+41, r19	; 0x29
     bfe:	4a a7       	std	Y+42, r20	; 0x2a
     c00:	5b a7       	std	Y+43, r21	; 0x2b
     c02:	9f 5f       	subi	r25, 0xFF	; 255
     c04:	9b 83       	std	Y+3, r25	; 0x03
     c06:	04 c0       	rjmp	.+8      	; 0xc10 <pf_lseek+0x23c>
	}

	return FR_OK;

fe_abort:
	fs->flag = 0;
     c08:	1a 82       	std	Y+2, r1	; 0x02
     c0a:	21 e0       	ldi	r18, 0x01	; 1
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <pf_lseek+0x240>
	return FR_DISK_ERR;
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 e0       	ldi	r19, 0x00	; 0
}
     c14:	c9 01       	movw	r24, r18
     c16:	cd b7       	in	r28, 0x3d	; 61
     c18:	de b7       	in	r29, 0x3e	; 62
     c1a:	e2 e1       	ldi	r30, 0x12	; 18
     c1c:	0c 94 a8 0f 	jmp	0x1f50	; 0x1f50 <__epilogue_restores__>

00000c20 <pf_readdir>:

FRESULT pf_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
     c20:	ac e2       	ldi	r26, 0x2C	; 44
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	e6 e1       	ldi	r30, 0x16	; 22
     c26:	f6 e0       	ldi	r31, 0x06	; 6
     c28:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__prologue_saves__+0x10>
     c2c:	7c 01       	movw	r14, r24
     c2e:	5b 01       	movw	r10, r22
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
     c30:	e0 91 1b 01 	lds	r30, 0x011B
     c34:	f0 91 1c 01 	lds	r31, 0x011C


	if (!fs) {				/* Check file system */
     c38:	30 97       	sbiw	r30, 0x00	; 0
     c3a:	19 f4       	brne	.+6      	; 0xc42 <pf_readdir+0x22>
     c3c:	26 e0       	ldi	r18, 0x06	; 6
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	d0 c0       	rjmp	.+416    	; 0xde2 <pf_readdir+0x1c2>
		res = FR_NOT_ENABLED;
	} else {
		fs->buf = dir;
     c42:	ce 01       	movw	r24, r28
     c44:	0d 96       	adiw	r24, 0x0d	; 13
     c46:	97 83       	std	Z+7, r25	; 0x07
     c48:	86 83       	std	Z+6, r24	; 0x06
		dj->fn = sp;
     c4a:	ce 01       	movw	r24, r28
     c4c:	01 96       	adiw	r24, 0x01	; 1
     c4e:	d7 01       	movw	r26, r14
     c50:	13 96       	adiw	r26, 0x03	; 3
     c52:	9c 93       	st	X, r25
     c54:	8e 93       	st	-X, r24
     c56:	12 97       	sbiw	r26, 0x02	; 2
		if (!fno) {
     c58:	61 15       	cp	r22, r1
     c5a:	71 05       	cpc	r23, r1
     c5c:	29 f4       	brne	.+10     	; 0xc68 <pf_readdir+0x48>
			res = dir_rewind(dj);
     c5e:	c7 01       	movw	r24, r14
     c60:	0e 94 ef 02 	call	0x5de	; 0x5de <dir_rewind>
     c64:	9c 01       	movw	r18, r24
     c66:	bd c0       	rjmp	.+378    	; 0xde2 <pf_readdir+0x1c2>
	FRESULT res;
	BYTE a, c, *dir;


	res = FR_NO_FILE;
	dir = FatFs->buf;
     c68:	c6 80       	ldd	r12, Z+6	; 0x06
     c6a:	d7 80       	ldd	r13, Z+7	; 0x07
     c6c:	23 e0       	ldi	r18, 0x03	; 3
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	28 c0       	rjmp	.+80     	; 0xcc2 <pf_readdir+0xa2>
	while (dj->sect) {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
     c72:	f7 01       	movw	r30, r14
     c74:	20 81       	ld	r18, Z
     c76:	31 81       	ldd	r19, Z+1	; 0x01
     c78:	2f 70       	andi	r18, 0x0F	; 15
     c7a:	30 70       	andi	r19, 0x00	; 0
     c7c:	e5 e0       	ldi	r30, 0x05	; 5
     c7e:	22 0f       	add	r18, r18
     c80:	33 1f       	adc	r19, r19
     c82:	ea 95       	dec	r30
     c84:	e1 f7       	brne	.-8      	; 0xc7e <pf_readdir+0x5e>
     c86:	c6 01       	movw	r24, r12
     c88:	00 e2       	ldi	r16, 0x20	; 32
     c8a:	10 e0       	ldi	r17, 0x00	; 0
     c8c:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
     c90:	89 2b       	or	r24, r25
     c92:	19 f0       	breq	.+6      	; 0xc9a <pf_readdir+0x7a>
     c94:	21 e0       	ldi	r18, 0x01	; 1
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	21 c0       	rjmp	.+66     	; 0xcdc <pf_readdir+0xbc>
		c = dir[DIR_Name];
     c9a:	d6 01       	movw	r26, r12
     c9c:	9c 91       	ld	r25, X
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
     c9e:	99 23       	and	r25, r25
     ca0:	09 f4       	brne	.+2      	; 0xca4 <pf_readdir+0x84>
     ca2:	a4 c0       	rjmp	.+328    	; 0xdec <pf_readdir+0x1cc>
		a = dir[DIR_Attr] & AM_MASK;
     ca4:	1b 96       	adiw	r26, 0x0b	; 11
     ca6:	8c 91       	ld	r24, X
		if (c != 0xE5 && c != '.' && !(a & AM_VOL))	/* Is it a valid entry? */
     ca8:	95 3e       	cpi	r25, 0xE5	; 229
     caa:	29 f0       	breq	.+10     	; 0xcb6 <pf_readdir+0x96>
     cac:	9e 32       	cpi	r25, 0x2E	; 46
     cae:	19 f0       	breq	.+6      	; 0xcb6 <pf_readdir+0x96>
     cb0:	8f 73       	andi	r24, 0x3F	; 63
     cb2:	83 ff       	sbrs	r24, 3
     cb4:	21 c0       	rjmp	.+66     	; 0xcf8 <pf_readdir+0xd8>
			break;
		res = dir_next(dj);				/* Next entry */
     cb6:	c7 01       	movw	r24, r14
     cb8:	0e 94 3c 04 	call	0x878	; 0x878 <dir_next>
     cbc:	9c 01       	movw	r18, r24
		if (res != FR_OK) break;
     cbe:	00 97       	sbiw	r24, 0x00	; 0
     cc0:	69 f4       	brne	.+26     	; 0xcdc <pf_readdir+0xbc>
	BYTE a, c, *dir;


	res = FR_NO_FILE;
	dir = FatFs->buf;
	while (dj->sect) {
     cc2:	f7 01       	movw	r30, r14
     cc4:	44 85       	ldd	r20, Z+12	; 0x0c
     cc6:	55 85       	ldd	r21, Z+13	; 0x0d
     cc8:	66 85       	ldd	r22, Z+14	; 0x0e
     cca:	77 85       	ldd	r23, Z+15	; 0x0f
     ccc:	41 15       	cp	r20, r1
     cce:	51 05       	cpc	r21, r1
     cd0:	61 05       	cpc	r22, r1
     cd2:	71 05       	cpc	r23, r1
     cd4:	71 f6       	brne	.-100    	; 0xc72 <pf_readdir+0x52>
			break;
		res = dir_next(dj);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
     cd6:	21 15       	cp	r18, r1
     cd8:	31 05       	cpc	r19, r1
     cda:	71 f0       	breq	.+28     	; 0xcf8 <pf_readdir+0xd8>
     cdc:	d7 01       	movw	r26, r14
     cde:	1c 96       	adiw	r26, 0x0c	; 12
     ce0:	1d 92       	st	X+, r1
     ce2:	1d 92       	st	X+, r1
     ce4:	1d 92       	st	X+, r1
     ce6:	1c 92       	st	X, r1
     ce8:	1f 97       	sbiw	r26, 0x0f	; 15
		dj->fn = sp;
		if (!fno) {
			res = dir_rewind(dj);
		} else {
			res = dir_read(dj);
			if (res == FR_NO_FILE) {
     cea:	23 30       	cpi	r18, 0x03	; 3
     cec:	31 05       	cpc	r19, r1
     cee:	21 f0       	breq	.+8      	; 0xcf8 <pf_readdir+0xd8>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
     cf0:	21 15       	cp	r18, r1
     cf2:	31 05       	cpc	r19, r1
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <pf_readdir+0xd8>
     cf6:	75 c0       	rjmp	.+234    	; 0xde2 <pf_readdir+0x1c2>
{
	BYTE i, c, *dir;
	char *p;


	p = fno->fname;
     cf8:	95 01       	movw	r18, r10
     cfa:	27 5f       	subi	r18, 0xF7	; 247
     cfc:	3f 4f       	sbci	r19, 0xFF	; 255
	if (dj->sect) {
     cfe:	f7 01       	movw	r30, r14
     d00:	84 85       	ldd	r24, Z+12	; 0x0c
     d02:	95 85       	ldd	r25, Z+13	; 0x0d
     d04:	a6 85       	ldd	r26, Z+14	; 0x0e
     d06:	b7 85       	ldd	r27, Z+15	; 0x0f
     d08:	00 97       	sbiw	r24, 0x00	; 0
     d0a:	a1 05       	cpc	r26, r1
     d0c:	b1 05       	cpc	r27, r1
     d0e:	09 f4       	brne	.+2      	; 0xd12 <pf_readdir+0xf2>
     d10:	56 c0       	rjmp	.+172    	; 0xdbe <pf_readdir+0x19e>
		dir = FatFs->buf;
     d12:	e0 91 1b 01 	lds	r30, 0x011B
     d16:	f0 91 1c 01 	lds	r31, 0x011C
     d1a:	46 81       	ldd	r20, Z+6	; 0x06
     d1c:	57 81       	ldd	r21, Z+7	; 0x07
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	90 e0       	ldi	r25, 0x00	; 0
		for (i = 0; i < 8; i++) {	/* Copy file name body */
			c = dir[i];
     d22:	fa 01       	movw	r30, r20
     d24:	e8 0f       	add	r30, r24
     d26:	f9 1f       	adc	r31, r25
     d28:	e0 81       	ld	r30, Z
			if (c == ' ') break;
     d2a:	e0 32       	cpi	r30, 0x20	; 32
     d2c:	51 f0       	breq	.+20     	; 0xd42 <pf_readdir+0x122>
			if (c == 0x05) c = 0xE5;
     d2e:	e5 30       	cpi	r30, 0x05	; 5
     d30:	09 f4       	brne	.+2      	; 0xd34 <pf_readdir+0x114>
     d32:	e5 ee       	ldi	r30, 0xE5	; 229
			*p++ = c;
     d34:	d9 01       	movw	r26, r18
     d36:	ed 93       	st	X+, r30
     d38:	9d 01       	movw	r18, r26
     d3a:	01 96       	adiw	r24, 0x01	; 1


	p = fno->fname;
	if (dj->sect) {
		dir = FatFs->buf;
		for (i = 0; i < 8; i++) {	/* Copy file name body */
     d3c:	88 30       	cpi	r24, 0x08	; 8
     d3e:	91 05       	cpc	r25, r1
     d40:	81 f7       	brne	.-32     	; 0xd22 <pf_readdir+0x102>
			c = dir[i];
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
     d42:	fa 01       	movw	r30, r20
     d44:	80 85       	ldd	r24, Z+8	; 0x08
     d46:	80 32       	cpi	r24, 0x20	; 32
     d48:	11 f4       	brne	.+4      	; 0xd4e <pf_readdir+0x12e>
     d4a:	f9 01       	movw	r30, r18
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <pf_readdir+0x14e>
			*p++ = '.';
     d4e:	f9 01       	movw	r30, r18
     d50:	8e e2       	ldi	r24, 0x2E	; 46
     d52:	81 93       	st	Z+, r24
     d54:	da 01       	movw	r26, r20
			for (i = 8; i < 11; i++) {
     d56:	2c 5f       	subi	r18, 0xFC	; 252
     d58:	3f 4f       	sbci	r19, 0xFF	; 255
				c = dir[i];
     d5a:	18 96       	adiw	r26, 0x08	; 8
     d5c:	8c 91       	ld	r24, X
     d5e:	18 97       	sbiw	r26, 0x08	; 8
				if (c == ' ') break;
     d60:	80 32       	cpi	r24, 0x20	; 32
     d62:	29 f0       	breq	.+10     	; 0xd6e <pf_readdir+0x14e>
				*p++ = c;
     d64:	81 93       	st	Z+, r24
     d66:	11 96       	adiw	r26, 0x01	; 1
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
     d68:	e2 17       	cp	r30, r18
     d6a:	f3 07       	cpc	r31, r19
     d6c:	b1 f7       	brne	.-20     	; 0xd5a <pf_readdir+0x13a>
				c = dir[i];
				if (c == ' ') break;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
     d6e:	da 01       	movw	r26, r20
     d70:	1b 96       	adiw	r26, 0x0b	; 11
     d72:	8c 91       	ld	r24, X
     d74:	d5 01       	movw	r26, r10
     d76:	18 96       	adiw	r26, 0x08	; 8
     d78:	8c 93       	st	X, r24
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
     d7a:	da 01       	movw	r26, r20
     d7c:	5c 96       	adiw	r26, 0x1c	; 28
     d7e:	0d 91       	ld	r16, X+
     d80:	1d 91       	ld	r17, X+
     d82:	2d 91       	ld	r18, X+
     d84:	3c 91       	ld	r19, X
     d86:	5f 97       	sbiw	r26, 0x1f	; 31
     d88:	d5 01       	movw	r26, r10
     d8a:	0d 93       	st	X+, r16
     d8c:	1d 93       	st	X+, r17
     d8e:	2d 93       	st	X+, r18
     d90:	3c 93       	st	X, r19
     d92:	13 97       	sbiw	r26, 0x03	; 3
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
     d94:	da 01       	movw	r26, r20
     d96:	58 96       	adiw	r26, 0x18	; 24
     d98:	8d 91       	ld	r24, X+
     d9a:	9c 91       	ld	r25, X
     d9c:	59 97       	sbiw	r26, 0x19	; 25
     d9e:	d5 01       	movw	r26, r10
     da0:	15 96       	adiw	r26, 0x05	; 5
     da2:	9c 93       	st	X, r25
     da4:	8e 93       	st	-X, r24
     da6:	14 97       	sbiw	r26, 0x04	; 4
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
     da8:	da 01       	movw	r26, r20
     daa:	56 96       	adiw	r26, 0x16	; 22
     dac:	8d 91       	ld	r24, X+
     dae:	9c 91       	ld	r25, X
     db0:	57 97       	sbiw	r26, 0x17	; 23
     db2:	d5 01       	movw	r26, r10
     db4:	17 96       	adiw	r26, 0x07	; 7
     db6:	9c 93       	st	X, r25
     db8:	8e 93       	st	-X, r24
     dba:	16 97       	sbiw	r26, 0x06	; 6
     dbc:	9f 01       	movw	r18, r30
	}
	*p = 0;
     dbe:	f9 01       	movw	r30, r18
     dc0:	10 82       	st	Z, r1
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj);			/* Increment index for next */
     dc2:	c7 01       	movw	r24, r14
     dc4:	0e 94 3c 04 	call	0x878	; 0x878 <dir_next>
     dc8:	9c 01       	movw	r18, r24
				if (res == FR_NO_FILE) {
     dca:	83 30       	cpi	r24, 0x03	; 3
     dcc:	91 05       	cpc	r25, r1
     dce:	49 f4       	brne	.+18     	; 0xde2 <pf_readdir+0x1c2>
					dj->sect = 0;
     dd0:	d7 01       	movw	r26, r14
     dd2:	1c 96       	adiw	r26, 0x0c	; 12
     dd4:	1d 92       	st	X+, r1
     dd6:	1d 92       	st	X+, r1
     dd8:	1d 92       	st	X+, r1
     dda:	1c 92       	st	X, r1
     ddc:	1f 97       	sbiw	r26, 0x0f	; 15
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	return res;
}
     de2:	c9 01       	movw	r24, r18
     de4:	ac 96       	adiw	r28, 0x2c	; 44
     de6:	ea e0       	ldi	r30, 0x0A	; 10
     de8:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__epilogue_restores__+0x10>
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj);			/* Increment index for next */
				if (res == FR_NO_FILE) {
					dj->sect = 0;
     dec:	23 e0       	ldi	r18, 0x03	; 3
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	75 cf       	rjmp	.-278    	; 0xcdc <pf_readdir+0xbc>

00000df2 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const char *path	/* Full-path string to find a file or directory */
)
{
     df2:	a0 e0       	ldi	r26, 0x00	; 0
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	ef ef       	ldi	r30, 0xFF	; 255
     df8:	f6 e0       	ldi	r31, 0x06	; 6
     dfa:	0c 94 8f 0f 	jmp	0x1f1e	; 0x1f1e <__prologue_saves__+0x6>
     dfe:	6c 01       	movw	r12, r24
     e00:	5b 01       	movw	r10, r22
     e02:	03 c0       	rjmp	.+6      	; 0xe0a <follow_path+0x18>
	FRESULT res;
	BYTE *dir;


	while (*path == ' ') path++;		/* Skip leading spaces */
     e04:	08 94       	sec
     e06:	a1 1c       	adc	r10, r1
     e08:	b1 1c       	adc	r11, r1
     e0a:	d5 01       	movw	r26, r10
     e0c:	8c 91       	ld	r24, X
     e0e:	80 32       	cpi	r24, 0x20	; 32
     e10:	c9 f3       	breq	.-14     	; 0xe04 <follow_path+0x12>
	if (*path == '/') path++;			/* Strip heading separator */
     e12:	8f 32       	cpi	r24, 0x2F	; 47
     e14:	19 f4       	brne	.+6      	; 0xe1c <follow_path+0x2a>
     e16:	08 94       	sec
     e18:	a1 1c       	adc	r10, r1
     e1a:	b1 1c       	adc	r11, r1
	dj->sclust = 0;						/* Set start directory (always root dir) */
     e1c:	f6 01       	movw	r30, r12
     e1e:	14 82       	std	Z+4, r1	; 0x04
     e20:	15 82       	std	Z+5, r1	; 0x05
     e22:	16 82       	std	Z+6, r1	; 0x06
     e24:	17 82       	std	Z+7, r1	; 0x07

	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
     e26:	d5 01       	movw	r26, r10
     e28:	8c 91       	ld	r24, X
     e2a:	81 32       	cpi	r24, 0x21	; 33
     e2c:	68 f4       	brcc	.+26     	; 0xe48 <follow_path+0x56>
		res = dir_rewind(dj);
     e2e:	c6 01       	movw	r24, r12
     e30:	0e 94 ef 02 	call	0x5de	; 0x5de <dir_rewind>
     e34:	ec 01       	movw	r28, r24
		FatFs->buf[0] = 0;
     e36:	e0 91 1b 01 	lds	r30, 0x011B
     e3a:	f0 91 1c 01 	lds	r31, 0x011C
     e3e:	06 80       	ldd	r0, Z+6	; 0x06
     e40:	f7 81       	ldd	r31, Z+7	; 0x07
     e42:	e0 2d       	mov	r30, r0
     e44:	10 82       	st	Z, r1
     e46:	b1 c0       	rjmp	.+354    	; 0xfaa <follow_path+0x1b8>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
     e48:	a0 e2       	ldi	r26, 0x20	; 32
     e4a:	5a 2e       	mov	r5, r26
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
     e4c:	66 24       	eor	r6, r6
     e4e:	63 94       	inc	r6
{
	BYTE c, d, ni, si, i, *sfn;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
     e50:	f6 01       	movw	r30, r12
     e52:	a2 81       	ldd	r26, Z+2	; 0x02
     e54:	b3 81       	ldd	r27, Z+3	; 0x03
/*-----------------------------------------------------------------------*/

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
     e56:	fd 01       	movw	r30, r26
	while (cnt--) *d++ = (char)val;
     e58:	cd 01       	movw	r24, r26
     e5a:	0b 96       	adiw	r24, 0x0b	; 11
     e5c:	01 c0       	rjmp	.+2      	; 0xe60 <follow_path+0x6e>
     e5e:	51 92       	st	Z+, r5
     e60:	e8 17       	cp	r30, r24
     e62:	f9 07       	cpc	r31, r25
     e64:	e1 f7       	brne	.-8      	; 0xe5e <follow_path+0x6c>
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	77 24       	eor	r7, r7
     e6a:	38 e0       	ldi	r19, 0x08	; 8
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <follow_path+0x80>
     e6e:	28 e0       	ldi	r18, 0x08	; 8
     e70:	3b e0       	ldi	r19, 0x0B	; 11
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
     e72:	f5 01       	movw	r30, r10
     e74:	e7 0d       	add	r30, r7
     e76:	f1 1d       	adc	r31, r1
     e78:	90 81       	ld	r25, Z
     e7a:	73 94       	inc	r7
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
     e7c:	91 32       	cpi	r25, 0x21	; 33
     e7e:	b0 f0       	brcs	.+44     	; 0xeac <follow_path+0xba>
     e80:	9f 32       	cpi	r25, 0x2F	; 47
     e82:	a1 f0       	breq	.+40     	; 0xeac <follow_path+0xba>
		if (c == '.' || i >= ni) {
     e84:	9e 32       	cpi	r25, 0x2E	; 46
     e86:	11 f0       	breq	.+4      	; 0xe8c <follow_path+0x9a>
     e88:	23 17       	cp	r18, r19
     e8a:	28 f0       	brcs	.+10     	; 0xe96 <follow_path+0xa4>
			if (ni != 8 || c != '.') break;
     e8c:	38 30       	cpi	r19, 0x08	; 8
     e8e:	71 f4       	brne	.+28     	; 0xeac <follow_path+0xba>
     e90:	9e 32       	cpi	r25, 0x2E	; 46
     e92:	69 f3       	breq	.-38     	; 0xe6e <follow_path+0x7c>
     e94:	0b c0       	rjmp	.+22     	; 0xeac <follow_path+0xba>
		if (IsDBCS1(c) && i >= ni - 1) {	/* DBC 1st byte? */
			d = p[si++];					/* Get 2nd byte */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
     e96:	89 2f       	mov	r24, r25
     e98:	81 56       	subi	r24, 0x61	; 97
     e9a:	8a 31       	cpi	r24, 0x1A	; 26
     e9c:	08 f4       	brcc	.+2      	; 0xea0 <follow_path+0xae>
     e9e:	90 52       	subi	r25, 0x20	; 32
			sfn[i++] = c;
     ea0:	fd 01       	movw	r30, r26
     ea2:	e2 0f       	add	r30, r18
     ea4:	f1 1d       	adc	r31, r1
     ea6:	90 83       	st	Z, r25
     ea8:	2f 5f       	subi	r18, 0xFF	; 255
     eaa:	e3 cf       	rjmp	.-58     	; 0xe72 <follow_path+0x80>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
     eac:	1b 96       	adiw	r26, 0x0b	; 11
     eae:	1c 92       	st	X, r1
     eb0:	1b 97       	sbiw	r26, 0x0b	; 11
     eb2:	91 32       	cpi	r25, 0x21	; 33
     eb4:	10 f4       	brcc	.+4      	; 0xeba <follow_path+0xc8>
     eb6:	1b 96       	adiw	r26, 0x0b	; 11
     eb8:	6c 92       	st	X, r6
{
	FRESULT res;
	BYTE c, *dir;


	res = dir_rewind(dj);			/* Rewind directory object */
     eba:	c6 01       	movw	r24, r12
     ebc:	0e 94 ef 02 	call	0x5de	; 0x5de <dir_rewind>
     ec0:	ec 01       	movw	r28, r24
	if (res != FR_OK) return res;
     ec2:	00 97       	sbiw	r24, 0x00	; 0
     ec4:	09 f0       	breq	.+2      	; 0xec8 <follow_path+0xd6>
     ec6:	42 c0       	rjmp	.+132    	; 0xf4c <follow_path+0x15a>

	dir = FatFs->buf;
     ec8:	e0 91 1b 01 	lds	r30, 0x011B
     ecc:	f0 91 1c 01 	lds	r31, 0x011C
     ed0:	e6 80       	ldd	r14, Z+6	; 0x06
     ed2:	f7 80       	ldd	r15, Z+7	; 0x07
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
     ed4:	fb e0       	ldi	r31, 0x0B	; 11
     ed6:	8f 2e       	mov	r8, r31
     ed8:	91 2c       	mov	r9, r1
     eda:	8e 0c       	add	r8, r14
     edc:	9f 1c       	adc	r9, r15
	res = dir_rewind(dj);			/* Rewind directory object */
	if (res != FR_OK) return res;

	dir = FatFs->buf;
	do {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
     ede:	d6 01       	movw	r26, r12
     ee0:	1c 96       	adiw	r26, 0x0c	; 12
     ee2:	4d 91       	ld	r20, X+
     ee4:	5d 91       	ld	r21, X+
     ee6:	6d 91       	ld	r22, X+
     ee8:	7c 91       	ld	r23, X
     eea:	1f 97       	sbiw	r26, 0x0f	; 15
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	2f 70       	andi	r18, 0x0F	; 15
     ef2:	30 70       	andi	r19, 0x00	; 0
     ef4:	e5 e0       	ldi	r30, 0x05	; 5
     ef6:	22 0f       	add	r18, r18
     ef8:	33 1f       	adc	r19, r19
     efa:	ea 95       	dec	r30
     efc:	e1 f7       	brne	.-8      	; 0xef6 <follow_path+0x104>
     efe:	c7 01       	movw	r24, r14
     f00:	00 e2       	ldi	r16, 0x20	; 32
     f02:	10 e0       	ldi	r17, 0x00	; 0
     f04:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
     f08:	89 2b       	or	r24, r25
     f0a:	19 f0       	breq	.+6      	; 0xf12 <follow_path+0x120>
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	1c c0       	rjmp	.+56     	; 0xf4a <follow_path+0x158>
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
     f12:	f7 01       	movw	r30, r14
     f14:	80 81       	ld	r24, Z
     f16:	88 23       	and	r24, r24
     f18:	09 f4       	brne	.+2      	; 0xf1c <follow_path+0x12a>
     f1a:	4d c0       	rjmp	.+154    	; 0xfb6 <follow_path+0x1c4>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
     f1c:	83 85       	ldd	r24, Z+11	; 0x0b
     f1e:	83 fd       	sbrc	r24, 3
     f20:	0f c0       	rjmp	.+30     	; 0xf40 <follow_path+0x14e>
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
     f22:	f6 01       	movw	r30, r12
     f24:	a2 81       	ldd	r26, Z+2	; 0x02
     f26:	b3 81       	ldd	r27, Z+3	; 0x03
     f28:	f7 01       	movw	r30, r14
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
     f2a:	e8 15       	cp	r30, r8
     f2c:	f9 05       	cpc	r31, r9
     f2e:	09 f4       	brne	.+2      	; 0xf32 <follow_path+0x140>
     f30:	45 c0       	rjmp	.+138    	; 0xfbc <follow_path+0x1ca>
     f32:	90 81       	ld	r25, Z
     f34:	8c 91       	ld	r24, X
     f36:	98 17       	cp	r25, r24
     f38:	19 f4       	brne	.+6      	; 0xf40 <follow_path+0x14e>
     f3a:	31 96       	adiw	r30, 0x01	; 1
     f3c:	11 96       	adiw	r26, 0x01	; 1
     f3e:	f5 cf       	rjmp	.-22     	; 0xf2a <follow_path+0x138>
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
		res = dir_next(dj);							/* Next entry */
     f40:	c6 01       	movw	r24, r12
     f42:	0e 94 3c 04 	call	0x878	; 0x878 <dir_next>
	} while (res == FR_OK);
     f46:	00 97       	sbiw	r24, 0x00	; 0
     f48:	51 f2       	breq	.-108    	; 0xede <follow_path+0xec>
     f4a:	ec 01       	movw	r28, r24
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
     f4c:	c3 30       	cpi	r28, 0x03	; 3
     f4e:	d1 05       	cpc	r29, r1
     f50:	61 f5       	brne	.+88     	; 0xfaa <follow_path+0x1b8>
     f52:	d6 01       	movw	r26, r12
     f54:	12 96       	adiw	r26, 0x02	; 2
     f56:	ed 91       	ld	r30, X+
     f58:	fc 91       	ld	r31, X
     f5a:	13 97       	sbiw	r26, 0x03	; 3
     f5c:	83 85       	ldd	r24, Z+11	; 0x0b
     f5e:	88 23       	and	r24, r24
     f60:	11 f1       	breq	.+68     	; 0xfa6 <follow_path+0x1b4>
     f62:	23 c0       	rjmp	.+70     	; 0xfaa <follow_path+0x1b8>
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			dir = FatFs->buf;				/* There is next segment. Follow the sub directory */
     f64:	e0 91 1b 01 	lds	r30, 0x011B
     f68:	f0 91 1c 01 	lds	r31, 0x011C
     f6c:	06 80       	ldd	r0, Z+6	; 0x06
     f6e:	f7 81       	ldd	r31, Z+7	; 0x07
     f70:	e0 2d       	mov	r30, r0
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
     f72:	83 85       	ldd	r24, Z+11	; 0x0b
     f74:	84 ff       	sbrs	r24, 4
     f76:	17 c0       	rjmp	.+46     	; 0xfa6 <follow_path+0x1b4>
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
     f78:	a7 0c       	add	r10, r7
     f7a:	b1 1c       	adc	r11, r1
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			dir = FatFs->buf;				/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust =
     f7c:	84 89       	ldd	r24, Z+20	; 0x14
     f7e:	95 89       	ldd	r25, Z+21	; 0x15
     f80:	a0 e0       	ldi	r26, 0x00	; 0
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	dc 01       	movw	r26, r24
     f86:	99 27       	eor	r25, r25
     f88:	88 27       	eor	r24, r24
     f8a:	22 8d       	ldd	r18, Z+26	; 0x1a
     f8c:	33 8d       	ldd	r19, Z+27	; 0x1b
     f8e:	40 e0       	ldi	r20, 0x00	; 0
     f90:	50 e0       	ldi	r21, 0x00	; 0
     f92:	82 2b       	or	r24, r18
     f94:	93 2b       	or	r25, r19
     f96:	a4 2b       	or	r26, r20
     f98:	b5 2b       	or	r27, r21
     f9a:	f6 01       	movw	r30, r12
     f9c:	84 83       	std	Z+4, r24	; 0x04
     f9e:	95 83       	std	Z+5, r25	; 0x05
     fa0:	a6 83       	std	Z+6, r26	; 0x06
     fa2:	b7 83       	std	Z+7, r27	; 0x07
     fa4:	55 cf       	rjmp	.-342    	; 0xe50 <follow_path+0x5e>
#if _FS_FAT32
				((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | 
#endif
				LD_WORD(dir+DIR_FstClusLO);
		}
     fa6:	c4 e0       	ldi	r28, 0x04	; 4
     fa8:	d0 e0       	ldi	r29, 0x00	; 0
	}

	return res;
}
     faa:	ce 01       	movw	r24, r28
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
     fb0:	ef e0       	ldi	r30, 0x0F	; 15
     fb2:	0c 94 ab 0f 	jmp	0x1f56	; 0x1f56 <__epilogue_restores__+0x6>
			dj->sclust =
#if _FS_FAT32
				((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | 
#endif
				LD_WORD(dir+DIR_FstClusLO);
		}
     fb6:	c3 e0       	ldi	r28, 0x03	; 3
     fb8:	d0 e0       	ldi	r29, 0x00	; 0
     fba:	c8 cf       	rjmp	.-112    	; 0xf4c <follow_path+0x15a>
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
     fbc:	d6 01       	movw	r26, r12
     fbe:	12 96       	adiw	r26, 0x02	; 2
     fc0:	ed 91       	ld	r30, X+
     fc2:	fc 91       	ld	r31, X
     fc4:	13 97       	sbiw	r26, 0x03	; 3
     fc6:	83 85       	ldd	r24, Z+11	; 0x0b
     fc8:	88 23       	and	r24, r24
     fca:	61 f2       	breq	.-104    	; 0xf64 <follow_path+0x172>
     fcc:	ee cf       	rjmp	.-36     	; 0xfaa <follow_path+0x1b8>

00000fce <pf_opendir>:

FRESULT pf_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const char *path	/* Pointer to the directory path */
)
{
     fce:	ac e2       	ldi	r26, 0x2C	; 44
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	ed ee       	ldi	r30, 0xED	; 237
     fd4:	f7 e0       	ldi	r31, 0x07	; 7
     fd6:	0c 94 98 0f 	jmp	0x1f30	; 0x1f30 <__prologue_saves__+0x18>
     fda:	8c 01       	movw	r16, r24
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
     fdc:	e0 91 1b 01 	lds	r30, 0x011B
     fe0:	f0 91 1c 01 	lds	r31, 0x011C


	if (!fs) {				/* Check file system */
     fe4:	30 97       	sbiw	r30, 0x00	; 0
     fe6:	19 f4       	brne	.+6      	; 0xfee <pf_opendir+0x20>
     fe8:	26 e0       	ldi	r18, 0x06	; 6
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	36 c0       	rjmp	.+108    	; 0x105a <pf_opendir+0x8c>
		res = FR_NOT_ENABLED;
	} else {
		fs->buf = dir;
     fee:	3d e0       	ldi	r19, 0x0D	; 13
     ff0:	e3 2e       	mov	r14, r19
     ff2:	f1 2c       	mov	r15, r1
     ff4:	ec 0e       	add	r14, r28
     ff6:	fd 1e       	adc	r15, r29
     ff8:	f7 82       	std	Z+7, r15	; 0x07
     ffa:	e6 82       	std	Z+6, r14	; 0x06
		dj->fn = sp;
     ffc:	ce 01       	movw	r24, r28
     ffe:	01 96       	adiw	r24, 0x01	; 1
    1000:	f8 01       	movw	r30, r16
    1002:	93 83       	std	Z+3, r25	; 0x03
    1004:	82 83       	std	Z+2, r24	; 0x02
		res = follow_path(dj, path);			/* Follow the path to the directory */
    1006:	c8 01       	movw	r24, r16
    1008:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <follow_path>
    100c:	9c 01       	movw	r18, r24
		if (res == FR_OK) {						/* Follow completed */
    100e:	00 97       	sbiw	r24, 0x00	; 0
    1010:	f9 f4       	brne	.+62     	; 0x1050 <pf_opendir+0x82>
			if (dir[0]) {						/* It is not the root dir */
    1012:	8d 85       	ldd	r24, Y+13	; 0x0d
    1014:	88 23       	and	r24, r24
    1016:	c1 f0       	breq	.+48     	; 0x1048 <pf_opendir+0x7a>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
    1018:	88 8d       	ldd	r24, Y+24	; 0x18
    101a:	84 ff       	sbrs	r24, 4
    101c:	1c c0       	rjmp	.+56     	; 0x1056 <pf_opendir+0x88>
					dj->sclust =
    101e:	f7 01       	movw	r30, r14
    1020:	84 89       	ldd	r24, Z+20	; 0x14
    1022:	95 89       	ldd	r25, Z+21	; 0x15
    1024:	a0 e0       	ldi	r26, 0x00	; 0
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	dc 01       	movw	r26, r24
    102a:	99 27       	eor	r25, r25
    102c:	88 27       	eor	r24, r24
    102e:	22 8d       	ldd	r18, Z+26	; 0x1a
    1030:	33 8d       	ldd	r19, Z+27	; 0x1b
    1032:	40 e0       	ldi	r20, 0x00	; 0
    1034:	50 e0       	ldi	r21, 0x00	; 0
    1036:	82 2b       	or	r24, r18
    1038:	93 2b       	or	r25, r19
    103a:	a4 2b       	or	r26, r20
    103c:	b5 2b       	or	r27, r21
    103e:	f8 01       	movw	r30, r16
    1040:	84 83       	std	Z+4, r24	; 0x04
    1042:	95 83       	std	Z+5, r25	; 0x05
    1044:	a6 83       	std	Z+6, r26	; 0x06
    1046:	b7 83       	std	Z+7, r27	; 0x07
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK)
				res = dir_rewind(dj);			/* Rewind dir */
    1048:	c8 01       	movw	r24, r16
    104a:	0e 94 ef 02 	call	0x5de	; 0x5de <dir_rewind>
    104e:	9c 01       	movw	r18, r24
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    1050:	23 30       	cpi	r18, 0x03	; 3
    1052:	31 05       	cpc	r19, r1
    1054:	11 f4       	brne	.+4      	; 0x105a <pf_opendir+0x8c>
    1056:	24 e0       	ldi	r18, 0x04	; 4
    1058:	30 e0       	ldi	r19, 0x00	; 0
	}

	return res;
}
    105a:	c9 01       	movw	r24, r18
    105c:	ac 96       	adiw	r28, 0x2c	; 44
    105e:	e6 e0       	ldi	r30, 0x06	; 6
    1060:	0c 94 b4 0f 	jmp	0x1f68	; 0x1f68 <__epilogue_restores__+0x18>

00001064 <pf_open>:
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
    1064:	ac e3       	ldi	r26, 0x3C	; 60
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e8 e3       	ldi	r30, 0x38	; 56
    106a:	f8 e0       	ldi	r31, 0x08	; 8
    106c:	0c 94 98 0f 	jmp	0x1f30	; 0x1f30 <__prologue_saves__+0x18>
    1070:	bc 01       	movw	r22, r24
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
    1072:	00 91 1b 01 	lds	r16, 0x011B
    1076:	10 91 1c 01 	lds	r17, 0x011C


	if (!fs)						/* Check file system */
    107a:	01 15       	cp	r16, r1
    107c:	11 05       	cpc	r17, r1
    107e:	19 f4       	brne	.+6      	; 0x1086 <pf_open+0x22>
    1080:	66 e0       	ldi	r22, 0x06	; 6
    1082:	70 e0       	ldi	r23, 0x00	; 0
    1084:	42 c0       	rjmp	.+132    	; 0x110a <pf_open+0xa6>
		return FR_NOT_ENABLED;

	fs->flag = 0;
    1086:	f8 01       	movw	r30, r16
    1088:	12 82       	std	Z+2, r1	; 0x02
	fs->buf = dir;
    108a:	5d e1       	ldi	r21, 0x1D	; 29
    108c:	e5 2e       	mov	r14, r21
    108e:	f1 2c       	mov	r15, r1
    1090:	ec 0e       	add	r14, r28
    1092:	fd 1e       	adc	r15, r29
    1094:	f7 82       	std	Z+7, r15	; 0x07
    1096:	e6 82       	std	Z+6, r14	; 0x06
	dj.fn = sp;
    1098:	ce 01       	movw	r24, r28
    109a:	01 96       	adiw	r24, 0x01	; 1
    109c:	98 8b       	std	Y+16, r25	; 0x10
    109e:	8f 87       	std	Y+15, r24	; 0x0f
	res = follow_path(&dj, path);	/* Follow the file path */
    10a0:	ce 01       	movw	r24, r28
    10a2:	0d 96       	adiw	r24, 0x0d	; 13
    10a4:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <follow_path>
    10a8:	bc 01       	movw	r22, r24
	if (res != FR_OK) return res;	/* Follow failed */
    10aa:	00 97       	sbiw	r24, 0x00	; 0
    10ac:	71 f5       	brne	.+92     	; 0x110a <pf_open+0xa6>
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    10ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10b0:	88 23       	and	r24, r24
    10b2:	49 f1       	breq	.+82     	; 0x1106 <pf_open+0xa2>
    10b4:	88 a5       	ldd	r24, Y+40	; 0x28
    10b6:	84 fd       	sbrc	r24, 4
    10b8:	26 c0       	rjmp	.+76     	; 0x1106 <pf_open+0xa2>
		return FR_NO_FILE;

	fs->org_clust =						/* File start cluster */
    10ba:	f7 01       	movw	r30, r14
    10bc:	84 89       	ldd	r24, Z+20	; 0x14
    10be:	95 89       	ldd	r25, Z+21	; 0x15
    10c0:	a0 e0       	ldi	r26, 0x00	; 0
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	dc 01       	movw	r26, r24
    10c6:	99 27       	eor	r25, r25
    10c8:	88 27       	eor	r24, r24
    10ca:	22 8d       	ldd	r18, Z+26	; 0x1a
    10cc:	33 8d       	ldd	r19, Z+27	; 0x1b
    10ce:	40 e0       	ldi	r20, 0x00	; 0
    10d0:	50 e0       	ldi	r21, 0x00	; 0
    10d2:	82 2b       	or	r24, r18
    10d4:	93 2b       	or	r25, r19
    10d6:	a4 2b       	or	r26, r20
    10d8:	b5 2b       	or	r27, r21
    10da:	f8 01       	movw	r30, r16
    10dc:	80 a3       	std	Z+32, r24	; 0x20
    10de:	91 a3       	std	Z+33, r25	; 0x21
    10e0:	a2 a3       	std	Z+34, r26	; 0x22
    10e2:	b3 a3       	std	Z+35, r27	; 0x23
#if _FS_FAT32
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) |
#endif
		LD_WORD(dir+DIR_FstClusLO);
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    10e4:	f7 01       	movw	r30, r14
    10e6:	84 8d       	ldd	r24, Z+28	; 0x1c
    10e8:	95 8d       	ldd	r25, Z+29	; 0x1d
    10ea:	a6 8d       	ldd	r26, Z+30	; 0x1e
    10ec:	b7 8d       	ldd	r27, Z+31	; 0x1f
    10ee:	f8 01       	movw	r30, r16
    10f0:	84 8f       	std	Z+28, r24	; 0x1c
    10f2:	95 8f       	std	Z+29, r25	; 0x1d
    10f4:	a6 8f       	std	Z+30, r26	; 0x1e
    10f6:	b7 8f       	std	Z+31, r27	; 0x1f
	fs->fptr = 0;						/* File pointer */
    10f8:	10 8e       	std	Z+24, r1	; 0x18
    10fa:	11 8e       	std	Z+25, r1	; 0x19
    10fc:	12 8e       	std	Z+26, r1	; 0x1a
    10fe:	13 8e       	std	Z+27, r1	; 0x1b
	fs->flag = FA_OPENED;
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	82 83       	std	Z+2, r24	; 0x02
    1104:	02 c0       	rjmp	.+4      	; 0x110a <pf_open+0xa6>

	return FR_OK;
    1106:	63 e0       	ldi	r22, 0x03	; 3
    1108:	70 e0       	ldi	r23, 0x00	; 0
}
    110a:	cb 01       	movw	r24, r22
    110c:	ec 96       	adiw	r28, 0x3c	; 60
    110e:	e6 e0       	ldi	r30, 0x06	; 6
    1110:	0c 94 b4 0f 	jmp	0x1f68	; 0x1f68 <__epilogue_restores__+0x18>

00001114 <pf_read>:
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	WORD btr,		/* Number of bytes to read */
	WORD* br		/* Pointer to number of bytes read */
)
{
    1114:	a0 e0       	ldi	r26, 0x00	; 0
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e0 e9       	ldi	r30, 0x90	; 144
    111a:	f8 e0       	ldi	r31, 0x08	; 8
    111c:	0c 94 8e 0f 	jmp	0x1f1c	; 0x1f1c <__prologue_saves__+0x4>
    1120:	3c 01       	movw	r6, r24
    1122:	6b 01       	movw	r12, r22
    1124:	4a 01       	movw	r8, r20
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	BYTE *rbuff = buff;
	WORD rcnt;
	FATFS *fs = FatFs;
    1126:	c0 91 1b 01 	lds	r28, 0x011B
    112a:	d0 91 1c 01 	lds	r29, 0x011C


	*br = 0;
    112e:	fa 01       	movw	r30, r20
    1130:	11 82       	std	Z+1, r1	; 0x01
    1132:	10 82       	st	Z, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    1134:	20 97       	sbiw	r28, 0x00	; 0
    1136:	19 f4       	brne	.+6      	; 0x113e <pf_read+0x2a>
    1138:	26 e0       	ldi	r18, 0x06	; 6
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	dd c0       	rjmp	.+442    	; 0x12f8 <pf_read+0x1e4>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	80 fd       	sbrc	r24, 0
    1142:	03 c0       	rjmp	.+6      	; 0x114a <pf_read+0x36>
    1144:	25 e0       	ldi	r18, 0x05	; 5
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	d7 c0       	rjmp	.+430    	; 0x12f8 <pf_read+0x1e4>
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
    114a:	2c 8d       	ldd	r18, Y+28	; 0x1c
    114c:	3d 8d       	ldd	r19, Y+29	; 0x1d
    114e:	4e 8d       	ldd	r20, Y+30	; 0x1e
    1150:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1152:	88 8d       	ldd	r24, Y+24	; 0x18
    1154:	99 8d       	ldd	r25, Y+25	; 0x19
    1156:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1158:	bb 8d       	ldd	r27, Y+27	; 0x1b
    115a:	28 1b       	sub	r18, r24
    115c:	39 0b       	sbc	r19, r25
    115e:	4a 0b       	sbc	r20, r26
    1160:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */
    1162:	cb 01       	movw	r24, r22
    1164:	a0 e0       	ldi	r26, 0x00	; 0
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	28 17       	cp	r18, r24
    116a:	39 07       	cpc	r19, r25
    116c:	4a 07       	cpc	r20, r26
    116e:	5b 07       	cpc	r21, r27
    1170:	08 f4       	brcc	.+2      	; 0x1174 <pf_read+0x60>
    1172:	69 01       	movw	r12, r18
)
{
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	BYTE *rbuff = buff;
    1174:	53 01       	movw	r10, r6
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
			fs->dsect = sect + fs->csect++;
		}
		rcnt = 512 - ((WORD)fs->fptr % 512);		/* Get partial sector data from sector buffer */
    1176:	41 2c       	mov	r4, r1
    1178:	f2 e0       	ldi	r31, 0x02	; 2
    117a:	5f 2e       	mov	r5, r31
    117c:	b3 c0       	rjmp	.+358    	; 0x12e4 <pf_read+0x1d0>

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
    117e:	e8 8c       	ldd	r14, Y+24	; 0x18
    1180:	f9 8c       	ldd	r15, Y+25	; 0x19
    1182:	0a 8d       	ldd	r16, Y+26	; 0x1a
    1184:	1b 8d       	ldd	r17, Y+27	; 0x1b
    1186:	d8 01       	movw	r26, r16
    1188:	c7 01       	movw	r24, r14
    118a:	91 70       	andi	r25, 0x01	; 1
    118c:	a0 70       	andi	r26, 0x00	; 0
    118e:	b0 70       	andi	r27, 0x00	; 0
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	a1 05       	cpc	r26, r1
    1194:	b1 05       	cpc	r27, r1
    1196:	09 f0       	breq	.+2      	; 0x119a <pf_read+0x86>
    1198:	6b c0       	rjmp	.+214    	; 0x1270 <pf_read+0x15c>
			if ((fs->fptr / 512 % fs->csize) == 0) {	/* On the cluster boundary? */
    119a:	c8 01       	movw	r24, r16
    119c:	b7 01       	movw	r22, r14
    119e:	e9 e0       	ldi	r30, 0x09	; 9
    11a0:	96 95       	lsr	r25
    11a2:	87 95       	ror	r24
    11a4:	77 95       	ror	r23
    11a6:	67 95       	ror	r22
    11a8:	ea 95       	dec	r30
    11aa:	d1 f7       	brne	.-12     	; 0x11a0 <pf_read+0x8c>
    11ac:	29 81       	ldd	r18, Y+1	; 0x01
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	40 e0       	ldi	r20, 0x00	; 0
    11b2:	50 e0       	ldi	r21, 0x00	; 0
    11b4:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <__udivmodsi4>
    11b8:	61 15       	cp	r22, r1
    11ba:	71 05       	cpc	r23, r1
    11bc:	81 05       	cpc	r24, r1
    11be:	91 05       	cpc	r25, r1
    11c0:	d9 f4       	brne	.+54     	; 0x11f8 <pf_read+0xe4>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
    11c2:	e1 14       	cp	r14, r1
    11c4:	f1 04       	cpc	r15, r1
    11c6:	01 05       	cpc	r16, r1
    11c8:	11 05       	cpc	r17, r1
    11ca:	29 f4       	brne	.+10     	; 0x11d6 <pf_read+0xc2>
    11cc:	68 a1       	ldd	r22, Y+32	; 0x20
    11ce:	79 a1       	ldd	r23, Y+33	; 0x21
    11d0:	8a a1       	ldd	r24, Y+34	; 0x22
    11d2:	9b a1       	ldd	r25, Y+35	; 0x23
    11d4:	06 c0       	rjmp	.+12     	; 0x11e2 <pf_read+0xce>
    11d6:	6c a1       	ldd	r22, Y+36	; 0x24
    11d8:	7d a1       	ldd	r23, Y+37	; 0x25
    11da:	8e a1       	ldd	r24, Y+38	; 0x26
    11dc:	9f a1       	ldd	r25, Y+39	; 0x27
    11de:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <get_fat>
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fr_abort;
    11e2:	62 30       	cpi	r22, 0x02	; 2
    11e4:	71 05       	cpc	r23, r1
    11e6:	81 05       	cpc	r24, r1
    11e8:	91 05       	cpc	r25, r1
    11ea:	08 f4       	brcc	.+2      	; 0x11ee <pf_read+0xda>
    11ec:	82 c0       	rjmp	.+260    	; 0x12f2 <pf_read+0x1de>
				fs->curr_clust = clst;				/* Update current cluster */
    11ee:	6c a3       	std	Y+36, r22	; 0x24
    11f0:	7d a3       	std	Y+37, r23	; 0x25
    11f2:	8e a3       	std	Y+38, r24	; 0x26
    11f4:	9f a3       	std	Y+39, r25	; 0x27
				fs->csect = 0;						/* Reset sector offset in the cluster */
    11f6:	1b 82       	std	Y+3, r1	; 0x03
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    11f8:	00 91 1b 01 	lds	r16, 0x011B
    11fc:	10 91 1c 01 	lds	r17, 0x011C


	clst -= 2;
    1200:	2c a1       	ldd	r18, Y+36	; 0x24
    1202:	3d a1       	ldd	r19, Y+37	; 0x25
    1204:	4e a1       	ldd	r20, Y+38	; 0x26
    1206:	5f a1       	ldd	r21, Y+39	; 0x27
    1208:	22 50       	subi	r18, 0x02	; 2
    120a:	30 40       	sbci	r19, 0x00	; 0
    120c:	40 40       	sbci	r20, 0x00	; 0
    120e:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    1210:	f8 01       	movw	r30, r16
    1212:	80 85       	ldd	r24, Z+8	; 0x08
    1214:	91 85       	ldd	r25, Z+9	; 0x09
    1216:	a2 85       	ldd	r26, Z+10	; 0x0a
    1218:	b3 85       	ldd	r27, Z+11	; 0x0b
    121a:	02 97       	sbiw	r24, 0x02	; 2
    121c:	a1 09       	sbc	r26, r1
    121e:	b1 09       	sbc	r27, r1
    1220:	28 17       	cp	r18, r24
    1222:	39 07       	cpc	r19, r25
    1224:	4a 07       	cpc	r20, r26
    1226:	5b 07       	cpc	r21, r27
    1228:	08 f0       	brcs	.+2      	; 0x122c <pf_read+0x118>
    122a:	63 c0       	rjmp	.+198    	; 0x12f2 <pf_read+0x1de>
	return (DWORD)clst * fs->csize + fs->database;
    122c:	61 81       	ldd	r22, Z+1	; 0x01
    122e:	70 e0       	ldi	r23, 0x00	; 0
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <__mulsi3>
    1238:	9b 01       	movw	r18, r22
    123a:	ac 01       	movw	r20, r24
    123c:	f8 01       	movw	r30, r16
    123e:	84 89       	ldd	r24, Z+20	; 0x14
    1240:	95 89       	ldd	r25, Z+21	; 0x15
    1242:	a6 89       	ldd	r26, Z+22	; 0x16
    1244:	b7 89       	ldd	r27, Z+23	; 0x17
    1246:	28 0f       	add	r18, r24
    1248:	39 1f       	adc	r19, r25
    124a:	4a 1f       	adc	r20, r26
    124c:	5b 1f       	adc	r21, r27
				if (clst <= 1) goto fr_abort;
				fs->curr_clust = clst;				/* Update current cluster */
				fs->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
    124e:	21 15       	cp	r18, r1
    1250:	31 05       	cpc	r19, r1
    1252:	41 05       	cpc	r20, r1
    1254:	51 05       	cpc	r21, r1
    1256:	09 f4       	brne	.+2      	; 0x125a <pf_read+0x146>
    1258:	4c c0       	rjmp	.+152    	; 0x12f2 <pf_read+0x1de>
			fs->dsect = sect + fs->csect++;
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	28 0f       	add	r18, r24
    125e:	31 1d       	adc	r19, r1
    1260:	41 1d       	adc	r20, r1
    1262:	51 1d       	adc	r21, r1
    1264:	28 a7       	std	Y+40, r18	; 0x28
    1266:	39 a7       	std	Y+41, r19	; 0x29
    1268:	4a a7       	std	Y+42, r20	; 0x2a
    126a:	5b a7       	std	Y+43, r21	; 0x2b
    126c:	8f 5f       	subi	r24, 0xFF	; 255
    126e:	8b 83       	std	Y+3, r24	; 0x03
		}
		rcnt = 512 - ((WORD)fs->fptr % 512);		/* Get partial sector data from sector buffer */
    1270:	08 8d       	ldd	r16, Y+24	; 0x18
    1272:	19 8d       	ldd	r17, Y+25	; 0x19
    1274:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1276:	3b 8d       	ldd	r19, Y+27	; 0x1b
    1278:	c8 01       	movw	r24, r16
    127a:	91 70       	andi	r25, 0x01	; 1
    127c:	a2 01       	movw	r20, r4
    127e:	48 1b       	sub	r20, r24
    1280:	59 0b       	sbc	r21, r25
    1282:	76 01       	movw	r14, r12
    1284:	4c 15       	cp	r20, r12
    1286:	5d 05       	cpc	r21, r13
    1288:	08 f4       	brcc	.+2      	; 0x128c <pf_read+0x178>
    128a:	7a 01       	movw	r14, r20
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
    128c:	61 14       	cp	r6, r1
    128e:	71 04       	cpc	r7, r1
    1290:	19 f4       	brne	.+6      	; 0x1298 <pf_read+0x184>
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	01 c0       	rjmp	.+2      	; 0x129a <pf_read+0x186>
    1298:	c5 01       	movw	r24, r10
    129a:	48 a5       	ldd	r20, Y+40	; 0x28
    129c:	59 a5       	ldd	r21, Y+41	; 0x29
    129e:	6a a5       	ldd	r22, Y+42	; 0x2a
    12a0:	7b a5       	ldd	r23, Y+43	; 0x2b
    12a2:	98 01       	movw	r18, r16
    12a4:	31 70       	andi	r19, 0x01	; 1
    12a6:	87 01       	movw	r16, r14
    12a8:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <disk_readp>
		if (dr) goto fr_abort;
    12ac:	89 2b       	or	r24, r25
    12ae:	09 f5       	brne	.+66     	; 0x12f2 <pf_read+0x1de>
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
    12b0:	c7 01       	movw	r24, r14
    12b2:	a0 e0       	ldi	r26, 0x00	; 0
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	28 8d       	ldd	r18, Y+24	; 0x18
    12b8:	39 8d       	ldd	r19, Y+25	; 0x19
    12ba:	4a 8d       	ldd	r20, Y+26	; 0x1a
    12bc:	5b 8d       	ldd	r21, Y+27	; 0x1b
    12be:	28 0f       	add	r18, r24
    12c0:	39 1f       	adc	r19, r25
    12c2:	4a 1f       	adc	r20, r26
    12c4:	5b 1f       	adc	r21, r27
    12c6:	28 8f       	std	Y+24, r18	; 0x18
    12c8:	39 8f       	std	Y+25, r19	; 0x19
    12ca:	4a 8f       	std	Y+26, r20	; 0x1a
    12cc:	5b 8f       	std	Y+27, r21	; 0x1b
    12ce:	ae 0c       	add	r10, r14
    12d0:	bf 1c       	adc	r11, r15
		btr -= rcnt; *br += rcnt;
    12d2:	ce 18       	sub	r12, r14
    12d4:	df 08       	sbc	r13, r15
    12d6:	f4 01       	movw	r30, r8
    12d8:	80 81       	ld	r24, Z
    12da:	91 81       	ldd	r25, Z+1	; 0x01
    12dc:	8e 0d       	add	r24, r14
    12de:	9f 1d       	adc	r25, r15
    12e0:	91 83       	std	Z+1, r25	; 0x01
    12e2:	80 83       	st	Z, r24
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
    12e4:	c1 14       	cp	r12, r1
    12e6:	d1 04       	cpc	r13, r1
    12e8:	09 f0       	breq	.+2      	; 0x12ec <pf_read+0x1d8>
    12ea:	49 cf       	rjmp	.-366    	; 0x117e <pf_read+0x6a>
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	03 c0       	rjmp	.+6      	; 0x12f8 <pf_read+0x1e4>
	}

	return FR_OK;

fr_abort:
	fs->flag = 0;
    12f2:	1a 82       	std	Y+2, r1	; 0x02
    12f4:	21 e0       	ldi	r18, 0x01	; 1
    12f6:	30 e0       	ldi	r19, 0x00	; 0
	return FR_DISK_ERR;
}
    12f8:	c9 01       	movw	r24, r18
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	e0 e1       	ldi	r30, 0x10	; 16
    1300:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <__epilogue_restores__+0x4>

00001304 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    1304:	a0 e0       	ldi	r26, 0x00	; 0
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e8 e8       	ldi	r30, 0x88	; 136
    130a:	f9 e0       	ldi	r31, 0x09	; 9
    130c:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__prologue_saves__+0x10>
    1310:	b8 2e       	mov	r11, r24
    1312:	a9 2e       	mov	r10, r25
    1314:	6a 01       	movw	r12, r20
    1316:	7b 01       	movw	r14, r22
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
    1318:	2e ef       	ldi	r18, 0xFE	; 254
    131a:	31 e0       	ldi	r19, 0x01	; 1
    131c:	02 e0       	ldi	r16, 0x02	; 2
    131e:	10 e0       	ldi	r17, 0x00	; 0
    1320:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <disk_readp>
    1324:	89 2b       	or	r24, r25
    1326:	11 f0       	breq	.+4      	; 0x132c <check_fs+0x28>
    1328:	23 e0       	ldi	r18, 0x03	; 3
    132a:	33 c0       	rjmp	.+102    	; 0x1392 <check_fs+0x8e>
		return 3;
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
    132c:	cb 2d       	mov	r28, r11
    132e:	da 2d       	mov	r29, r10
    1330:	88 81       	ld	r24, Y
    1332:	99 81       	ldd	r25, Y+1	; 0x01
    1334:	85 55       	subi	r24, 0x55	; 85
    1336:	9a 4a       	sbci	r25, 0xAA	; 170
    1338:	11 f0       	breq	.+4      	; 0x133e <check_fs+0x3a>
    133a:	22 e0       	ldi	r18, 0x02	; 2
    133c:	2a c0       	rjmp	.+84     	; 0x1392 <check_fs+0x8e>
		return 2;

	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
    133e:	8b 2d       	mov	r24, r11
    1340:	9a 2d       	mov	r25, r10
    1342:	b7 01       	movw	r22, r14
    1344:	a6 01       	movw	r20, r12
    1346:	26 e3       	ldi	r18, 0x36	; 54
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	02 e0       	ldi	r16, 0x02	; 2
    134c:	10 e0       	ldi	r17, 0x00	; 0
    134e:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <disk_readp>
    1352:	89 2b       	or	r24, r25
    1354:	39 f4       	brne	.+14     	; 0x1364 <check_fs+0x60>
    1356:	88 81       	ld	r24, Y
    1358:	99 81       	ldd	r25, Y+1	; 0x01
    135a:	86 54       	subi	r24, 0x46	; 70
    135c:	91 44       	sbci	r25, 0x41	; 65
    135e:	11 f4       	brne	.+4      	; 0x1364 <check_fs+0x60>
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	17 c0       	rjmp	.+46     	; 0x1392 <check_fs+0x8e>
		return 0;
#if _FS_FAT32
	if (!disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
    1364:	8b 2d       	mov	r24, r11
    1366:	9a 2d       	mov	r25, r10
    1368:	b7 01       	movw	r22, r14
    136a:	a6 01       	movw	r20, r12
    136c:	22 e5       	ldi	r18, 0x52	; 82
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	02 e0       	ldi	r16, 0x02	; 2
    1372:	10 e0       	ldi	r17, 0x00	; 0
    1374:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <disk_readp>
    1378:	89 2b       	or	r24, r25
    137a:	11 f0       	breq	.+4      	; 0x1380 <check_fs+0x7c>
    137c:	21 e0       	ldi	r18, 0x01	; 1
    137e:	09 c0       	rjmp	.+18     	; 0x1392 <check_fs+0x8e>
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	88 81       	ld	r24, Y
    1384:	99 81       	ldd	r25, Y+1	; 0x01
    1386:	86 54       	subi	r24, 0x46	; 70
    1388:	91 44       	sbci	r25, 0x41	; 65
    138a:	09 f4       	brne	.+2      	; 0x138e <check_fs+0x8a>
    138c:	21 e0       	ldi	r18, 0x01	; 1
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	28 27       	eor	r18, r24
		return 0;
#endif
	return 1;
}
    1392:	82 2f       	mov	r24, r18
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	ea e0       	ldi	r30, 0x0A	; 10
    139a:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__epilogue_restores__+0x10>

0000139e <pf_write>:
FRESULT pf_write (
	const void* buff,	/* Pointer to the data to be written */
	WORD btw,			/* Number of bytes to write (0:Finalize the current write operation) */
	WORD* bw			/* Pointer to number of bytes written */
)
{
    139e:	a0 e0       	ldi	r26, 0x00	; 0
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e5 ed       	ldi	r30, 0xD5	; 213
    13a4:	f9 e0       	ldi	r31, 0x09	; 9
    13a6:	0c 94 8e 0f 	jmp	0x1f1c	; 0x1f1c <__prologue_saves__+0x4>
    13aa:	fc 01       	movw	r30, r24
    13ac:	5b 01       	movw	r10, r22
    13ae:	3a 01       	movw	r6, r20
	CLUST clst;
	DWORD sect, remain;
	const BYTE *p = buff;
	WORD wcnt;
	FATFS *fs = FatFs;
    13b0:	c0 91 1b 01 	lds	r28, 0x011B
    13b4:	d0 91 1c 01 	lds	r29, 0x011C


	*bw = 0;
    13b8:	da 01       	movw	r26, r20
    13ba:	1d 92       	st	X+, r1
    13bc:	1c 92       	st	X, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    13be:	20 97       	sbiw	r28, 0x00	; 0
    13c0:	19 f4       	brne	.+6      	; 0x13c8 <pf_write+0x2a>
    13c2:	26 e0       	ldi	r18, 0x06	; 6
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	0b c1       	rjmp	.+534    	; 0x15de <pf_write+0x240>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	80 fd       	sbrc	r24, 0
    13ce:	03 c0       	rjmp	.+6      	; 0x13d6 <pf_write+0x38>
    13d0:	25 e0       	ldi	r18, 0x05	; 5
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	04 c1       	rjmp	.+520    	; 0x15de <pf_write+0x240>
    13d6:	80 74       	andi	r24, 0x40	; 64
    13d8:	90 70       	andi	r25, 0x00	; 0
		return FR_NOT_OPENED;

	if (!btw) {		/* Finalize request */
    13da:	61 15       	cp	r22, r1
    13dc:	71 05       	cpc	r23, r1
    13de:	89 f4       	brne	.+34     	; 0x1402 <pf_write+0x64>
		if ((fs->flag & FA__WIP) && disk_writep(0, 0)) goto fw_abort;
    13e0:	89 2b       	or	r24, r25
    13e2:	59 f0       	breq	.+22     	; 0x13fa <pf_write+0x5c>
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	40 e0       	ldi	r20, 0x00	; 0
    13ea:	50 e0       	ldi	r21, 0x00	; 0
    13ec:	60 e0       	ldi	r22, 0x00	; 0
    13ee:	70 e0       	ldi	r23, 0x00	; 0
    13f0:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <disk_writep>
    13f4:	89 2b       	or	r24, r25
    13f6:	09 f0       	breq	.+2      	; 0x13fa <pf_write+0x5c>
    13f8:	ef c0       	rjmp	.+478    	; 0x15d8 <pf_write+0x23a>
		fs->flag &= ~FA__WIP;
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	8f 7b       	andi	r24, 0xBF	; 191
    13fe:	8a 83       	std	Y+2, r24	; 0x02
    1400:	e8 c0       	rjmp	.+464    	; 0x15d2 <pf_write+0x234>
		return FR_OK;
	} else {		/* Write data request */
		if (!(fs->flag & FA__WIP))		/* Round down fptr to the sector boundary */
    1402:	89 2b       	or	r24, r25
    1404:	51 f4       	brne	.+20     	; 0x141a <pf_write+0x7c>
			fs->fptr &= 0xFFFFFE00;
    1406:	88 8d       	ldd	r24, Y+24	; 0x18
    1408:	99 8d       	ldd	r25, Y+25	; 0x19
    140a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    140c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    140e:	80 70       	andi	r24, 0x00	; 0
    1410:	9e 7f       	andi	r25, 0xFE	; 254
    1412:	88 8f       	std	Y+24, r24	; 0x18
    1414:	99 8f       	std	Y+25, r25	; 0x19
    1416:	aa 8f       	std	Y+26, r26	; 0x1a
    1418:	bb 8f       	std	Y+27, r27	; 0x1b
	}
	remain = fs->fsize - fs->fptr;
    141a:	2c 8d       	ldd	r18, Y+28	; 0x1c
    141c:	3d 8d       	ldd	r19, Y+29	; 0x1d
    141e:	4e 8d       	ldd	r20, Y+30	; 0x1e
    1420:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1422:	88 8d       	ldd	r24, Y+24	; 0x18
    1424:	99 8d       	ldd	r25, Y+25	; 0x19
    1426:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1428:	bb 8d       	ldd	r27, Y+27	; 0x1b
    142a:	28 1b       	sub	r18, r24
    142c:	39 0b       	sbc	r19, r25
    142e:	4a 0b       	sbc	r20, r26
    1430:	5b 0b       	sbc	r21, r27
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */
    1432:	c5 01       	movw	r24, r10
    1434:	a0 e0       	ldi	r26, 0x00	; 0
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	28 17       	cp	r18, r24
    143a:	39 07       	cpc	r19, r25
    143c:	4a 07       	cpc	r20, r26
    143e:	5b 07       	cpc	r21, r27
    1440:	08 f4       	brcc	.+2      	; 0x1444 <pf_write+0xa6>
    1442:	59 01       	movw	r10, r18
	WORD* bw			/* Pointer to number of bytes written */
)
{
	CLUST clst;
	DWORD sect, remain;
	const BYTE *p = buff;
    1444:	4f 01       	movw	r8, r30
			if (!sect) goto fw_abort;
			fs->dsect = sect + fs->csect++;
			if (disk_writep(0, fs->dsect)) goto fw_abort;	/* Initiate a sector write operation */
			fs->flag |= FA__WIP;
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
    1446:	41 2c       	mov	r4, r1
    1448:	b2 e0       	ldi	r27, 0x02	; 2
    144a:	5b 2e       	mov	r5, r27
    144c:	be c0       	rjmp	.+380    	; 0x15ca <pf_write+0x22c>
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */

	while (btw)	{									/* Repeat until all data transferred */
		if (((WORD)fs->fptr % 512) == 0) {				/* On the sector boundary? */
    144e:	e8 8c       	ldd	r14, Y+24	; 0x18
    1450:	f9 8c       	ldd	r15, Y+25	; 0x19
    1452:	0a 8d       	ldd	r16, Y+26	; 0x1a
    1454:	1b 8d       	ldd	r17, Y+27	; 0x1b
    1456:	c7 01       	movw	r24, r14
    1458:	91 70       	andi	r25, 0x01	; 1
    145a:	89 2b       	or	r24, r25
    145c:	09 f0       	breq	.+2      	; 0x1460 <pf_write+0xc2>
    145e:	77 c0       	rjmp	.+238    	; 0x154e <pf_write+0x1b0>
			if ((fs->fptr / 512 % fs->csize) == 0) {	/* On the cluster boundary? */
    1460:	c8 01       	movw	r24, r16
    1462:	b7 01       	movw	r22, r14
    1464:	a9 e0       	ldi	r26, 0x09	; 9
    1466:	96 95       	lsr	r25
    1468:	87 95       	ror	r24
    146a:	77 95       	ror	r23
    146c:	67 95       	ror	r22
    146e:	aa 95       	dec	r26
    1470:	d1 f7       	brne	.-12     	; 0x1466 <pf_write+0xc8>
    1472:	29 81       	ldd	r18, Y+1	; 0x01
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	40 e0       	ldi	r20, 0x00	; 0
    1478:	50 e0       	ldi	r21, 0x00	; 0
    147a:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <__udivmodsi4>
    147e:	61 15       	cp	r22, r1
    1480:	71 05       	cpc	r23, r1
    1482:	81 05       	cpc	r24, r1
    1484:	91 05       	cpc	r25, r1
    1486:	d9 f4       	brne	.+54     	; 0x14be <pf_write+0x120>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
    1488:	e1 14       	cp	r14, r1
    148a:	f1 04       	cpc	r15, r1
    148c:	01 05       	cpc	r16, r1
    148e:	11 05       	cpc	r17, r1
    1490:	29 f4       	brne	.+10     	; 0x149c <pf_write+0xfe>
    1492:	68 a1       	ldd	r22, Y+32	; 0x20
    1494:	79 a1       	ldd	r23, Y+33	; 0x21
    1496:	8a a1       	ldd	r24, Y+34	; 0x22
    1498:	9b a1       	ldd	r25, Y+35	; 0x23
    149a:	06 c0       	rjmp	.+12     	; 0x14a8 <pf_write+0x10a>
    149c:	6c a1       	ldd	r22, Y+36	; 0x24
    149e:	7d a1       	ldd	r23, Y+37	; 0x25
    14a0:	8e a1       	ldd	r24, Y+38	; 0x26
    14a2:	9f a1       	ldd	r25, Y+39	; 0x27
    14a4:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <get_fat>
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fw_abort;
    14a8:	62 30       	cpi	r22, 0x02	; 2
    14aa:	71 05       	cpc	r23, r1
    14ac:	81 05       	cpc	r24, r1
    14ae:	91 05       	cpc	r25, r1
    14b0:	08 f4       	brcc	.+2      	; 0x14b4 <pf_write+0x116>
    14b2:	92 c0       	rjmp	.+292    	; 0x15d8 <pf_write+0x23a>
				fs->curr_clust = clst;				/* Update current cluster */
    14b4:	6c a3       	std	Y+36, r22	; 0x24
    14b6:	7d a3       	std	Y+37, r23	; 0x25
    14b8:	8e a3       	std	Y+38, r24	; 0x26
    14ba:	9f a3       	std	Y+39, r25	; 0x27
				fs->csect = 0;						/* Reset sector offset in the cluster */
    14bc:	1b 82       	std	Y+3, r1	; 0x03
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    14be:	00 91 1b 01 	lds	r16, 0x011B
    14c2:	10 91 1c 01 	lds	r17, 0x011C


	clst -= 2;
    14c6:	2c a1       	ldd	r18, Y+36	; 0x24
    14c8:	3d a1       	ldd	r19, Y+37	; 0x25
    14ca:	4e a1       	ldd	r20, Y+38	; 0x26
    14cc:	5f a1       	ldd	r21, Y+39	; 0x27
    14ce:	22 50       	subi	r18, 0x02	; 2
    14d0:	30 40       	sbci	r19, 0x00	; 0
    14d2:	40 40       	sbci	r20, 0x00	; 0
    14d4:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
    14d6:	f8 01       	movw	r30, r16
    14d8:	80 85       	ldd	r24, Z+8	; 0x08
    14da:	91 85       	ldd	r25, Z+9	; 0x09
    14dc:	a2 85       	ldd	r26, Z+10	; 0x0a
    14de:	b3 85       	ldd	r27, Z+11	; 0x0b
    14e0:	02 97       	sbiw	r24, 0x02	; 2
    14e2:	a1 09       	sbc	r26, r1
    14e4:	b1 09       	sbc	r27, r1
    14e6:	28 17       	cp	r18, r24
    14e8:	39 07       	cpc	r19, r25
    14ea:	4a 07       	cpc	r20, r26
    14ec:	5b 07       	cpc	r21, r27
    14ee:	08 f0       	brcs	.+2      	; 0x14f2 <pf_write+0x154>
    14f0:	73 c0       	rjmp	.+230    	; 0x15d8 <pf_write+0x23a>
	return (DWORD)clst * fs->csize + fs->database;
    14f2:	61 81       	ldd	r22, Z+1	; 0x01
    14f4:	70 e0       	ldi	r23, 0x00	; 0
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <__mulsi3>
    14fe:	9b 01       	movw	r18, r22
    1500:	ac 01       	movw	r20, r24
    1502:	f8 01       	movw	r30, r16
    1504:	84 89       	ldd	r24, Z+20	; 0x14
    1506:	95 89       	ldd	r25, Z+21	; 0x15
    1508:	a6 89       	ldd	r26, Z+22	; 0x16
    150a:	b7 89       	ldd	r27, Z+23	; 0x17
    150c:	28 0f       	add	r18, r24
    150e:	39 1f       	adc	r19, r25
    1510:	4a 1f       	adc	r20, r26
    1512:	5b 1f       	adc	r21, r27
				if (clst <= 1) goto fw_abort;
				fs->curr_clust = clst;				/* Update current cluster */
				fs->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fw_abort;
    1514:	21 15       	cp	r18, r1
    1516:	31 05       	cpc	r19, r1
    1518:	41 05       	cpc	r20, r1
    151a:	51 05       	cpc	r21, r1
    151c:	09 f4       	brne	.+2      	; 0x1520 <pf_write+0x182>
    151e:	5c c0       	rjmp	.+184    	; 0x15d8 <pf_write+0x23a>
			fs->dsect = sect + fs->csect++;
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	ba 01       	movw	r22, r20
    1524:	a9 01       	movw	r20, r18
    1526:	48 0f       	add	r20, r24
    1528:	51 1d       	adc	r21, r1
    152a:	61 1d       	adc	r22, r1
    152c:	71 1d       	adc	r23, r1
    152e:	48 a7       	std	Y+40, r20	; 0x28
    1530:	59 a7       	std	Y+41, r21	; 0x29
    1532:	6a a7       	std	Y+42, r22	; 0x2a
    1534:	7b a7       	std	Y+43, r23	; 0x2b
    1536:	8f 5f       	subi	r24, 0xFF	; 255
    1538:	8b 83       	std	Y+3, r24	; 0x03
			if (disk_writep(0, fs->dsect)) goto fw_abort;	/* Initiate a sector write operation */
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <disk_writep>
    1542:	89 2b       	or	r24, r25
    1544:	09 f0       	breq	.+2      	; 0x1548 <pf_write+0x1aa>
    1546:	48 c0       	rjmp	.+144    	; 0x15d8 <pf_write+0x23a>
			fs->flag |= FA__WIP;
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	80 64       	ori	r24, 0x40	; 64
    154c:	8a 83       	std	Y+2, r24	; 0x02
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
    154e:	88 8d       	ldd	r24, Y+24	; 0x18
    1550:	99 8d       	ldd	r25, Y+25	; 0x19
    1552:	91 70       	andi	r25, 0x01	; 1
    1554:	92 01       	movw	r18, r4
    1556:	28 1b       	sub	r18, r24
    1558:	39 0b       	sbc	r19, r25
    155a:	65 01       	movw	r12, r10
    155c:	2a 15       	cp	r18, r10
    155e:	3b 05       	cpc	r19, r11
    1560:	08 f4       	brcc	.+2      	; 0x1564 <pf_write+0x1c6>
    1562:	69 01       	movw	r12, r18
		if (wcnt > btw) wcnt = btw;
		if (disk_writep(p, wcnt)) goto fw_abort;	/* Send data to the sector */
    1564:	76 01       	movw	r14, r12
    1566:	00 e0       	ldi	r16, 0x00	; 0
    1568:	10 e0       	ldi	r17, 0x00	; 0
    156a:	c4 01       	movw	r24, r8
    156c:	b8 01       	movw	r22, r16
    156e:	a7 01       	movw	r20, r14
    1570:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <disk_writep>
    1574:	89 2b       	or	r24, r25
    1576:	81 f5       	brne	.+96     	; 0x15d8 <pf_write+0x23a>
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
    1578:	88 8d       	ldd	r24, Y+24	; 0x18
    157a:	99 8d       	ldd	r25, Y+25	; 0x19
    157c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    157e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1580:	8e 0d       	add	r24, r14
    1582:	9f 1d       	adc	r25, r15
    1584:	a0 1f       	adc	r26, r16
    1586:	b1 1f       	adc	r27, r17
    1588:	9c 01       	movw	r18, r24
    158a:	88 8f       	std	Y+24, r24	; 0x18
    158c:	99 8f       	std	Y+25, r25	; 0x19
    158e:	aa 8f       	std	Y+26, r26	; 0x1a
    1590:	bb 8f       	std	Y+27, r27	; 0x1b
		btw -= wcnt; *bw += wcnt;
    1592:	d3 01       	movw	r26, r6
    1594:	8d 91       	ld	r24, X+
    1596:	9c 91       	ld	r25, X
    1598:	11 97       	sbiw	r26, 0x01	; 1
    159a:	8c 0d       	add	r24, r12
    159c:	9d 1d       	adc	r25, r13
    159e:	8d 93       	st	X+, r24
    15a0:	9c 93       	st	X, r25
		if (((WORD)fs->fptr % 512) == 0) {
    15a2:	31 70       	andi	r19, 0x01	; 1
    15a4:	23 2b       	or	r18, r19
    15a6:	69 f4       	brne	.+26     	; 0x15c2 <pf_write+0x224>
			if (disk_writep(0, 0)) goto fw_abort;	/* Finalize the currtent secter write operation */
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	40 e0       	ldi	r20, 0x00	; 0
    15ae:	50 e0       	ldi	r21, 0x00	; 0
    15b0:	60 e0       	ldi	r22, 0x00	; 0
    15b2:	70 e0       	ldi	r23, 0x00	; 0
    15b4:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <disk_writep>
    15b8:	89 2b       	or	r24, r25
    15ba:	71 f4       	brne	.+28     	; 0x15d8 <pf_write+0x23a>
			fs->flag &= ~FA__WIP;
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	8f 7b       	andi	r24, 0xBF	; 191
    15c0:	8a 83       	std	Y+2, r24	; 0x02
			fs->flag |= FA__WIP;
		}
		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
		if (wcnt > btw) wcnt = btw;
		if (disk_writep(p, wcnt)) goto fw_abort;	/* Send data to the sector */
		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
    15c2:	8c 0c       	add	r8, r12
    15c4:	9d 1c       	adc	r9, r13
		btw -= wcnt; *bw += wcnt;
    15c6:	ac 18       	sub	r10, r12
    15c8:	bd 08       	sbc	r11, r13
			fs->fptr &= 0xFFFFFE00;
	}
	remain = fs->fsize - fs->fptr;
	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */

	while (btw)	{									/* Repeat until all data transferred */
    15ca:	a1 14       	cp	r10, r1
    15cc:	b1 04       	cpc	r11, r1
    15ce:	09 f0       	breq	.+2      	; 0x15d2 <pf_write+0x234>
    15d0:	3e cf       	rjmp	.-388    	; 0x144e <pf_write+0xb0>
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	03 c0       	rjmp	.+6      	; 0x15de <pf_write+0x240>
	}

	return FR_OK;

fw_abort:
	fs->flag = 0;
    15d8:	1a 82       	std	Y+2, r1	; 0x02
    15da:	21 e0       	ldi	r18, 0x01	; 1
    15dc:	30 e0       	ldi	r19, 0x00	; 0
	return FR_DISK_ERR;
}
    15de:	c9 01       	movw	r24, r18
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	e0 e1       	ldi	r30, 0x10	; 16
    15e6:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <__epilogue_restores__+0x4>

000015ea <pf_mount>:
/*-----------------------------------------------------------------------*/

FRESULT pf_mount (
	FATFS *fs		/* Pointer to new file system object (NULL: Unmount) */
)
{
    15ea:	a4 e2       	ldi	r26, 0x24	; 36
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	eb ef       	ldi	r30, 0xFB	; 251
    15f0:	fa e0       	ldi	r31, 0x0A	; 10
    15f2:	0c 94 90 0f 	jmp	0x1f20	; 0x1f20 <__prologue_saves__+0x8>
    15f6:	5c 01       	movw	r10, r24
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
    15f8:	10 92 1c 01 	sts	0x011C, r1
    15fc:	10 92 1b 01 	sts	0x011B, r1
	if (!fs) return FR_OK;				/* Unregister fs object */
    1600:	00 97       	sbiw	r24, 0x00	; 0
    1602:	09 f4       	brne	.+2      	; 0x1606 <pf_mount+0x1c>
    1604:	ee c0       	rjmp	.+476    	; 0x17e2 <pf_mount+0x1f8>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
    1606:	0e 94 66 0d 	call	0x1acc	; 0x1acc <disk_initialize>
    160a:	80 ff       	sbrs	r24, 0
    160c:	03 c0       	rjmp	.+6      	; 0x1614 <pf_mount+0x2a>
    160e:	22 e0       	ldi	r18, 0x02	; 2
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	ef c0       	rjmp	.+478    	; 0x17f2 <pf_mount+0x208>
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
    1614:	4e 01       	movw	r8, r28
    1616:	08 94       	sec
    1618:	81 1c       	adc	r8, r1
    161a:	91 1c       	adc	r9, r1
    161c:	c4 01       	movw	r24, r8
    161e:	40 e0       	ldi	r20, 0x00	; 0
    1620:	50 e0       	ldi	r21, 0x00	; 0
    1622:	60 e0       	ldi	r22, 0x00	; 0
    1624:	70 e0       	ldi	r23, 0x00	; 0
    1626:	0e 94 82 09 	call	0x1304	; 0x1304 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
    162a:	81 30       	cpi	r24, 0x01	; 1
    162c:	21 f0       	breq	.+8      	; 0x1636 <pf_mount+0x4c>
    162e:	cc 24       	eor	r12, r12
    1630:	dd 24       	eor	r13, r13
    1632:	76 01       	movw	r14, r12
    1634:	1b c0       	rjmp	.+54     	; 0x166c <pf_mount+0x82>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
    1636:	c4 01       	movw	r24, r8
    1638:	40 e0       	ldi	r20, 0x00	; 0
    163a:	50 e0       	ldi	r21, 0x00	; 0
    163c:	60 e0       	ldi	r22, 0x00	; 0
    163e:	70 e0       	ldi	r23, 0x00	; 0
    1640:	2e eb       	ldi	r18, 0xBE	; 190
    1642:	31 e0       	ldi	r19, 0x01	; 1
    1644:	00 e1       	ldi	r16, 0x10	; 16
    1646:	10 e0       	ldi	r17, 0x00	; 0
    1648:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <disk_readp>
    164c:	89 2b       	or	r24, r25
    164e:	09 f0       	breq	.+2      	; 0x1652 <pf_mount+0x68>
    1650:	cb c0       	rjmp	.+406    	; 0x17e8 <pf_mount+0x1fe>
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
    1652:	8d 81       	ldd	r24, Y+5	; 0x05
    1654:	88 23       	and	r24, r24
    1656:	09 f4       	brne	.+2      	; 0x165a <pf_mount+0x70>
    1658:	ca c0       	rjmp	.+404    	; 0x17ee <pf_mount+0x204>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
    165a:	c9 84       	ldd	r12, Y+9	; 0x09
    165c:	da 84       	ldd	r13, Y+10	; 0x0a
    165e:	eb 84       	ldd	r14, Y+11	; 0x0b
    1660:	fc 84       	ldd	r15, Y+12	; 0x0c
				fmt = check_fs(buf, bsect);	/* Check the partition */
    1662:	c4 01       	movw	r24, r8
    1664:	b7 01       	movw	r22, r14
    1666:	a6 01       	movw	r20, r12
    1668:	0e 94 82 09 	call	0x1304	; 0x1304 <check_fs>
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    166c:	83 30       	cpi	r24, 0x03	; 3
    166e:	09 f4       	brne	.+2      	; 0x1672 <pf_mount+0x88>
    1670:	bb c0       	rjmp	.+374    	; 0x17e8 <pf_mount+0x1fe>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    1672:	88 23       	and	r24, r24
    1674:	09 f0       	breq	.+2      	; 0x1678 <pf_mount+0x8e>
    1676:	bb c0       	rjmp	.+374    	; 0x17ee <pf_mount+0x204>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
    1678:	ce 01       	movw	r24, r28
    167a:	01 96       	adiw	r24, 0x01	; 1
    167c:	b7 01       	movw	r22, r14
    167e:	a6 01       	movw	r20, r12
    1680:	2d e0       	ldi	r18, 0x0D	; 13
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	04 e2       	ldi	r16, 0x24	; 36
    1686:	10 e0       	ldi	r17, 0x00	; 0
    1688:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <disk_readp>
    168c:	89 2b       	or	r24, r25
    168e:	09 f0       	breq	.+2      	; 0x1692 <pf_mount+0xa8>
    1690:	ab c0       	rjmp	.+342    	; 0x17e8 <pf_mount+0x1fe>

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
    1692:	8a 85       	ldd	r24, Y+10	; 0x0a
    1694:	9b 85       	ldd	r25, Y+11	; 0x0b
    1696:	bc 01       	movw	r22, r24
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	90 e0       	ldi	r25, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
    169c:	61 15       	cp	r22, r1
    169e:	71 05       	cpc	r23, r1
    16a0:	81 05       	cpc	r24, r1
    16a2:	91 05       	cpc	r25, r1
    16a4:	21 f4       	brne	.+8      	; 0x16ae <pf_mount+0xc4>
    16a6:	68 8d       	ldd	r22, Y+24	; 0x18
    16a8:	79 8d       	ldd	r23, Y+25	; 0x19
    16aa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16ac:	9b 8d       	ldd	r25, Y+27	; 0x1b

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
    16ae:	2c 81       	ldd	r18, Y+4	; 0x04
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	40 e0       	ldi	r20, 0x00	; 0
    16b4:	50 e0       	ldi	r21, 0x00	; 0
    16b6:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <__mulsi3>
    16ba:	3b 01       	movw	r6, r22
    16bc:	4c 01       	movw	r8, r24
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	9b 81       	ldd	r25, Y+3	; 0x03
    16c2:	a0 e0       	ldi	r26, 0x00	; 0
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	c8 0e       	add	r12, r24
    16c8:	d9 1e       	adc	r13, r25
    16ca:	ea 1e       	adc	r14, r26
    16cc:	fb 1e       	adc	r15, r27
    16ce:	f5 01       	movw	r30, r10
    16d0:	c4 86       	std	Z+12, r12	; 0x0c
    16d2:	d5 86       	std	Z+13, r13	; 0x0d
    16d4:	e6 86       	std	Z+14, r14	; 0x0e
    16d6:	f7 86       	std	Z+15, r15	; 0x0f
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	81 83       	std	Z+1, r24	; 0x01
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
    16dc:	2d 81       	ldd	r18, Y+5	; 0x05
    16de:	3e 81       	ldd	r19, Y+6	; 0x06
    16e0:	35 83       	std	Z+5, r19	; 0x05
    16e2:	24 83       	std	Z+4, r18	; 0x04
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
    16e4:	8f 81       	ldd	r24, Y+7	; 0x07
    16e6:	98 85       	ldd	r25, Y+8	; 0x08
    16e8:	7c 01       	movw	r14, r24
    16ea:	00 e0       	ldi	r16, 0x00	; 0
    16ec:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
    16ee:	e1 14       	cp	r14, r1
    16f0:	f1 04       	cpc	r15, r1
    16f2:	01 05       	cpc	r16, r1
    16f4:	11 05       	cpc	r17, r1
    16f6:	21 f4       	brne	.+8      	; 0x1700 <pf_mount+0x116>
    16f8:	ec 88       	ldd	r14, Y+20	; 0x14
    16fa:	fd 88       	ldd	r15, Y+21	; 0x15
    16fc:	0e 89       	ldd	r16, Y+22	; 0x16
    16fe:	1f 89       	ldd	r17, Y+23	; 0x17
	mclst = (tsect						/* Last cluster# + 1 */
    1700:	8a 81       	ldd	r24, Y+2	; 0x02
    1702:	9b 81       	ldd	r25, Y+3	; 0x03
    1704:	a0 e0       	ldi	r26, 0x00	; 0
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e8 1a       	sub	r14, r24
    170a:	f9 0a       	sbc	r15, r25
    170c:	0a 0b       	sbc	r16, r26
    170e:	1b 0b       	sbc	r17, r27
    1710:	e6 18       	sub	r14, r6
    1712:	f7 08       	sbc	r15, r7
    1714:	08 09       	sbc	r16, r8
    1716:	19 09       	sbc	r17, r9
    1718:	44 e0       	ldi	r20, 0x04	; 4
    171a:	36 95       	lsr	r19
    171c:	27 95       	ror	r18
    171e:	4a 95       	dec	r20
    1720:	e1 f7       	brne	.-8      	; 0x171a <pf_mount+0x130>
    1722:	c9 01       	movw	r24, r18
    1724:	a0 e0       	ldi	r26, 0x00	; 0
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	e8 1a       	sub	r14, r24
    172a:	f9 0a       	sbc	r15, r25
    172c:	0a 0b       	sbc	r16, r26
    172e:	1b 0b       	sbc	r17, r27
    1730:	f5 01       	movw	r30, r10
    1732:	21 81       	ldd	r18, Z+1	; 0x01
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	40 e0       	ldi	r20, 0x00	; 0
    1738:	50 e0       	ldi	r21, 0x00	; 0
    173a:	c8 01       	movw	r24, r16
    173c:	b7 01       	movw	r22, r14
    173e:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <__udivmodsi4>
    1742:	2e 5f       	subi	r18, 0xFE	; 254
    1744:	3f 4f       	sbci	r19, 0xFF	; 255
    1746:	4f 4f       	sbci	r20, 0xFF	; 255
    1748:	5f 4f       	sbci	r21, 0xFF	; 255
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->max_clust = (CLUST)mclst;
    174a:	f5 01       	movw	r30, r10
    174c:	20 87       	std	Z+8, r18	; 0x08
    174e:	31 87       	std	Z+9, r19	; 0x09
    1750:	42 87       	std	Z+10, r20	; 0x0a
    1752:	53 87       	std	Z+11, r21	; 0x0b

	fmt = FS_FAT12;							/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;		/* Number of clusters >= 0xFF5 */
    1754:	27 3f       	cpi	r18, 0xF7	; 247
    1756:	ff e0       	ldi	r31, 0x0F	; 15
    1758:	3f 07       	cpc	r19, r31
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	4f 07       	cpc	r20, r31
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	5f 07       	cpc	r21, r31
    1762:	10 f4       	brcc	.+4      	; 0x1768 <pf_mount+0x17e>
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	08 c0       	rjmp	.+16     	; 0x1778 <pf_mount+0x18e>
	if (mclst >= 0xFFF7)					/* Number of clusters >= 0xFFF5 */
    1768:	27 5f       	subi	r18, 0xF7	; 247
    176a:	3f 4f       	sbci	r19, 0xFF	; 255
    176c:	40 40       	sbci	r20, 0x00	; 0
    176e:	50 40       	sbci	r21, 0x00	; 0
    1770:	10 f0       	brcs	.+4      	; 0x1776 <pf_mount+0x18c>
    1772:	83 e0       	ldi	r24, 0x03	; 3
    1774:	01 c0       	rjmp	.+2      	; 0x1778 <pf_mount+0x18e>
    1776:	82 e0       	ldi	r24, 0x02	; 2
		fmt = FS_FAT32;
#else
		return FR_NO_FILESYSTEM;
#endif

	fs->fs_type = fmt;		/* FAT sub-type */
    1778:	f5 01       	movw	r30, r10
    177a:	80 83       	st	Z, r24
#if _FS_FAT32
	if (fmt == FS_FAT32)
    177c:	83 30       	cpi	r24, 0x03	; 3
    177e:	29 f4       	brne	.+10     	; 0x178a <pf_mount+0x1a0>
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
    1780:	88 a1       	ldd	r24, Y+32	; 0x20
    1782:	99 a1       	ldd	r25, Y+33	; 0x21
    1784:	aa a1       	ldd	r26, Y+34	; 0x22
    1786:	bb a1       	ldd	r27, Y+35	; 0x23
    1788:	09 c0       	rjmp	.+18     	; 0x179c <pf_mount+0x1b2>
	else
#endif
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    178a:	f5 01       	movw	r30, r10
    178c:	84 85       	ldd	r24, Z+12	; 0x0c
    178e:	95 85       	ldd	r25, Z+13	; 0x0d
    1790:	a6 85       	ldd	r26, Z+14	; 0x0e
    1792:	b7 85       	ldd	r27, Z+15	; 0x0f
    1794:	86 0d       	add	r24, r6
    1796:	97 1d       	adc	r25, r7
    1798:	a8 1d       	adc	r26, r8
    179a:	b9 1d       	adc	r27, r9
    179c:	80 8b       	std	Z+16, r24	; 0x10
    179e:	91 8b       	std	Z+17, r25	; 0x11
    17a0:	a2 8b       	std	Z+18, r26	; 0x12
    17a2:	b3 8b       	std	Z+19, r27	; 0x13
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    17a4:	f5 01       	movw	r30, r10
    17a6:	84 81       	ldd	r24, Z+4	; 0x04
    17a8:	95 81       	ldd	r25, Z+5	; 0x05
    17aa:	24 e0       	ldi	r18, 0x04	; 4
    17ac:	96 95       	lsr	r25
    17ae:	87 95       	ror	r24
    17b0:	2a 95       	dec	r18
    17b2:	e1 f7       	brne	.-8      	; 0x17ac <pf_mount+0x1c2>
    17b4:	a0 e0       	ldi	r26, 0x00	; 0
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	24 85       	ldd	r18, Z+12	; 0x0c
    17ba:	35 85       	ldd	r19, Z+13	; 0x0d
    17bc:	46 85       	ldd	r20, Z+14	; 0x0e
    17be:	57 85       	ldd	r21, Z+15	; 0x0f
    17c0:	82 0f       	add	r24, r18
    17c2:	93 1f       	adc	r25, r19
    17c4:	a4 1f       	adc	r26, r20
    17c6:	b5 1f       	adc	r27, r21
    17c8:	86 0d       	add	r24, r6
    17ca:	97 1d       	adc	r25, r7
    17cc:	a8 1d       	adc	r26, r8
    17ce:	b9 1d       	adc	r27, r9
    17d0:	84 8b       	std	Z+20, r24	; 0x14
    17d2:	95 8b       	std	Z+21, r25	; 0x15
    17d4:	a6 8b       	std	Z+22, r26	; 0x16
    17d6:	b7 8b       	std	Z+23, r27	; 0x17

	fs->flag = 0;
    17d8:	12 82       	std	Z+2, r1	; 0x02
	FatFs = fs;
    17da:	b0 92 1c 01 	sts	0x011C, r11
    17de:	a0 92 1b 01 	sts	0x011B, r10
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	05 c0       	rjmp	.+10     	; 0x17f2 <pf_mount+0x208>

	return FR_OK;
    17e8:	21 e0       	ldi	r18, 0x01	; 1
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <pf_mount+0x208>
    17ee:	27 e0       	ldi	r18, 0x07	; 7
    17f0:	30 e0       	ldi	r19, 0x00	; 0
}
    17f2:	c9 01       	movw	r24, r18
    17f4:	a4 96       	adiw	r28, 0x24	; 36
    17f6:	ee e0       	ldi	r30, 0x0E	; 14
    17f8:	0c 94 ac 0f 	jmp	0x1f58	; 0x1f58 <__epilogue_restores__+0x8>

000017fc <init_spi>:
/*-----------------------------------------------------------------------*/
void init_spi (void)
{
	WORD tmr;

	DESELECT();												// set default CS pin	
    17fc:	5e 9a       	sbi	0x0b, 6	; 11
    17fe:	84 ec       	ldi	r24, 0xC4	; 196
    1800:	99 e0       	ldi	r25, 0x09	; 9
	tmr = 2500;
	do
		asm volatile ("nop");
    1802:	00 00       	nop
	while (--tmr);
    1804:	01 97       	sbiw	r24, 0x01	; 1
    1806:	e9 f7       	brne	.-6      	; 0x1802 <init_spi+0x6>
	
	// Set spi direction: MOSI and SCK as output, MISO as input
	SPI_DDR |= (1 << DD_MOSI);
    1808:	25 9a       	sbi	0x04, 5	; 4
	SPI_DDR |= (1 << DD_SCK);
    180a:	27 9a       	sbi	0x04, 7	; 4
	
	// CS pin as output
	SD_CS_DDR |= (1 << SD_CS_PIN);
    180c:	56 9a       	sbi	0x0a, 6	; 10
    
	// Initialize SPI port, SPI enabled as master
    SPCR = (1<<SPE) | (1<<MSTR);
    180e:	80 e5       	ldi	r24, 0x50	; 80
    1810:	8c bd       	out	0x2c, r24	; 44
	
	// Set SPI at double speed
	SPSR |= (1 << SPI2X);
    1812:	8d b5       	in	r24, 0x2d	; 45
    1814:	81 60       	ori	r24, 0x01	; 1
    1816:	8d bd       	out	0x2d, r24	; 45
}
    1818:	08 95       	ret

0000181a <rcv_spi_m>:

BYTE rcv_spi_m(void)
{
	//send a dummy byte (0xFF) in order to receive a byte from the slave
	SPDR = 0xFF;
    181a:	8f ef       	ldi	r24, 0xFF	; 255
    181c:	8e bd       	out	0x2e, r24	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    181e:	0d b4       	in	r0, 0x2d	; 45
    1820:	07 fe       	sbrs	r0, 7
    1822:	fd cf       	rjmp	.-6      	; 0x181e <rcv_spi_m+0x4>
	;
	
	//return the read byte
	return SPDR;
    1824:	8e b5       	in	r24, 0x2e	; 46
	
}
    1826:	08 95       	ret

00001828 <xmit_spi>:
void xmit_spi(BYTE dat)
{
	//TODO
	//send a byte to the slave
	SPDR = dat;
    1828:	8e bd       	out	0x2e, r24	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    182a:	0d b4       	in	r0, 0x2d	; 45
    182c:	07 fe       	sbrs	r0, 7
    182e:	fd cf       	rjmp	.-6      	; 0x182a <xmit_spi+0x2>
	;
	//wait for it to be serialized
}
    1830:	08 95       	ret

00001832 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    1832:	df 92       	push	r13
    1834:	ef 92       	push	r14
    1836:	ff 92       	push	r15
    1838:	0f 93       	push	r16
    183a:	1f 93       	push	r17
    183c:	d8 2e       	mov	r13, r24
    183e:	7a 01       	movw	r14, r20
    1840:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    1842:	87 ff       	sbrs	r24, 7
    1844:	0c c0       	rjmp	.+24     	; 0x185e <send_cmd+0x2c>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    1846:	87 e7       	ldi	r24, 0x77	; 119
    1848:	40 e0       	ldi	r20, 0x00	; 0
    184a:	50 e0       	ldi	r21, 0x00	; 0
    184c:	60 e0       	ldi	r22, 0x00	; 0
    184e:	70 e0       	ldi	r23, 0x00	; 0
    1850:	0e 94 19 0c 	call	0x1832	; 0x1832 <send_cmd>
		if (res > 1) return res;
    1854:	82 30       	cpi	r24, 0x02	; 2
    1856:	08 f0       	brcs	.+2      	; 0x185a <send_cmd+0x28>
    1858:	49 c0       	rjmp	.+146    	; 0x18ec <send_cmd+0xba>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    185a:	8f e7       	ldi	r24, 0x7F	; 127
    185c:	d8 22       	and	r13, r24
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card */
	DESELECT();
    185e:	5e 9a       	sbi	0x0b, 6	; 11
	rcv_spi();
    1860:	8f ef       	ldi	r24, 0xFF	; 255
    1862:	8e bd       	out	0x2e, r24	; 46
    1864:	0d b4       	in	r0, 0x2d	; 45
    1866:	07 fe       	sbrs	r0, 7
    1868:	fd cf       	rjmp	.-6      	; 0x1864 <send_cmd+0x32>
    186a:	8e b5       	in	r24, 0x2e	; 46
	SELECT();
    186c:	5e 98       	cbi	0x0b, 6	; 11
	rcv_spi();
    186e:	8f ef       	ldi	r24, 0xFF	; 255
    1870:	8e bd       	out	0x2e, r24	; 46
    1872:	0d b4       	in	r0, 0x2d	; 45
    1874:	07 fe       	sbrs	r0, 7
    1876:	fd cf       	rjmp	.-6      	; 0x1872 <send_cmd+0x40>
    1878:	8e b5       	in	r24, 0x2e	; 46
}
void xmit_spi(BYTE dat)
{
	//TODO
	//send a byte to the slave
	SPDR = dat;
    187a:	de bc       	out	0x2e, r13	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    187c:	0d b4       	in	r0, 0x2d	; 45
    187e:	07 fe       	sbrs	r0, 7
    1880:	fd cf       	rjmp	.-6      	; 0x187c <send_cmd+0x4a>
	SELECT();
	rcv_spi();

	/* Send a command packet */
	xmit_spi(cmd);						/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    1882:	81 2f       	mov	r24, r17
    1884:	99 27       	eor	r25, r25
    1886:	aa 27       	eor	r26, r26
    1888:	bb 27       	eor	r27, r27
}
void xmit_spi(BYTE dat)
{
	//TODO
	//send a byte to the slave
	SPDR = dat;
    188a:	8e bd       	out	0x2e, r24	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    188c:	0d b4       	in	r0, 0x2d	; 45
    188e:	07 fe       	sbrs	r0, 7
    1890:	fd cf       	rjmp	.-6      	; 0x188c <send_cmd+0x5a>
	rcv_spi();

	/* Send a command packet */
	xmit_spi(cmd);						/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    1892:	c8 01       	movw	r24, r16
    1894:	aa 27       	eor	r26, r26
    1896:	bb 27       	eor	r27, r27
}
void xmit_spi(BYTE dat)
{
	//TODO
	//send a byte to the slave
	SPDR = dat;
    1898:	8e bd       	out	0x2e, r24	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    189a:	0d b4       	in	r0, 0x2d	; 45
    189c:	07 fe       	sbrs	r0, 7
    189e:	fd cf       	rjmp	.-6      	; 0x189a <send_cmd+0x68>

	/* Send a command packet */
	xmit_spi(cmd);						/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    18a0:	bb 27       	eor	r27, r27
    18a2:	a1 2f       	mov	r26, r17
    18a4:	90 2f       	mov	r25, r16
    18a6:	8f 2d       	mov	r24, r15
}
void xmit_spi(BYTE dat)
{
	//TODO
	//send a byte to the slave
	SPDR = dat;
    18a8:	8e bd       	out	0x2e, r24	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    18aa:	0d b4       	in	r0, 0x2d	; 45
    18ac:	07 fe       	sbrs	r0, 7
    18ae:	fd cf       	rjmp	.-6      	; 0x18aa <send_cmd+0x78>
}
void xmit_spi(BYTE dat)
{
	//TODO
	//send a byte to the slave
	SPDR = dat;
    18b0:	ee bc       	out	0x2e, r14	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    18b2:	0d b4       	in	r0, 0x2d	; 45
    18b4:	07 fe       	sbrs	r0, 7
    18b6:	fd cf       	rjmp	.-6      	; 0x18b2 <send_cmd+0x80>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    18b8:	80 e4       	ldi	r24, 0x40	; 64
    18ba:	d8 16       	cp	r13, r24
    18bc:	11 f4       	brne	.+4      	; 0x18c2 <send_cmd+0x90>
    18be:	85 e9       	ldi	r24, 0x95	; 149
    18c0:	06 c0       	rjmp	.+12     	; 0x18ce <send_cmd+0x9c>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    18c2:	88 e4       	ldi	r24, 0x48	; 72
    18c4:	d8 16       	cp	r13, r24
    18c6:	11 f4       	brne	.+4      	; 0x18cc <send_cmd+0x9a>
    18c8:	87 e8       	ldi	r24, 0x87	; 135
    18ca:	01 c0       	rjmp	.+2      	; 0x18ce <send_cmd+0x9c>
    18cc:	81 e0       	ldi	r24, 0x01	; 1
}
void xmit_spi(BYTE dat)
{
	//TODO
	//send a byte to the slave
	SPDR = dat;
    18ce:	8e bd       	out	0x2e, r24	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    18d0:	0d b4       	in	r0, 0x2d	; 45
    18d2:	07 fe       	sbrs	r0, 7
    18d4:	fd cf       	rjmp	.-6      	; 0x18d0 <send_cmd+0x9e>
    18d6:	9a e0       	ldi	r25, 0x0A	; 10
	xmit_spi(n);

	/* Receive a command response */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = rcv_spi();
    18d8:	2f ef       	ldi	r18, 0xFF	; 255
    18da:	2e bd       	out	0x2e, r18	; 46
    18dc:	0d b4       	in	r0, 0x2d	; 45
    18de:	07 fe       	sbrs	r0, 7
    18e0:	fd cf       	rjmp	.-6      	; 0x18dc <send_cmd+0xaa>
    18e2:	8e b5       	in	r24, 0x2e	; 46
	} while ((res & 0x80) && --n);
    18e4:	87 ff       	sbrs	r24, 7
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <send_cmd+0xba>
    18e8:	91 50       	subi	r25, 0x01	; 1
    18ea:	b9 f7       	brne	.-18     	; 0x18da <send_cmd+0xa8>

	return res;			/* Return with the response value */
}
    18ec:	1f 91       	pop	r17
    18ee:	0f 91       	pop	r16
    18f0:	ff 90       	pop	r15
    18f2:	ef 90       	pop	r14
    18f4:	df 90       	pop	r13
    18f6:	08 95       	ret

000018f8 <disk_readp>:
	BYTE *buff,		/* Pointer to the read buffer (NULL:Read bytes are forwarded to the stream) */
	DWORD lba,		/* Sector number (LBA) */
	WORD ofs,		/* Byte offset to read from (0..511) */
	WORD cnt		/* Number of bytes to read (ofs + cnt mus be <= 512) */
)
{
    18f8:	ef 92       	push	r14
    18fa:	ff 92       	push	r15
    18fc:	0f 93       	push	r16
    18fe:	1f 93       	push	r17
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	7c 01       	movw	r14, r24
    1906:	e9 01       	movw	r28, r18
	DRESULT res;
	BYTE rc;
	WORD bc;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert to byte address if needed */
    1908:	80 91 1f 01 	lds	r24, 0x011F
    190c:	83 fd       	sbrc	r24, 3
    190e:	07 c0       	rjmp	.+14     	; 0x191e <disk_readp+0x26>
    1910:	39 e0       	ldi	r19, 0x09	; 9
    1912:	44 0f       	add	r20, r20
    1914:	55 1f       	adc	r21, r21
    1916:	66 1f       	adc	r22, r22
    1918:	77 1f       	adc	r23, r23
    191a:	3a 95       	dec	r19
    191c:	d1 f7       	brne	.-12     	; 0x1912 <disk_readp+0x1a>

	res = RES_ERROR;
	if (send_cmd(CMD17, lba) == 0) {		/* READ_SINGLE_BLOCK */
    191e:	81 e5       	ldi	r24, 0x51	; 81
    1920:	0e 94 19 0c 	call	0x1832	; 0x1832 <send_cmd>
    1924:	88 23       	and	r24, r24
    1926:	09 f0       	breq	.+2      	; 0x192a <disk_readp+0x32>
    1928:	3f c0       	rjmp	.+126    	; 0x19a8 <disk_readp+0xb0>
    192a:	80 e3       	ldi	r24, 0x30	; 48
    192c:	95 e7       	ldi	r25, 0x75	; 117

		bc = 30000;
		do {							/* Wait for data packet in timeout of 100ms */
			rc = rcv_spi();
    192e:	3f ef       	ldi	r19, 0xFF	; 255
    1930:	3e bd       	out	0x2e, r19	; 46
    1932:	0d b4       	in	r0, 0x2d	; 45
    1934:	07 fe       	sbrs	r0, 7
    1936:	fd cf       	rjmp	.-6      	; 0x1932 <disk_readp+0x3a>
    1938:	2e b5       	in	r18, 0x2e	; 46
		} while (rc == 0xFF && --bc);
    193a:	2f 3f       	cpi	r18, 0xFF	; 255
    193c:	19 f4       	brne	.+6      	; 0x1944 <disk_readp+0x4c>
    193e:	01 97       	sbiw	r24, 0x01	; 1
    1940:	b9 f7       	brne	.-18     	; 0x1930 <disk_readp+0x38>
    1942:	32 c0       	rjmp	.+100    	; 0x19a8 <disk_readp+0xb0>

		if (rc == 0xFE) {				/* A data packet arrived */
    1944:	2e 3f       	cpi	r18, 0xFE	; 254
    1946:	81 f5       	brne	.+96     	; 0x19a8 <disk_readp+0xb0>
			bc = 514 - ofs - cnt;
    1948:	22 27       	eor	r18, r18
    194a:	33 27       	eor	r19, r19
    194c:	2c 1b       	sub	r18, r28
    194e:	3d 0b       	sbc	r19, r29
    1950:	2e 5f       	subi	r18, 0xFE	; 254
    1952:	3d 4f       	sbci	r19, 0xFD	; 253
    1954:	20 1b       	sub	r18, r16
    1956:	31 0b       	sbc	r19, r17

			/* Skip leading bytes */
			if (ofs) {
    1958:	20 97       	sbiw	r28, 0x00	; 0
    195a:	41 f0       	breq	.+16     	; 0x196c <disk_readp+0x74>
				do rcv_spi(); while (--ofs);
    195c:	8f ef       	ldi	r24, 0xFF	; 255
    195e:	8e bd       	out	0x2e, r24	; 46
    1960:	0d b4       	in	r0, 0x2d	; 45
    1962:	07 fe       	sbrs	r0, 7
    1964:	fd cf       	rjmp	.-6      	; 0x1960 <disk_readp+0x68>
    1966:	9e b5       	in	r25, 0x2e	; 46
    1968:	21 97       	sbiw	r28, 0x01	; 1
    196a:	c9 f7       	brne	.-14     	; 0x195e <disk_readp+0x66>
			}

			/* Receive a part of the sector */
			if (buff) {	/* Store data to the memory */
    196c:	e1 14       	cp	r14, r1
    196e:	f1 04       	cpc	r15, r1
    1970:	79 f0       	breq	.+30     	; 0x1990 <disk_readp+0x98>
				do
					*buff++ = rcv_spi();
    1972:	9f ef       	ldi	r25, 0xFF	; 255
    1974:	9e bd       	out	0x2e, r25	; 46
    1976:	0d b4       	in	r0, 0x2d	; 45
    1978:	07 fe       	sbrs	r0, 7
    197a:	fd cf       	rjmp	.-6      	; 0x1976 <disk_readp+0x7e>
    197c:	8e b5       	in	r24, 0x2e	; 46
    197e:	f7 01       	movw	r30, r14
    1980:	80 83       	st	Z, r24
				while (--cnt);
    1982:	01 50       	subi	r16, 0x01	; 1
    1984:	10 40       	sbci	r17, 0x00	; 0
    1986:	21 f0       	breq	.+8      	; 0x1990 <disk_readp+0x98>
			}

			/* Receive a part of the sector */
			if (buff) {	/* Store data to the memory */
				do
					*buff++ = rcv_spi();
    1988:	08 94       	sec
    198a:	e1 1c       	adc	r14, r1
    198c:	f1 1c       	adc	r15, r1
    198e:	f2 cf       	rjmp	.-28     	; 0x1974 <disk_readp+0x7c>
				while (--cnt);
			} 
			
			/* Skip trailing bytes and CRC */
			do rcv_spi(); while (--bc);
    1990:	8f ef       	ldi	r24, 0xFF	; 255
    1992:	8e bd       	out	0x2e, r24	; 46
    1994:	0d b4       	in	r0, 0x2d	; 45
    1996:	07 fe       	sbrs	r0, 7
    1998:	fd cf       	rjmp	.-6      	; 0x1994 <disk_readp+0x9c>
    199a:	9e b5       	in	r25, 0x2e	; 46
    199c:	21 50       	subi	r18, 0x01	; 1
    199e:	30 40       	sbci	r19, 0x00	; 0
    19a0:	c1 f7       	brne	.-16     	; 0x1992 <disk_readp+0x9a>
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	02 c0       	rjmp	.+4      	; 0x19ac <disk_readp+0xb4>
    19a8:	21 e0       	ldi	r18, 0x01	; 1
    19aa:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	DESELECT();
    19ac:	5e 9a       	sbi	0x0b, 6	; 11
	rcv_spi();
    19ae:	8f ef       	ldi	r24, 0xFF	; 255
    19b0:	8e bd       	out	0x2e, r24	; 46
    19b2:	0d b4       	in	r0, 0x2d	; 45
    19b4:	07 fe       	sbrs	r0, 7
    19b6:	fd cf       	rjmp	.-6      	; 0x19b2 <disk_readp+0xba>
    19b8:	8e b5       	in	r24, 0x2e	; 46
	}

	release_spi();

	return res;
}
    19ba:	c9 01       	movw	r24, r18
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
    19c0:	e6 e0       	ldi	r30, 0x06	; 6
    19c2:	0c 94 b4 0f 	jmp	0x1f68	; 0x1f68 <__epilogue_restores__+0x18>

000019c6 <disk_writep>:

DRESULT disk_writep (
	const BYTE *buff,	/* Pointer to the bytes to be written (NULL:Initiate/Finalize sector write) */
	DWORD sa			/* Number of bytes to send, Sector number (LBA) or zero */
)
{
    19c6:	fc 01       	movw	r30, r24
	static WORD wc;


	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
    19c8:	00 97       	sbiw	r24, 0x00	; 0
    19ca:	09 f1       	breq	.+66     	; 0x1a0e <disk_writep+0x48>
		bc = (WORD)sa;
    19cc:	20 91 1d 01 	lds	r18, 0x011D
    19d0:	30 91 1e 01 	lds	r19, 0x011E
    19d4:	0a c0       	rjmp	.+20     	; 0x19ea <disk_writep+0x24>
		while (bc && wc) {		/* Send data bytes to the card */
			xmit_spi(*buff++);
    19d6:	80 81       	ld	r24, Z
}
void xmit_spi(BYTE dat)
{
	//TODO
	//send a byte to the slave
	SPDR = dat;
    19d8:	8e bd       	out	0x2e, r24	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    19da:	0d b4       	in	r0, 0x2d	; 45
    19dc:	07 fe       	sbrs	r0, 7
    19de:	fd cf       	rjmp	.-6      	; 0x19da <disk_writep+0x14>
	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
		bc = (WORD)sa;
		while (bc && wc) {		/* Send data bytes to the card */
			xmit_spi(*buff++);
    19e0:	31 96       	adiw	r30, 0x01	; 1
			wc--; bc--;
    19e2:	41 50       	subi	r20, 0x01	; 1
    19e4:	50 40       	sbci	r21, 0x00	; 0
    19e6:	21 50       	subi	r18, 0x01	; 1
    19e8:	30 40       	sbci	r19, 0x00	; 0

	res = RES_ERROR;

	if (buff) {		/* Send data bytes */
		bc = (WORD)sa;
		while (bc && wc) {		/* Send data bytes to the card */
    19ea:	41 15       	cp	r20, r1
    19ec:	51 05       	cpc	r21, r1
    19ee:	29 f4       	brne	.+10     	; 0x19fa <disk_writep+0x34>
    19f0:	30 93 1e 01 	sts	0x011E, r19
    19f4:	20 93 1d 01 	sts	0x011D, r18
    19f8:	07 c0       	rjmp	.+14     	; 0x1a08 <disk_writep+0x42>
    19fa:	21 15       	cp	r18, r1
    19fc:	31 05       	cpc	r19, r1
    19fe:	59 f7       	brne	.-42     	; 0x19d6 <disk_writep+0x10>
    1a00:	10 92 1e 01 	sts	0x011E, r1
    1a04:	10 92 1d 01 	sts	0x011D, r1
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	5d c0       	rjmp	.+186    	; 0x1ac8 <disk_writep+0x102>
			xmit_spi(*buff++);
			wc--; bc--;
		}
		res = RES_OK;
	} else {
		if (sa) {	/* Initiate sector write process */
    1a0e:	41 15       	cp	r20, r1
    1a10:	51 05       	cpc	r21, r1
    1a12:	61 05       	cpc	r22, r1
    1a14:	71 05       	cpc	r23, r1
    1a16:	21 f1       	breq	.+72     	; 0x1a60 <disk_writep+0x9a>
			if (!(CardType & CT_BLOCK)) sa *= 512;	/* Convert to byte address if needed */
    1a18:	80 91 1f 01 	lds	r24, 0x011F
    1a1c:	83 fd       	sbrc	r24, 3
    1a1e:	07 c0       	rjmp	.+14     	; 0x1a2e <disk_writep+0x68>
    1a20:	e9 e0       	ldi	r30, 0x09	; 9
    1a22:	44 0f       	add	r20, r20
    1a24:	55 1f       	adc	r21, r21
    1a26:	66 1f       	adc	r22, r22
    1a28:	77 1f       	adc	r23, r23
    1a2a:	ea 95       	dec	r30
    1a2c:	d1 f7       	brne	.-12     	; 0x1a22 <disk_writep+0x5c>
			if (send_cmd(CMD24, sa) == 0) {			/* WRITE_SINGLE_BLOCK */
    1a2e:	88 e5       	ldi	r24, 0x58	; 88
    1a30:	0e 94 19 0c 	call	0x1832	; 0x1832 <send_cmd>
    1a34:	88 23       	and	r24, r24
    1a36:	19 f0       	breq	.+6      	; 0x1a3e <disk_writep+0x78>
    1a38:	21 e0       	ldi	r18, 0x01	; 1
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	45 c0       	rjmp	.+138    	; 0x1ac8 <disk_writep+0x102>
}
void xmit_spi(BYTE dat)
{
	//TODO
	//send a byte to the slave
	SPDR = dat;
    1a3e:	8f ef       	ldi	r24, 0xFF	; 255
    1a40:	8e bd       	out	0x2e, r24	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    1a42:	0d b4       	in	r0, 0x2d	; 45
    1a44:	07 fe       	sbrs	r0, 7
    1a46:	fd cf       	rjmp	.-6      	; 0x1a42 <disk_writep+0x7c>
}
void xmit_spi(BYTE dat)
{
	//TODO
	//send a byte to the slave
	SPDR = dat;
    1a48:	8e ef       	ldi	r24, 0xFE	; 254
    1a4a:	8e bd       	out	0x2e, r24	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    1a4c:	0d b4       	in	r0, 0x2d	; 45
    1a4e:	07 fe       	sbrs	r0, 7
    1a50:	fd cf       	rjmp	.-6      	; 0x1a4c <disk_writep+0x86>
	} else {
		if (sa) {	/* Initiate sector write process */
			if (!(CardType & CT_BLOCK)) sa *= 512;	/* Convert to byte address if needed */
			if (send_cmd(CMD24, sa) == 0) {			/* WRITE_SINGLE_BLOCK */
				xmit_spi(0xFF); xmit_spi(0xFE);		/* Data block header */
				wc = 512;							/* Set byte counter */
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	92 e0       	ldi	r25, 0x02	; 2
    1a56:	90 93 1e 01 	sts	0x011E, r25
    1a5a:	80 93 1d 01 	sts	0x011D, r24
    1a5e:	d4 cf       	rjmp	.-88     	; 0x1a08 <disk_writep+0x42>
				res = RES_OK;
			}
		} else {	/* Finalize sector write process */
			bc = wc + 2;
    1a60:	80 91 1d 01 	lds	r24, 0x011D
    1a64:	90 91 1e 01 	lds	r25, 0x011E
    1a68:	02 96       	adiw	r24, 0x02	; 2
    1a6a:	05 c0       	rjmp	.+10     	; 0x1a76 <disk_writep+0xb0>
}
void xmit_spi(BYTE dat)
{
	//TODO
	//send a byte to the slave
	SPDR = dat;
    1a6c:	1e bc       	out	0x2e, r1	; 46
	
	//wait for the reception to complete
	while (!(SPSR & (1<<SPIF)))
    1a6e:	0d b4       	in	r0, 0x2d	; 45
    1a70:	07 fe       	sbrs	r0, 7
    1a72:	fd cf       	rjmp	.-6      	; 0x1a6e <disk_writep+0xa8>
    1a74:	01 97       	sbiw	r24, 0x01	; 1
				wc = 512;							/* Set byte counter */
				res = RES_OK;
			}
		} else {	/* Finalize sector write process */
			bc = wc + 2;
			while (bc--) xmit_spi(0);	/* Fill left bytes and CRC with zeros */
    1a76:	00 97       	sbiw	r24, 0x00	; 0
    1a78:	c9 f7       	brne	.-14     	; 0x1a6c <disk_writep+0xa6>
			if ((rcv_spi() & 0x1F) == 0x05) {	/* Receive data resp and wait for end of write process in timeout of 300ms */
    1a7a:	8f ef       	ldi	r24, 0xFF	; 255
    1a7c:	8e bd       	out	0x2e, r24	; 46
    1a7e:	0d b4       	in	r0, 0x2d	; 45
    1a80:	07 fe       	sbrs	r0, 7
    1a82:	fd cf       	rjmp	.-6      	; 0x1a7e <disk_writep+0xb8>
    1a84:	8e b5       	in	r24, 0x2e	; 46
    1a86:	8f 71       	andi	r24, 0x1F	; 31
    1a88:	85 30       	cpi	r24, 0x05	; 5
    1a8a:	a9 f4       	brne	.+42     	; 0x1ab6 <disk_writep+0xf0>
    1a8c:	48 ee       	ldi	r20, 0xE8	; 232
    1a8e:	5d ef       	ldi	r21, 0xFD	; 253
				for (bc = 65000; rcv_spi() != 0xFF && bc; bc--) ;	/* Wait ready */
    1a90:	9f ef       	ldi	r25, 0xFF	; 255
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <disk_writep+0xd2>
    1a94:	41 50       	subi	r20, 0x01	; 1
    1a96:	50 40       	sbci	r21, 0x00	; 0
    1a98:	9e bd       	out	0x2e, r25	; 46
    1a9a:	0d b4       	in	r0, 0x2d	; 45
    1a9c:	07 fe       	sbrs	r0, 7
    1a9e:	fd cf       	rjmp	.-6      	; 0x1a9a <disk_writep+0xd4>
    1aa0:	8e b5       	in	r24, 0x2e	; 46
    1aa2:	8f 3f       	cpi	r24, 0xFF	; 255
    1aa4:	21 f0       	breq	.+8      	; 0x1aae <disk_writep+0xe8>
    1aa6:	41 15       	cp	r20, r1
    1aa8:	51 05       	cpc	r21, r1
    1aaa:	a1 f7       	brne	.-24     	; 0x1a94 <disk_writep+0xce>
    1aac:	04 c0       	rjmp	.+8      	; 0x1ab6 <disk_writep+0xf0>
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	45 2b       	or	r20, r21
    1ab4:	11 f4       	brne	.+4      	; 0x1aba <disk_writep+0xf4>
    1ab6:	21 e0       	ldi	r18, 0x01	; 1
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	DESELECT();
    1aba:	5e 9a       	sbi	0x0b, 6	; 11
	rcv_spi();
    1abc:	8f ef       	ldi	r24, 0xFF	; 255
    1abe:	8e bd       	out	0x2e, r24	; 46
    1ac0:	0d b4       	in	r0, 0x2d	; 45
    1ac2:	07 fe       	sbrs	r0, 7
    1ac4:	fd cf       	rjmp	.-6      	; 0x1ac0 <disk_writep+0xfa>
    1ac6:	8e b5       	in	r24, 0x2e	; 46
			release_spi();
		}
	}

	return res;
}
    1ac8:	c9 01       	movw	r24, r18
    1aca:	08 95       	ret

00001acc <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (void)
{
    1acc:	a4 e0       	ldi	r26, 0x04	; 4
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	ec e6       	ldi	r30, 0x6C	; 108
    1ad2:	fd e0       	ldi	r31, 0x0D	; 13
    1ad4:	0c 94 96 0f 	jmp	0x1f2c	; 0x1f2c <__prologue_saves__+0x14>
	BYTE n, cmd, ty, ocr[4];
	WORD tmr;


	init_spi();
    1ad8:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <init_spi>

#if _WRITE_FUNC
	if (MMC_SEL) disk_writep(0, 0);		/* Finalize write process if it is in progress */
    1adc:	2c 99       	sbic	0x05, 4	; 5
    1ade:	08 c0       	rjmp	.+16     	; 0x1af0 <disk_initialize+0x24>
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	40 e0       	ldi	r20, 0x00	; 0
    1ae6:	50 e0       	ldi	r21, 0x00	; 0
    1ae8:	60 e0       	ldi	r22, 0x00	; 0
    1aea:	70 e0       	ldi	r23, 0x00	; 0
    1aec:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <disk_writep>
    1af0:	84 e6       	ldi	r24, 0x64	; 100
#endif
	for (n = 100; n; n--) rcv_spi();	/* Dummy clocks */
    1af2:	9f ef       	ldi	r25, 0xFF	; 255
    1af4:	9e bd       	out	0x2e, r25	; 46
    1af6:	0d b4       	in	r0, 0x2d	; 45
    1af8:	07 fe       	sbrs	r0, 7
    1afa:	fd cf       	rjmp	.-6      	; 0x1af6 <disk_initialize+0x2a>
    1afc:	2e b5       	in	r18, 0x2e	; 46
    1afe:	81 50       	subi	r24, 0x01	; 1
    1b00:	c9 f7       	brne	.-14     	; 0x1af4 <disk_initialize+0x28>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    1b02:	80 e4       	ldi	r24, 0x40	; 64
    1b04:	40 e0       	ldi	r20, 0x00	; 0
    1b06:	50 e0       	ldi	r21, 0x00	; 0
    1b08:	60 e0       	ldi	r22, 0x00	; 0
    1b0a:	70 e0       	ldi	r23, 0x00	; 0
    1b0c:	0e 94 19 0c 	call	0x1832	; 0x1832 <send_cmd>
    1b10:	81 30       	cpi	r24, 0x01	; 1
    1b12:	09 f0       	breq	.+2      	; 0x1b16 <disk_initialize+0x4a>
    1b14:	6e c0       	rjmp	.+220    	; 0x1bf2 <disk_initialize+0x126>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
    1b16:	88 e4       	ldi	r24, 0x48	; 72
    1b18:	4a ea       	ldi	r20, 0xAA	; 170
    1b1a:	51 e0       	ldi	r21, 0x01	; 1
    1b1c:	60 e0       	ldi	r22, 0x00	; 0
    1b1e:	70 e0       	ldi	r23, 0x00	; 0
    1b20:	0e 94 19 0c 	call	0x1832	; 0x1832 <send_cmd>
    1b24:	81 30       	cpi	r24, 0x01	; 1
    1b26:	09 f0       	breq	.+2      	; 0x1b2a <disk_initialize+0x5e>
    1b28:	42 c0       	rjmp	.+132    	; 0x1bae <disk_initialize+0xe2>
    1b2a:	6e 01       	movw	r12, r28
    1b2c:	08 94       	sec
    1b2e:	c1 1c       	adc	r12, r1
    1b30:	d1 1c       	adc	r13, r1
    1b32:	76 01       	movw	r14, r12
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
    1b34:	9f ef       	ldi	r25, 0xFF	; 255
    1b36:	9e 01       	movw	r18, r28
    1b38:	2b 5f       	subi	r18, 0xFB	; 251
    1b3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b3c:	9e bd       	out	0x2e, r25	; 46
    1b3e:	0d b4       	in	r0, 0x2d	; 45
    1b40:	07 fe       	sbrs	r0, 7
    1b42:	fd cf       	rjmp	.-6      	; 0x1b3e <disk_initialize+0x72>
    1b44:	8e b5       	in	r24, 0x2e	; 46
    1b46:	f7 01       	movw	r30, r14
    1b48:	81 93       	st	Z+, r24
    1b4a:	7f 01       	movw	r14, r30
    1b4c:	e2 17       	cp	r30, r18
    1b4e:	f3 07       	cpc	r31, r19
    1b50:	a9 f7       	brne	.-22     	; 0x1b3c <disk_initialize+0x70>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    1b52:	8b 81       	ldd	r24, Y+3	; 0x03
    1b54:	81 30       	cpi	r24, 0x01	; 1
    1b56:	09 f0       	breq	.+2      	; 0x1b5a <disk_initialize+0x8e>
    1b58:	4c c0       	rjmp	.+152    	; 0x1bf2 <disk_initialize+0x126>
    1b5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b5c:	8a 3a       	cpi	r24, 0xAA	; 170
    1b5e:	09 f0       	breq	.+2      	; 0x1b62 <disk_initialize+0x96>
    1b60:	48 c0       	rjmp	.+144    	; 0x1bf2 <disk_initialize+0x126>
    1b62:	00 ee       	ldi	r16, 0xE0	; 224
    1b64:	1e e2       	ldi	r17, 0x2E	; 46
    1b66:	04 c0       	rjmp	.+8      	; 0x1b70 <disk_initialize+0xa4>
				for (tmr = 12000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) ;	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    1b68:	01 50       	subi	r16, 0x01	; 1
    1b6a:	10 40       	sbci	r17, 0x00	; 0
    1b6c:	09 f4       	brne	.+2      	; 0x1b70 <disk_initialize+0xa4>
    1b6e:	41 c0       	rjmp	.+130    	; 0x1bf2 <disk_initialize+0x126>
    1b70:	89 ee       	ldi	r24, 0xE9	; 233
    1b72:	40 e0       	ldi	r20, 0x00	; 0
    1b74:	50 e0       	ldi	r21, 0x00	; 0
    1b76:	60 e0       	ldi	r22, 0x00	; 0
    1b78:	70 e4       	ldi	r23, 0x40	; 64
    1b7a:	0e 94 19 0c 	call	0x1832	; 0x1832 <send_cmd>
    1b7e:	88 23       	and	r24, r24
    1b80:	99 f7       	brne	.-26     	; 0x1b68 <disk_initialize+0x9c>
    1b82:	49 c0       	rjmp	.+146    	; 0x1c16 <disk_initialize+0x14a>
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
    1b84:	9f ef       	ldi	r25, 0xFF	; 255
    1b86:	9e bd       	out	0x2e, r25	; 46
    1b88:	0d b4       	in	r0, 0x2d	; 45
    1b8a:	07 fe       	sbrs	r0, 7
    1b8c:	fd cf       	rjmp	.-6      	; 0x1b88 <disk_initialize+0xbc>
    1b8e:	8e b5       	in	r24, 0x2e	; 46
    1b90:	f6 01       	movw	r30, r12
    1b92:	81 93       	st	Z+, r24
    1b94:	6f 01       	movw	r12, r30
    1b96:	ee 15       	cp	r30, r14
    1b98:	ff 05       	cpc	r31, r15
    1b9a:	a9 f7       	brne	.-22     	; 0x1b86 <disk_initialize+0xba>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 (HC or SC) */
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
    1b9e:	86 fd       	sbrc	r24, 6
    1ba0:	03 c0       	rjmp	.+6      	; 0x1ba8 <disk_initialize+0xdc>
    1ba2:	94 e0       	ldi	r25, 0x04	; 4
    1ba4:	f9 2e       	mov	r15, r25
    1ba6:	26 c0       	rjmp	.+76     	; 0x1bf4 <disk_initialize+0x128>
    1ba8:	8c e0       	ldi	r24, 0x0C	; 12
    1baa:	f8 2e       	mov	r15, r24
    1bac:	23 c0       	rjmp	.+70     	; 0x1bf4 <disk_initialize+0x128>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    1bae:	89 ee       	ldi	r24, 0xE9	; 233
    1bb0:	40 e0       	ldi	r20, 0x00	; 0
    1bb2:	50 e0       	ldi	r21, 0x00	; 0
    1bb4:	60 e0       	ldi	r22, 0x00	; 0
    1bb6:	70 e0       	ldi	r23, 0x00	; 0
    1bb8:	0e 94 19 0c 	call	0x1832	; 0x1832 <send_cmd>
    1bbc:	82 30       	cpi	r24, 0x02	; 2
    1bbe:	28 f0       	brcs	.+10     	; 0x1bca <disk_initialize+0xfe>
    1bc0:	b1 e4       	ldi	r27, 0x41	; 65
    1bc2:	eb 2e       	mov	r14, r27
    1bc4:	ff 24       	eor	r15, r15
    1bc6:	f3 94       	inc	r15
    1bc8:	04 c0       	rjmp	.+8      	; 0x1bd2 <disk_initialize+0x106>
    1bca:	a9 ee       	ldi	r26, 0xE9	; 233
    1bcc:	ea 2e       	mov	r14, r26
    1bce:	f2 e0       	ldi	r31, 0x02	; 2
    1bd0:	ff 2e       	mov	r15, r31
    1bd2:	08 ea       	ldi	r16, 0xA8	; 168
    1bd4:	11 e6       	ldi	r17, 0x61	; 97
    1bd6:	03 c0       	rjmp	.+6      	; 0x1bde <disk_initialize+0x112>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 25000; tmr && send_cmd(cmd, 0); tmr--) ;	/* Wait for leaving idle state */
    1bd8:	01 50       	subi	r16, 0x01	; 1
    1bda:	10 40       	sbci	r17, 0x00	; 0
    1bdc:	51 f0       	breq	.+20     	; 0x1bf2 <disk_initialize+0x126>
    1bde:	8e 2d       	mov	r24, r14
    1be0:	40 e0       	ldi	r20, 0x00	; 0
    1be2:	50 e0       	ldi	r21, 0x00	; 0
    1be4:	60 e0       	ldi	r22, 0x00	; 0
    1be6:	70 e0       	ldi	r23, 0x00	; 0
    1be8:	0e 94 19 0c 	call	0x1832	; 0x1832 <send_cmd>
    1bec:	88 23       	and	r24, r24
    1bee:	a1 f7       	brne	.-24     	; 0x1bd8 <disk_initialize+0x10c>
    1bf0:	1d c0       	rjmp	.+58     	; 0x1c2c <disk_initialize+0x160>
    1bf2:	ff 24       	eor	r15, r15
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    1bf4:	f0 92 1f 01 	sts	0x011F, r15
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	DESELECT();
    1bf8:	5e 9a       	sbi	0x0b, 6	; 11
	rcv_spi();
    1bfa:	8f ef       	ldi	r24, 0xFF	; 255
    1bfc:	8e bd       	out	0x2e, r24	; 46
    1bfe:	0d b4       	in	r0, 0x2d	; 45
    1c00:	07 fe       	sbrs	r0, 7
    1c02:	fd cf       	rjmp	.-6      	; 0x1bfe <disk_initialize+0x132>
    1c04:	8e b5       	in	r24, 0x2e	; 46
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	ff 20       	and	r15, r15
    1c0a:	09 f4       	brne	.+2      	; 0x1c0e <disk_initialize+0x142>
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
	}
	CardType = ty;
	release_spi();

	return ty ? 0 : STA_NOINIT;
}
    1c0e:	24 96       	adiw	r28, 0x04	; 4
    1c10:	e8 e0       	ldi	r30, 0x08	; 8
    1c12:	0c 94 b2 0f 	jmp	0x1f64	; 0x1f64 <__epilogue_restores__+0x14>
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 12000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) ;	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    1c16:	8a e7       	ldi	r24, 0x7A	; 122
    1c18:	40 e0       	ldi	r20, 0x00	; 0
    1c1a:	50 e0       	ldi	r21, 0x00	; 0
    1c1c:	60 e0       	ldi	r22, 0x00	; 0
    1c1e:	70 e0       	ldi	r23, 0x00	; 0
    1c20:	0e 94 19 0c 	call	0x1832	; 0x1832 <send_cmd>
    1c24:	88 23       	and	r24, r24
    1c26:	09 f4       	brne	.+2      	; 0x1c2a <disk_initialize+0x15e>
    1c28:	ad cf       	rjmp	.-166    	; 0x1b84 <disk_initialize+0xb8>
    1c2a:	e3 cf       	rjmp	.-58     	; 0x1bf2 <disk_initialize+0x126>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 25000; tmr && send_cmd(cmd, 0); tmr--) ;	/* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0)			/* Set R/W block length to 512 */
    1c2c:	80 e5       	ldi	r24, 0x50	; 80
    1c2e:	40 e0       	ldi	r20, 0x00	; 0
    1c30:	52 e0       	ldi	r21, 0x02	; 2
    1c32:	60 e0       	ldi	r22, 0x00	; 0
    1c34:	70 e0       	ldi	r23, 0x00	; 0
    1c36:	0e 94 19 0c 	call	0x1832	; 0x1832 <send_cmd>
    1c3a:	88 23       	and	r24, r24
    1c3c:	d1 f6       	brne	.-76     	; 0x1bf2 <disk_initialize+0x126>
    1c3e:	da cf       	rjmp	.-76     	; 0x1bf4 <disk_initialize+0x128>

00001c40 <LCD_write>:
	
}

void LCD_write(unsigned char _byte)
{
	ENABLE();										// Setam Pinul E pe high
    1c40:	42 9a       	sbi	0x08, 2	; 8
	E_DELAY();										// Asteptam o perioada de timp T				
    1c42:	00 00       	nop
    1c44:	00 00       	nop
    1c46:	00 00       	nop
    1c48:	00 c0       	rjmp	.+0      	; 0x1c4a <LCD_write+0xa>
	
	PORTC = (PORTC & 0x87) | ((_byte & 0xf0) >> 1);
    1c4a:	48 b1       	in	r20, 0x08	; 8
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	9c 01       	movw	r18, r24
    1c50:	20 7f       	andi	r18, 0xF0	; 240
    1c52:	30 70       	andi	r19, 0x00	; 0
    1c54:	35 95       	asr	r19
    1c56:	27 95       	ror	r18
    1c58:	47 78       	andi	r20, 0x87	; 135
    1c5a:	42 2b       	or	r20, r18
    1c5c:	48 b9       	out	0x08, r20	; 8
	//PORTC = ((_byte & 0xf0) >> 1);	
	
	DISABLE();										// Setam Pinul E pe low				
    1c5e:	42 98       	cbi	0x08, 2	; 8
	E_DELAY();										// Asteptam o perioada de timp T
    1c60:	00 00       	nop
    1c62:	00 00       	nop
    1c64:	00 00       	nop
    1c66:	00 c0       	rjmp	.+0      	; 0x1c68 <LCD_write+0x28>
	
	
	
	ENABLE();										// Setam Pinul E pe high
    1c68:	42 9a       	sbi	0x08, 2	; 8
	E_DELAY();										// Asteptam o perioada de timp T				
    1c6a:	00 00       	nop
    1c6c:	00 00       	nop
    1c6e:	00 00       	nop
    1c70:	00 c0       	rjmp	.+0      	; 0x1c72 <LCD_write+0x32>
	
	PORTC = (PORTC & 0x87) | ((_byte & 0x0f) << 3);
    1c72:	28 b1       	in	r18, 0x08	; 8
    1c74:	8f 70       	andi	r24, 0x0F	; 15
    1c76:	90 70       	andi	r25, 0x00	; 0
    1c78:	33 e0       	ldi	r19, 0x03	; 3
    1c7a:	88 0f       	add	r24, r24
    1c7c:	99 1f       	adc	r25, r25
    1c7e:	3a 95       	dec	r19
    1c80:	e1 f7       	brne	.-8      	; 0x1c7a <LCD_write+0x3a>
    1c82:	27 78       	andi	r18, 0x87	; 135
    1c84:	28 2b       	or	r18, r24
    1c86:	28 b9       	out	0x08, r18	; 8
	//PORTC = ((_byte & 0x0f) << 3);
	
	
	DISABLE();										// Setam Pinul E pe low				
    1c88:	42 98       	cbi	0x08, 2	; 8
	E_DELAY();										// Asteptam o perioada de timp T
    1c8a:	00 00       	nop
    1c8c:	00 00       	nop
    1c8e:	00 00       	nop
    1c90:	00 c0       	rjmp	.+0      	; 0x1c92 <LCD_write+0x52>
	// scriem cei mai putin semnificativi 4 biti pe firele de date
	
	// Setam Pinul E pe high
	// Asteptam o perioada de timp T
	// Setam Pinul E pe low
}
    1c92:	08 95       	ret

00001c94 <LCD_waitNotBusy>:

void LCD_waitNotBusy()
{	
	unsigned char _loop = 1;

	LcdDATA_DDR &= ~(1<<LcdD7);	// Setam pinii de date de la LCD pe in pt a citi busy flag
    1c94:	3e 98       	cbi	0x07, 6	; 7
	LcdDATA_PORT &= ~(1<<LcdD7); 	// Dezactivam pullup resistor pentru pinii de in
    1c96:	46 98       	cbi	0x08, 6	; 8
	
	LcdCMD_PORT &= ~(1<<LcdE);					// Setam pin-ul e pe low; ar trebui sa fie deja low, doar ne asiguram
    1c98:	42 98       	cbi	0x08, 2	; 8
	LcdCMD_PORT &= ~(1<<LcdRS);					// Setam pinul RS pe low
    1c9a:	40 98       	cbi	0x08, 0	; 8
	LcdCMD_PORT |=  (1<<LcdRW);					// Setam pinul RW pe high (acum suntem in modul de interogare busy/adr)
    1c9c:	41 9a       	sbi	0x08, 1	; 8
	
	while (_loop)
	{	
		ENABLE();										// Setam Pinul E pe high
    1c9e:	42 9a       	sbi	0x08, 2	; 8
		E_DELAY();										// Asteptam o perioada de timp T				
    1ca0:	00 00       	nop
    1ca2:	00 00       	nop
    1ca4:	00 00       	nop
    1ca6:	00 c0       	rjmp	.+0      	; 0x1ca8 <LCD_waitNotBusy+0x14>
		_loop = LcdDATA_PIN & (1<<LcdD7);				// Citim busy flag-ul
    1ca8:	86 b1       	in	r24, 0x06	; 6
		DISABLE();										// Setam Pinul E pe low		
    1caa:	42 98       	cbi	0x08, 2	; 8
	

		ENABLE();										// Setam Pinul E pe high
    1cac:	42 9a       	sbi	0x08, 2	; 8
		E_DELAY();										// Asteptam o perioada de timp T				
    1cae:	00 00       	nop
    1cb0:	00 00       	nop
    1cb2:	00 00       	nop
    1cb4:	00 c0       	rjmp	.+0      	; 0x1cb6 <LCD_waitNotBusy+0x22>
		DISABLE();										// Setam Pinul E pe low				
    1cb6:	42 98       	cbi	0x08, 2	; 8
		E_DELAY();										// Asteptam o perioada de timp T	
    1cb8:	00 00       	nop
    1cba:	00 00       	nop
    1cbc:	00 00       	nop
    1cbe:	00 c0       	rjmp	.+0      	; 0x1cc0 <LCD_waitNotBusy+0x2c>
	
	LcdCMD_PORT &= ~(1<<LcdE);					// Setam pin-ul e pe low; ar trebui sa fie deja low, doar ne asiguram
	LcdCMD_PORT &= ~(1<<LcdRS);					// Setam pinul RS pe low
	LcdCMD_PORT |=  (1<<LcdRW);					// Setam pinul RW pe high (acum suntem in modul de interogare busy/adr)
	
	while (_loop)
    1cc0:	86 fd       	sbrc	r24, 6
    1cc2:	ed cf       	rjmp	.-38     	; 0x1c9e <LCD_waitNotBusy+0xa>
		ENABLE();										// Setam Pinul E pe high
		E_DELAY();										// Asteptam o perioada de timp T				
		DISABLE();										// Setam Pinul E pe low				
		E_DELAY();										// Asteptam o perioada de timp T	
	}
	LcdDATA_DDR |= (1<<LcdD7); // Setam Portul de LCD ca port de iesire la loc*/
    1cc4:	3e 9a       	sbi	0x07, 6	; 7
}
    1cc6:	08 95       	ret

00001cc8 <LCD_writeData>:
	
}

/* Trimite date catre LCD pentru afisare	*/
void LCD_writeData(unsigned char _data)
{
    1cc8:	1f 93       	push	r17
    1cca:	18 2f       	mov	r17, r24
	/* TODO */
	// similar cu LCD_writeInstruction, dar pentru scriere date	
	LCD_waitNotBusy();
    1ccc:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_waitNotBusy>
	
	RS_HIGH();
    1cd0:	40 9a       	sbi	0x08, 0	; 8
	RW_LOW();
    1cd2:	41 98       	cbi	0x08, 1	; 8
	LCD_write(_data);
    1cd4:	81 2f       	mov	r24, r17
    1cd6:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_write>
	
}
    1cda:	1f 91       	pop	r17
    1cdc:	08 95       	ret

00001cde <LCD_writeInstruction>:
	
}

/* Trimite o instructiune catre lcd (vezi datasheet) */
void LCD_writeInstruction(unsigned char _instruction)
{				
    1cde:	1f 93       	push	r17
    1ce0:	18 2f       	mov	r17, r24
	/* TODO */					
	// asteptam ca LCD-ul sa fie liber sa primeasca comenzile	
	// setam pinul RS pe low (low=instructiuni, high=date)
	// setam pinul RW pe low (suntem in modul de comenzi acum)
	// apelam procedura ce trimite byte-ul pe firele de date, LCD_write	
	LCD_waitNotBusy();
    1ce2:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_waitNotBusy>
	
	RS_LOW();
    1ce6:	40 98       	cbi	0x08, 0	; 8
	RW_LOW();
    1ce8:	41 98       	cbi	0x08, 1	; 8
	LCD_write(_instruction);
    1cea:	81 2f       	mov	r24, r17
    1cec:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <LCD_write>
	
}
    1cf0:	1f 91       	pop	r17
    1cf2:	08 95       	ret

00001cf4 <LCD_init>:
 * IMPLEMENTARE API LCD.     *
 *****************************/

void LCD_init()
{
	LcdDATA_DDR |=  (1<<LcdD4)|(1<<LcdD5)|(1<<LcdD6)|(1<<LcdD7);	// Setam pinii de date ca pini de iesire
    1cf4:	87 b1       	in	r24, 0x07	; 7
    1cf6:	88 67       	ori	r24, 0x78	; 120
    1cf8:	87 b9       	out	0x07, r24	; 7
	LcdCMD_DDR  |=  (1<<LcdRS)|(1<<LcdRW)|(1<<LcdE);				// Setam pinii de comenzi ca pini de iesire
    1cfa:	87 b1       	in	r24, 0x07	; 7
    1cfc:	87 60       	ori	r24, 0x07	; 7
    1cfe:	87 b9       	out	0x07, r24	; 7

	LCD_waitNotBusy();
    1d00:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_waitNotBusy>
	
	LcdCMD_PORT   &= ~(1<<LcdRS);								// Setam linia RS pe low
    1d04:	40 98       	cbi	0x08, 0	; 8
	LcdCMD_PORT   &= ~(1<<LcdRW);								// Setam linia RW pe low (acum suntem in modul de trimis instructiuni)
    1d06:	41 98       	cbi	0x08, 1	; 8
	LcdDATA_PORT  &= ~(1<<LcdD4)&~(1<<LcdD6)&~(1<<LcdD7); 		// Specificam ca vrem 4 fire de date, prima comanda (LcdD5 activ, restul nu)
    1d08:	88 b1       	in	r24, 0x08	; 8
    1d0a:	87 79       	andi	r24, 0x97	; 151
    1d0c:	88 b9       	out	0x08, r24	; 8
	LcdDATA_PORT  |=  (1<<LcdD5);								// Setam pinii de comenzi ca pini de iesire
    1d0e:	44 9a       	sbi	0x08, 4	; 8
	
	
	ENABLE();									// Setam linia E(nable) pe high; aceasta ii specifica LCD-ului sa preia datele
    1d10:	42 9a       	sbi	0x08, 2	; 8
	E_DELAY(); 									// Asteptam o perioada de timp T
    1d12:	00 00       	nop
    1d14:	00 00       	nop
    1d16:	00 00       	nop
    1d18:	00 c0       	rjmp	.+0      	; 0x1d1a <LCD_init+0x26>
	DISABLE();									// Setam linia E(nable) pe low; transferul s-a terminat
    1d1a:	42 98       	cbi	0x08, 2	; 8

	
	LCD_writeInstruction(LCD_INSTR_4wire); 		// Incarcam comanda: 4 bit data, 2 lines, 5x8 font
    1d1c:	88 e2       	ldi	r24, 0x28	; 40
    1d1e:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_writeInstruction>
	LCD_writeInstruction(LCD_INSTR_display); 	// Display On, Cursor On, Blinking On
    1d22:	8c e0       	ldi	r24, 0x0C	; 12
    1d24:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_writeInstruction>
	LCD_writeInstruction(LCD_INSTR_incnoshift);	// Increment, no shift
    1d28:	86 e0       	ldi	r24, 0x06	; 6
    1d2a:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_writeInstruction>
	LCD_writeInstruction(LCD_INSTR_clearDisplay);// Clear Display
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_writeInstruction>
	
}
    1d34:	08 95       	ret

00001d36 <LCD_waitInstructions>:

void LCD_waitInstructions(unsigned char _instructions)
{
	while (_instructions--)
		;
}
    1d36:	08 95       	ret

00001d38 <LCD_printDecimal2u>:


void LCD_printDecimal2u(unsigned int _n)
{
    1d38:	0f 93       	push	r16
    1d3a:	1f 93       	push	r17
    1d3c:	64 e6       	ldi	r22, 0x64	; 100
    1d3e:	70 e0       	ldi	r23, 0x00	; 0
    1d40:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__udivmodhi4>
    1d44:	18 2f       	mov	r17, r24
    1d46:	09 2f       	mov	r16, r25
	while(_n>=10){
		tmp++;
		_n-=10;
	}

	LCD_writeData(tmp+'0');
    1d48:	6a e0       	ldi	r22, 0x0A	; 10
    1d4a:	70 e0       	ldi	r23, 0x00	; 0
    1d4c:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__udivmodhi4>
    1d50:	86 2f       	mov	r24, r22
    1d52:	80 5d       	subi	r24, 0xD0	; 208
    1d54:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_writeData>
	LCD_writeData(_n+'0');
    1d58:	81 2f       	mov	r24, r17
    1d5a:	90 2f       	mov	r25, r16
    1d5c:	6a e0       	ldi	r22, 0x0A	; 10
    1d5e:	70 e0       	ldi	r23, 0x00	; 0
    1d60:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__udivmodhi4>
    1d64:	80 5d       	subi	r24, 0xD0	; 208
    1d66:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_writeData>
}
    1d6a:	1f 91       	pop	r17
    1d6c:	0f 91       	pop	r16
    1d6e:	08 95       	ret

00001d70 <LCD_printHexa>:

void LCD_printHexa(unsigned int _n)
{
    1d70:	cf 93       	push	r28
    1d72:	df 93       	push	r29
    1d74:	ec 01       	movw	r28, r24
	unsigned char _tmp = _n>>4;
    1d76:	64 e0       	ldi	r22, 0x04	; 4
    1d78:	96 95       	lsr	r25
    1d7a:	87 95       	ror	r24
    1d7c:	6a 95       	dec	r22
    1d7e:	e1 f7       	brne	.-8      	; 0x1d78 <LCD_printHexa+0x8>
	if (_tmp>9)
    1d80:	8a 30       	cpi	r24, 0x0A	; 10
    1d82:	10 f0       	brcs	.+4      	; 0x1d88 <LCD_printHexa+0x18>
		_tmp += 'A'-10;
    1d84:	89 5c       	subi	r24, 0xC9	; 201
    1d86:	01 c0       	rjmp	.+2      	; 0x1d8a <LCD_printHexa+0x1a>
	else
		_tmp += '0';
    1d88:	80 5d       	subi	r24, 0xD0	; 208
	LCD_writeData( _tmp );
    1d8a:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_writeData>
	_tmp = _n & 0x0F;
    1d8e:	9e 01       	movw	r18, r28
    1d90:	2f 70       	andi	r18, 0x0F	; 15
    1d92:	82 2f       	mov	r24, r18
	if (_tmp>9)
    1d94:	2a 30       	cpi	r18, 0x0A	; 10
    1d96:	10 f0       	brcs	.+4      	; 0x1d9c <LCD_printHexa+0x2c>
		_tmp += 'A'-10;
    1d98:	89 5c       	subi	r24, 0xC9	; 201
    1d9a:	01 c0       	rjmp	.+2      	; 0x1d9e <LCD_printHexa+0x2e>
	else
		_tmp += '0';
    1d9c:	80 5d       	subi	r24, 0xD0	; 208
	LCD_writeData( _tmp );
    1d9e:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_writeData>
}
    1da2:	df 91       	pop	r29
    1da4:	cf 91       	pop	r28
    1da6:	08 95       	ret

00001da8 <LCD_print>:


void LCD_print(char* _msg)
{
    1da8:	0f 93       	push	r16
    1daa:	1f 93       	push	r17
    1dac:	cf 93       	push	r28
    1dae:	df 93       	push	r29
    1db0:	8c 01       	movw	r16, r24
    1db2:	c0 e0       	ldi	r28, 0x00	; 0
    1db4:	d0 e0       	ldi	r29, 0x00	; 0
    1db6:	02 c0       	rjmp	.+4      	; 0x1dbc <LCD_print+0x14>
	unsigned char i=0;
	for( ; _msg[i]!=0 && i<16; i++)
		LCD_writeData( _msg[i] );
    1db8:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_writeData>


void LCD_print(char* _msg)
{
	unsigned char i=0;
	for( ; _msg[i]!=0 && i<16; i++)
    1dbc:	f8 01       	movw	r30, r16
    1dbe:	ec 0f       	add	r30, r28
    1dc0:	fd 1f       	adc	r31, r29
    1dc2:	80 81       	ld	r24, Z
    1dc4:	88 23       	and	r24, r24
    1dc6:	21 f0       	breq	.+8      	; 0x1dd0 <LCD_print+0x28>
    1dc8:	21 96       	adiw	r28, 0x01	; 1
    1dca:	c1 31       	cpi	r28, 0x11	; 17
    1dcc:	d1 05       	cpc	r29, r1
    1dce:	a1 f7       	brne	.-24     	; 0x1db8 <LCD_print+0x10>
		LCD_writeData( _msg[i] );
}
    1dd0:	df 91       	pop	r29
    1dd2:	cf 91       	pop	r28
    1dd4:	1f 91       	pop	r17
    1dd6:	0f 91       	pop	r16
    1dd8:	08 95       	ret

00001dda <LCD_printn>:

void LCD_printn(char* _msg, uint8_t n)
{
    1dda:	0f 93       	push	r16
    1ddc:	1f 93       	push	r17
    1dde:	cf 93       	push	r28
    1de0:	df 93       	push	r29
    1de2:	ec 01       	movw	r28, r24
    1de4:	06 2f       	mov	r16, r22
    1de6:	10 e0       	ldi	r17, 0x00	; 0
    1de8:	03 c0       	rjmp	.+6      	; 0x1df0 <LCD_printn+0x16>
	unsigned char i=0;
	for( ; _msg[i]!=0 && i<n; i++)
		LCD_writeData( _msg[i] );
    1dea:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <LCD_writeData>
}

void LCD_printn(char* _msg, uint8_t n)
{
	unsigned char i=0;
	for( ; _msg[i]!=0 && i<n; i++)
    1dee:	1f 5f       	subi	r17, 0xFF	; 255
    1df0:	fe 01       	movw	r30, r28
    1df2:	e1 0f       	add	r30, r17
    1df4:	f1 1d       	adc	r31, r1
    1df6:	80 81       	ld	r24, Z
    1df8:	88 23       	and	r24, r24
    1dfa:	11 f0       	breq	.+4      	; 0x1e00 <LCD_printn+0x26>
    1dfc:	10 17       	cp	r17, r16
    1dfe:	a8 f3       	brcs	.-22     	; 0x1dea <LCD_printn+0x10>
		LCD_writeData( _msg[i] );
}
    1e00:	df 91       	pop	r29
    1e02:	cf 91       	pop	r28
    1e04:	1f 91       	pop	r17
    1e06:	0f 91       	pop	r16
    1e08:	08 95       	ret

00001e0a <LCD_print2>:

void LCD_print2(char* _msg1, char* _msg2)
{
    1e0a:	ef 92       	push	r14
    1e0c:	ff 92       	push	r15
    1e0e:	0f 93       	push	r16
    1e10:	1f 93       	push	r17
    1e12:	8c 01       	movw	r16, r24
    1e14:	7b 01       	movw	r14, r22
	LCD_writeInstruction(LCD_INSTR_clearDisplay);
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_writeInstruction>
	LCD_print(_msg1);
    1e1c:	c8 01       	movw	r24, r16
    1e1e:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_print>
	LCD_writeInstruction(LCD_INSTR_nextLine);
    1e22:	80 ec       	ldi	r24, 0xC0	; 192
    1e24:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <LCD_writeInstruction>
	LCD_print(_msg2);
    1e28:	c7 01       	movw	r24, r14
    1e2a:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_print>
}
    1e2e:	1f 91       	pop	r17
    1e30:	0f 91       	pop	r16
    1e32:	ff 90       	pop	r15
    1e34:	ef 90       	pop	r14
    1e36:	08 95       	ret

00001e38 <__mulsi3>:
    1e38:	62 9f       	mul	r22, r18
    1e3a:	d0 01       	movw	r26, r0
    1e3c:	73 9f       	mul	r23, r19
    1e3e:	f0 01       	movw	r30, r0
    1e40:	82 9f       	mul	r24, r18
    1e42:	e0 0d       	add	r30, r0
    1e44:	f1 1d       	adc	r31, r1
    1e46:	64 9f       	mul	r22, r20
    1e48:	e0 0d       	add	r30, r0
    1e4a:	f1 1d       	adc	r31, r1
    1e4c:	92 9f       	mul	r25, r18
    1e4e:	f0 0d       	add	r31, r0
    1e50:	83 9f       	mul	r24, r19
    1e52:	f0 0d       	add	r31, r0
    1e54:	74 9f       	mul	r23, r20
    1e56:	f0 0d       	add	r31, r0
    1e58:	65 9f       	mul	r22, r21
    1e5a:	f0 0d       	add	r31, r0
    1e5c:	99 27       	eor	r25, r25
    1e5e:	72 9f       	mul	r23, r18
    1e60:	b0 0d       	add	r27, r0
    1e62:	e1 1d       	adc	r30, r1
    1e64:	f9 1f       	adc	r31, r25
    1e66:	63 9f       	mul	r22, r19
    1e68:	b0 0d       	add	r27, r0
    1e6a:	e1 1d       	adc	r30, r1
    1e6c:	f9 1f       	adc	r31, r25
    1e6e:	bd 01       	movw	r22, r26
    1e70:	cf 01       	movw	r24, r30
    1e72:	11 24       	eor	r1, r1
    1e74:	08 95       	ret

00001e76 <__udivmodhi4>:
    1e76:	aa 1b       	sub	r26, r26
    1e78:	bb 1b       	sub	r27, r27
    1e7a:	51 e1       	ldi	r21, 0x11	; 17
    1e7c:	07 c0       	rjmp	.+14     	; 0x1e8c <__udivmodhi4_ep>

00001e7e <__udivmodhi4_loop>:
    1e7e:	aa 1f       	adc	r26, r26
    1e80:	bb 1f       	adc	r27, r27
    1e82:	a6 17       	cp	r26, r22
    1e84:	b7 07       	cpc	r27, r23
    1e86:	10 f0       	brcs	.+4      	; 0x1e8c <__udivmodhi4_ep>
    1e88:	a6 1b       	sub	r26, r22
    1e8a:	b7 0b       	sbc	r27, r23

00001e8c <__udivmodhi4_ep>:
    1e8c:	88 1f       	adc	r24, r24
    1e8e:	99 1f       	adc	r25, r25
    1e90:	5a 95       	dec	r21
    1e92:	a9 f7       	brne	.-22     	; 0x1e7e <__udivmodhi4_loop>
    1e94:	80 95       	com	r24
    1e96:	90 95       	com	r25
    1e98:	bc 01       	movw	r22, r24
    1e9a:	cd 01       	movw	r24, r26
    1e9c:	08 95       	ret

00001e9e <__udivmodsi4>:
    1e9e:	a1 e2       	ldi	r26, 0x21	; 33
    1ea0:	1a 2e       	mov	r1, r26
    1ea2:	aa 1b       	sub	r26, r26
    1ea4:	bb 1b       	sub	r27, r27
    1ea6:	fd 01       	movw	r30, r26
    1ea8:	0d c0       	rjmp	.+26     	; 0x1ec4 <__udivmodsi4_ep>

00001eaa <__udivmodsi4_loop>:
    1eaa:	aa 1f       	adc	r26, r26
    1eac:	bb 1f       	adc	r27, r27
    1eae:	ee 1f       	adc	r30, r30
    1eb0:	ff 1f       	adc	r31, r31
    1eb2:	a2 17       	cp	r26, r18
    1eb4:	b3 07       	cpc	r27, r19
    1eb6:	e4 07       	cpc	r30, r20
    1eb8:	f5 07       	cpc	r31, r21
    1eba:	20 f0       	brcs	.+8      	; 0x1ec4 <__udivmodsi4_ep>
    1ebc:	a2 1b       	sub	r26, r18
    1ebe:	b3 0b       	sbc	r27, r19
    1ec0:	e4 0b       	sbc	r30, r20
    1ec2:	f5 0b       	sbc	r31, r21

00001ec4 <__udivmodsi4_ep>:
    1ec4:	66 1f       	adc	r22, r22
    1ec6:	77 1f       	adc	r23, r23
    1ec8:	88 1f       	adc	r24, r24
    1eca:	99 1f       	adc	r25, r25
    1ecc:	1a 94       	dec	r1
    1ece:	69 f7       	brne	.-38     	; 0x1eaa <__udivmodsi4_loop>
    1ed0:	60 95       	com	r22
    1ed2:	70 95       	com	r23
    1ed4:	80 95       	com	r24
    1ed6:	90 95       	com	r25
    1ed8:	9b 01       	movw	r18, r22
    1eda:	ac 01       	movw	r20, r24
    1edc:	bd 01       	movw	r22, r26
    1ede:	cf 01       	movw	r24, r30
    1ee0:	08 95       	ret

00001ee2 <__divmodsi4>:
    1ee2:	97 fb       	bst	r25, 7
    1ee4:	09 2e       	mov	r0, r25
    1ee6:	05 26       	eor	r0, r21
    1ee8:	0e d0       	rcall	.+28     	; 0x1f06 <__divmodsi4_neg1>
    1eea:	57 fd       	sbrc	r21, 7
    1eec:	04 d0       	rcall	.+8      	; 0x1ef6 <__divmodsi4_neg2>
    1eee:	d7 df       	rcall	.-82     	; 0x1e9e <__udivmodsi4>
    1ef0:	0a d0       	rcall	.+20     	; 0x1f06 <__divmodsi4_neg1>
    1ef2:	00 1c       	adc	r0, r0
    1ef4:	38 f4       	brcc	.+14     	; 0x1f04 <__divmodsi4_exit>

00001ef6 <__divmodsi4_neg2>:
    1ef6:	50 95       	com	r21
    1ef8:	40 95       	com	r20
    1efa:	30 95       	com	r19
    1efc:	21 95       	neg	r18
    1efe:	3f 4f       	sbci	r19, 0xFF	; 255
    1f00:	4f 4f       	sbci	r20, 0xFF	; 255
    1f02:	5f 4f       	sbci	r21, 0xFF	; 255

00001f04 <__divmodsi4_exit>:
    1f04:	08 95       	ret

00001f06 <__divmodsi4_neg1>:
    1f06:	f6 f7       	brtc	.-4      	; 0x1f04 <__divmodsi4_exit>
    1f08:	90 95       	com	r25
    1f0a:	80 95       	com	r24
    1f0c:	70 95       	com	r23
    1f0e:	61 95       	neg	r22
    1f10:	7f 4f       	sbci	r23, 0xFF	; 255
    1f12:	8f 4f       	sbci	r24, 0xFF	; 255
    1f14:	9f 4f       	sbci	r25, 0xFF	; 255
    1f16:	08 95       	ret

00001f18 <__prologue_saves__>:
    1f18:	2f 92       	push	r2
    1f1a:	3f 92       	push	r3
    1f1c:	4f 92       	push	r4
    1f1e:	5f 92       	push	r5
    1f20:	6f 92       	push	r6
    1f22:	7f 92       	push	r7
    1f24:	8f 92       	push	r8
    1f26:	9f 92       	push	r9
    1f28:	af 92       	push	r10
    1f2a:	bf 92       	push	r11
    1f2c:	cf 92       	push	r12
    1f2e:	df 92       	push	r13
    1f30:	ef 92       	push	r14
    1f32:	ff 92       	push	r15
    1f34:	0f 93       	push	r16
    1f36:	1f 93       	push	r17
    1f38:	cf 93       	push	r28
    1f3a:	df 93       	push	r29
    1f3c:	cd b7       	in	r28, 0x3d	; 61
    1f3e:	de b7       	in	r29, 0x3e	; 62
    1f40:	ca 1b       	sub	r28, r26
    1f42:	db 0b       	sbc	r29, r27
    1f44:	0f b6       	in	r0, 0x3f	; 63
    1f46:	f8 94       	cli
    1f48:	de bf       	out	0x3e, r29	; 62
    1f4a:	0f be       	out	0x3f, r0	; 63
    1f4c:	cd bf       	out	0x3d, r28	; 61
    1f4e:	09 94       	ijmp

00001f50 <__epilogue_restores__>:
    1f50:	2a 88       	ldd	r2, Y+18	; 0x12
    1f52:	39 88       	ldd	r3, Y+17	; 0x11
    1f54:	48 88       	ldd	r4, Y+16	; 0x10
    1f56:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f58:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f5a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f5c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f5e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f60:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f62:	b9 84       	ldd	r11, Y+9	; 0x09
    1f64:	c8 84       	ldd	r12, Y+8	; 0x08
    1f66:	df 80       	ldd	r13, Y+7	; 0x07
    1f68:	ee 80       	ldd	r14, Y+6	; 0x06
    1f6a:	fd 80       	ldd	r15, Y+5	; 0x05
    1f6c:	0c 81       	ldd	r16, Y+4	; 0x04
    1f6e:	1b 81       	ldd	r17, Y+3	; 0x03
    1f70:	aa 81       	ldd	r26, Y+2	; 0x02
    1f72:	b9 81       	ldd	r27, Y+1	; 0x01
    1f74:	ce 0f       	add	r28, r30
    1f76:	d1 1d       	adc	r29, r1
    1f78:	0f b6       	in	r0, 0x3f	; 63
    1f7a:	f8 94       	cli
    1f7c:	de bf       	out	0x3e, r29	; 62
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	cd bf       	out	0x3d, r28	; 61
    1f82:	ed 01       	movw	r28, r26
    1f84:	08 95       	ret

00001f86 <strcat>:
    1f86:	fb 01       	movw	r30, r22
    1f88:	dc 01       	movw	r26, r24
    1f8a:	0d 90       	ld	r0, X+
    1f8c:	00 20       	and	r0, r0
    1f8e:	e9 f7       	brne	.-6      	; 0x1f8a <strcat+0x4>
    1f90:	11 97       	sbiw	r26, 0x01	; 1
    1f92:	01 90       	ld	r0, Z+
    1f94:	0d 92       	st	X+, r0
    1f96:	00 20       	and	r0, r0
    1f98:	e1 f7       	brne	.-8      	; 0x1f92 <strcat+0xc>
    1f9a:	08 95       	ret

00001f9c <strstr>:
    1f9c:	fb 01       	movw	r30, r22
    1f9e:	51 91       	ld	r21, Z+
    1fa0:	55 23       	and	r21, r21
    1fa2:	a9 f0       	breq	.+42     	; 0x1fce <strstr+0x32>
    1fa4:	bf 01       	movw	r22, r30
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	4d 91       	ld	r20, X+
    1faa:	45 17       	cp	r20, r21
    1fac:	41 11       	cpse	r20, r1
    1fae:	e1 f7       	brne	.-8      	; 0x1fa8 <strstr+0xc>
    1fb0:	59 f4       	brne	.+22     	; 0x1fc8 <strstr+0x2c>
    1fb2:	cd 01       	movw	r24, r26
    1fb4:	01 90       	ld	r0, Z+
    1fb6:	00 20       	and	r0, r0
    1fb8:	49 f0       	breq	.+18     	; 0x1fcc <strstr+0x30>
    1fba:	4d 91       	ld	r20, X+
    1fbc:	40 15       	cp	r20, r0
    1fbe:	41 11       	cpse	r20, r1
    1fc0:	c9 f3       	breq	.-14     	; 0x1fb4 <strstr+0x18>
    1fc2:	fb 01       	movw	r30, r22
    1fc4:	41 11       	cpse	r20, r1
    1fc6:	ef cf       	rjmp	.-34     	; 0x1fa6 <strstr+0xa>
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	01 97       	sbiw	r24, 0x01	; 1
    1fce:	08 95       	ret

00001fd0 <sprintf>:
    1fd0:	ae e0       	ldi	r26, 0x0E	; 14
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	ee ee       	ldi	r30, 0xEE	; 238
    1fd6:	ff e0       	ldi	r31, 0x0F	; 15
    1fd8:	0c 94 9a 0f 	jmp	0x1f34	; 0x1f34 <__prologue_saves__+0x1c>
    1fdc:	0d 89       	ldd	r16, Y+21	; 0x15
    1fde:	1e 89       	ldd	r17, Y+22	; 0x16
    1fe0:	86 e0       	ldi	r24, 0x06	; 6
    1fe2:	8c 83       	std	Y+4, r24	; 0x04
    1fe4:	1a 83       	std	Y+2, r17	; 0x02
    1fe6:	09 83       	std	Y+1, r16	; 0x01
    1fe8:	8f ef       	ldi	r24, 0xFF	; 255
    1fea:	9f e7       	ldi	r25, 0x7F	; 127
    1fec:	9e 83       	std	Y+6, r25	; 0x06
    1fee:	8d 83       	std	Y+5, r24	; 0x05
    1ff0:	9e 01       	movw	r18, r28
    1ff2:	27 5e       	subi	r18, 0xE7	; 231
    1ff4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff6:	ce 01       	movw	r24, r28
    1ff8:	01 96       	adiw	r24, 0x01	; 1
    1ffa:	6f 89       	ldd	r22, Y+23	; 0x17
    1ffc:	78 8d       	ldd	r23, Y+24	; 0x18
    1ffe:	a9 01       	movw	r20, r18
    2000:	0e 94 0c 10 	call	0x2018	; 0x2018 <vfprintf>
    2004:	2f 81       	ldd	r18, Y+7	; 0x07
    2006:	38 85       	ldd	r19, Y+8	; 0x08
    2008:	02 0f       	add	r16, r18
    200a:	13 1f       	adc	r17, r19
    200c:	f8 01       	movw	r30, r16
    200e:	10 82       	st	Z, r1
    2010:	2e 96       	adiw	r28, 0x0e	; 14
    2012:	e4 e0       	ldi	r30, 0x04	; 4
    2014:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <__epilogue_restores__+0x1c>

00002018 <vfprintf>:
    2018:	ab e0       	ldi	r26, 0x0B	; 11
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	e2 e1       	ldi	r30, 0x12	; 18
    201e:	f0 e1       	ldi	r31, 0x10	; 16
    2020:	0c 94 8c 0f 	jmp	0x1f18	; 0x1f18 <__prologue_saves__>
    2024:	3c 01       	movw	r6, r24
    2026:	2b 01       	movw	r4, r22
    2028:	5a 01       	movw	r10, r20
    202a:	fc 01       	movw	r30, r24
    202c:	17 82       	std	Z+7, r1	; 0x07
    202e:	16 82       	std	Z+6, r1	; 0x06
    2030:	83 81       	ldd	r24, Z+3	; 0x03
    2032:	81 fd       	sbrc	r24, 1
    2034:	03 c0       	rjmp	.+6      	; 0x203c <vfprintf+0x24>
    2036:	6f ef       	ldi	r22, 0xFF	; 255
    2038:	7f ef       	ldi	r23, 0xFF	; 255
    203a:	c6 c1       	rjmp	.+908    	; 0x23c8 <vfprintf+0x3b0>
    203c:	9a e0       	ldi	r25, 0x0A	; 10
    203e:	89 2e       	mov	r8, r25
    2040:	1e 01       	movw	r2, r28
    2042:	08 94       	sec
    2044:	21 1c       	adc	r2, r1
    2046:	31 1c       	adc	r3, r1
    2048:	f3 01       	movw	r30, r6
    204a:	23 81       	ldd	r18, Z+3	; 0x03
    204c:	f2 01       	movw	r30, r4
    204e:	23 fd       	sbrc	r18, 3
    2050:	85 91       	lpm	r24, Z+
    2052:	23 ff       	sbrs	r18, 3
    2054:	81 91       	ld	r24, Z+
    2056:	2f 01       	movw	r4, r30
    2058:	88 23       	and	r24, r24
    205a:	09 f4       	brne	.+2      	; 0x205e <vfprintf+0x46>
    205c:	b2 c1       	rjmp	.+868    	; 0x23c2 <vfprintf+0x3aa>
    205e:	85 32       	cpi	r24, 0x25	; 37
    2060:	39 f4       	brne	.+14     	; 0x2070 <vfprintf+0x58>
    2062:	23 fd       	sbrc	r18, 3
    2064:	85 91       	lpm	r24, Z+
    2066:	23 ff       	sbrs	r18, 3
    2068:	81 91       	ld	r24, Z+
    206a:	2f 01       	movw	r4, r30
    206c:	85 32       	cpi	r24, 0x25	; 37
    206e:	29 f4       	brne	.+10     	; 0x207a <vfprintf+0x62>
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	b3 01       	movw	r22, r6
    2074:	0e 94 ff 11 	call	0x23fe	; 0x23fe <fputc>
    2078:	e7 cf       	rjmp	.-50     	; 0x2048 <vfprintf+0x30>
    207a:	98 2f       	mov	r25, r24
    207c:	ff 24       	eor	r15, r15
    207e:	ee 24       	eor	r14, r14
    2080:	99 24       	eor	r9, r9
    2082:	ff e1       	ldi	r31, 0x1F	; 31
    2084:	ff 15       	cp	r31, r15
    2086:	d0 f0       	brcs	.+52     	; 0x20bc <vfprintf+0xa4>
    2088:	9b 32       	cpi	r25, 0x2B	; 43
    208a:	69 f0       	breq	.+26     	; 0x20a6 <vfprintf+0x8e>
    208c:	9c 32       	cpi	r25, 0x2C	; 44
    208e:	28 f4       	brcc	.+10     	; 0x209a <vfprintf+0x82>
    2090:	90 32       	cpi	r25, 0x20	; 32
    2092:	59 f0       	breq	.+22     	; 0x20aa <vfprintf+0x92>
    2094:	93 32       	cpi	r25, 0x23	; 35
    2096:	91 f4       	brne	.+36     	; 0x20bc <vfprintf+0xa4>
    2098:	0e c0       	rjmp	.+28     	; 0x20b6 <vfprintf+0x9e>
    209a:	9d 32       	cpi	r25, 0x2D	; 45
    209c:	49 f0       	breq	.+18     	; 0x20b0 <vfprintf+0x98>
    209e:	90 33       	cpi	r25, 0x30	; 48
    20a0:	69 f4       	brne	.+26     	; 0x20bc <vfprintf+0xa4>
    20a2:	41 e0       	ldi	r20, 0x01	; 1
    20a4:	24 c0       	rjmp	.+72     	; 0x20ee <vfprintf+0xd6>
    20a6:	52 e0       	ldi	r21, 0x02	; 2
    20a8:	f5 2a       	or	r15, r21
    20aa:	84 e0       	ldi	r24, 0x04	; 4
    20ac:	f8 2a       	or	r15, r24
    20ae:	28 c0       	rjmp	.+80     	; 0x2100 <vfprintf+0xe8>
    20b0:	98 e0       	ldi	r25, 0x08	; 8
    20b2:	f9 2a       	or	r15, r25
    20b4:	25 c0       	rjmp	.+74     	; 0x2100 <vfprintf+0xe8>
    20b6:	e0 e1       	ldi	r30, 0x10	; 16
    20b8:	fe 2a       	or	r15, r30
    20ba:	22 c0       	rjmp	.+68     	; 0x2100 <vfprintf+0xe8>
    20bc:	f7 fc       	sbrc	r15, 7
    20be:	29 c0       	rjmp	.+82     	; 0x2112 <vfprintf+0xfa>
    20c0:	89 2f       	mov	r24, r25
    20c2:	80 53       	subi	r24, 0x30	; 48
    20c4:	8a 30       	cpi	r24, 0x0A	; 10
    20c6:	70 f4       	brcc	.+28     	; 0x20e4 <vfprintf+0xcc>
    20c8:	f6 fe       	sbrs	r15, 6
    20ca:	05 c0       	rjmp	.+10     	; 0x20d6 <vfprintf+0xbe>
    20cc:	98 9c       	mul	r9, r8
    20ce:	90 2c       	mov	r9, r0
    20d0:	11 24       	eor	r1, r1
    20d2:	98 0e       	add	r9, r24
    20d4:	15 c0       	rjmp	.+42     	; 0x2100 <vfprintf+0xe8>
    20d6:	e8 9c       	mul	r14, r8
    20d8:	e0 2c       	mov	r14, r0
    20da:	11 24       	eor	r1, r1
    20dc:	e8 0e       	add	r14, r24
    20de:	f0 e2       	ldi	r31, 0x20	; 32
    20e0:	ff 2a       	or	r15, r31
    20e2:	0e c0       	rjmp	.+28     	; 0x2100 <vfprintf+0xe8>
    20e4:	9e 32       	cpi	r25, 0x2E	; 46
    20e6:	29 f4       	brne	.+10     	; 0x20f2 <vfprintf+0xda>
    20e8:	f6 fc       	sbrc	r15, 6
    20ea:	6b c1       	rjmp	.+726    	; 0x23c2 <vfprintf+0x3aa>
    20ec:	40 e4       	ldi	r20, 0x40	; 64
    20ee:	f4 2a       	or	r15, r20
    20f0:	07 c0       	rjmp	.+14     	; 0x2100 <vfprintf+0xe8>
    20f2:	9c 36       	cpi	r25, 0x6C	; 108
    20f4:	19 f4       	brne	.+6      	; 0x20fc <vfprintf+0xe4>
    20f6:	50 e8       	ldi	r21, 0x80	; 128
    20f8:	f5 2a       	or	r15, r21
    20fa:	02 c0       	rjmp	.+4      	; 0x2100 <vfprintf+0xe8>
    20fc:	98 36       	cpi	r25, 0x68	; 104
    20fe:	49 f4       	brne	.+18     	; 0x2112 <vfprintf+0xfa>
    2100:	f2 01       	movw	r30, r4
    2102:	23 fd       	sbrc	r18, 3
    2104:	95 91       	lpm	r25, Z+
    2106:	23 ff       	sbrs	r18, 3
    2108:	91 91       	ld	r25, Z+
    210a:	2f 01       	movw	r4, r30
    210c:	99 23       	and	r25, r25
    210e:	09 f0       	breq	.+2      	; 0x2112 <vfprintf+0xfa>
    2110:	b8 cf       	rjmp	.-144    	; 0x2082 <vfprintf+0x6a>
    2112:	89 2f       	mov	r24, r25
    2114:	85 54       	subi	r24, 0x45	; 69
    2116:	83 30       	cpi	r24, 0x03	; 3
    2118:	18 f0       	brcs	.+6      	; 0x2120 <vfprintf+0x108>
    211a:	80 52       	subi	r24, 0x20	; 32
    211c:	83 30       	cpi	r24, 0x03	; 3
    211e:	38 f4       	brcc	.+14     	; 0x212e <vfprintf+0x116>
    2120:	44 e0       	ldi	r20, 0x04	; 4
    2122:	50 e0       	ldi	r21, 0x00	; 0
    2124:	a4 0e       	add	r10, r20
    2126:	b5 1e       	adc	r11, r21
    2128:	5f e3       	ldi	r21, 0x3F	; 63
    212a:	59 83       	std	Y+1, r21	; 0x01
    212c:	0f c0       	rjmp	.+30     	; 0x214c <vfprintf+0x134>
    212e:	93 36       	cpi	r25, 0x63	; 99
    2130:	31 f0       	breq	.+12     	; 0x213e <vfprintf+0x126>
    2132:	93 37       	cpi	r25, 0x73	; 115
    2134:	79 f0       	breq	.+30     	; 0x2154 <vfprintf+0x13c>
    2136:	93 35       	cpi	r25, 0x53	; 83
    2138:	09 f0       	breq	.+2      	; 0x213c <vfprintf+0x124>
    213a:	56 c0       	rjmp	.+172    	; 0x21e8 <vfprintf+0x1d0>
    213c:	20 c0       	rjmp	.+64     	; 0x217e <vfprintf+0x166>
    213e:	f5 01       	movw	r30, r10
    2140:	80 81       	ld	r24, Z
    2142:	89 83       	std	Y+1, r24	; 0x01
    2144:	42 e0       	ldi	r20, 0x02	; 2
    2146:	50 e0       	ldi	r21, 0x00	; 0
    2148:	a4 0e       	add	r10, r20
    214a:	b5 1e       	adc	r11, r21
    214c:	61 01       	movw	r12, r2
    214e:	01 e0       	ldi	r16, 0x01	; 1
    2150:	10 e0       	ldi	r17, 0x00	; 0
    2152:	12 c0       	rjmp	.+36     	; 0x2178 <vfprintf+0x160>
    2154:	f5 01       	movw	r30, r10
    2156:	c0 80       	ld	r12, Z
    2158:	d1 80       	ldd	r13, Z+1	; 0x01
    215a:	f6 fc       	sbrc	r15, 6
    215c:	03 c0       	rjmp	.+6      	; 0x2164 <vfprintf+0x14c>
    215e:	6f ef       	ldi	r22, 0xFF	; 255
    2160:	7f ef       	ldi	r23, 0xFF	; 255
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <vfprintf+0x150>
    2164:	69 2d       	mov	r22, r9
    2166:	70 e0       	ldi	r23, 0x00	; 0
    2168:	42 e0       	ldi	r20, 0x02	; 2
    216a:	50 e0       	ldi	r21, 0x00	; 0
    216c:	a4 0e       	add	r10, r20
    216e:	b5 1e       	adc	r11, r21
    2170:	c6 01       	movw	r24, r12
    2172:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <strnlen>
    2176:	8c 01       	movw	r16, r24
    2178:	5f e7       	ldi	r21, 0x7F	; 127
    217a:	f5 22       	and	r15, r21
    217c:	14 c0       	rjmp	.+40     	; 0x21a6 <vfprintf+0x18e>
    217e:	f5 01       	movw	r30, r10
    2180:	c0 80       	ld	r12, Z
    2182:	d1 80       	ldd	r13, Z+1	; 0x01
    2184:	f6 fc       	sbrc	r15, 6
    2186:	03 c0       	rjmp	.+6      	; 0x218e <vfprintf+0x176>
    2188:	6f ef       	ldi	r22, 0xFF	; 255
    218a:	7f ef       	ldi	r23, 0xFF	; 255
    218c:	02 c0       	rjmp	.+4      	; 0x2192 <vfprintf+0x17a>
    218e:	69 2d       	mov	r22, r9
    2190:	70 e0       	ldi	r23, 0x00	; 0
    2192:	42 e0       	ldi	r20, 0x02	; 2
    2194:	50 e0       	ldi	r21, 0x00	; 0
    2196:	a4 0e       	add	r10, r20
    2198:	b5 1e       	adc	r11, r21
    219a:	c6 01       	movw	r24, r12
    219c:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <strnlen_P>
    21a0:	8c 01       	movw	r16, r24
    21a2:	50 e8       	ldi	r21, 0x80	; 128
    21a4:	f5 2a       	or	r15, r21
    21a6:	f3 fe       	sbrs	r15, 3
    21a8:	07 c0       	rjmp	.+14     	; 0x21b8 <vfprintf+0x1a0>
    21aa:	1a c0       	rjmp	.+52     	; 0x21e0 <vfprintf+0x1c8>
    21ac:	80 e2       	ldi	r24, 0x20	; 32
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	b3 01       	movw	r22, r6
    21b2:	0e 94 ff 11 	call	0x23fe	; 0x23fe <fputc>
    21b6:	ea 94       	dec	r14
    21b8:	8e 2d       	mov	r24, r14
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	08 17       	cp	r16, r24
    21be:	19 07       	cpc	r17, r25
    21c0:	a8 f3       	brcs	.-22     	; 0x21ac <vfprintf+0x194>
    21c2:	0e c0       	rjmp	.+28     	; 0x21e0 <vfprintf+0x1c8>
    21c4:	f6 01       	movw	r30, r12
    21c6:	f7 fc       	sbrc	r15, 7
    21c8:	85 91       	lpm	r24, Z+
    21ca:	f7 fe       	sbrs	r15, 7
    21cc:	81 91       	ld	r24, Z+
    21ce:	6f 01       	movw	r12, r30
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	b3 01       	movw	r22, r6
    21d4:	0e 94 ff 11 	call	0x23fe	; 0x23fe <fputc>
    21d8:	e1 10       	cpse	r14, r1
    21da:	ea 94       	dec	r14
    21dc:	01 50       	subi	r16, 0x01	; 1
    21de:	10 40       	sbci	r17, 0x00	; 0
    21e0:	01 15       	cp	r16, r1
    21e2:	11 05       	cpc	r17, r1
    21e4:	79 f7       	brne	.-34     	; 0x21c4 <vfprintf+0x1ac>
    21e6:	ea c0       	rjmp	.+468    	; 0x23bc <vfprintf+0x3a4>
    21e8:	94 36       	cpi	r25, 0x64	; 100
    21ea:	11 f0       	breq	.+4      	; 0x21f0 <vfprintf+0x1d8>
    21ec:	99 36       	cpi	r25, 0x69	; 105
    21ee:	69 f5       	brne	.+90     	; 0x224a <vfprintf+0x232>
    21f0:	f7 fe       	sbrs	r15, 7
    21f2:	08 c0       	rjmp	.+16     	; 0x2204 <vfprintf+0x1ec>
    21f4:	f5 01       	movw	r30, r10
    21f6:	20 81       	ld	r18, Z
    21f8:	31 81       	ldd	r19, Z+1	; 0x01
    21fa:	42 81       	ldd	r20, Z+2	; 0x02
    21fc:	53 81       	ldd	r21, Z+3	; 0x03
    21fe:	84 e0       	ldi	r24, 0x04	; 4
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	0a c0       	rjmp	.+20     	; 0x2218 <vfprintf+0x200>
    2204:	f5 01       	movw	r30, r10
    2206:	80 81       	ld	r24, Z
    2208:	91 81       	ldd	r25, Z+1	; 0x01
    220a:	9c 01       	movw	r18, r24
    220c:	44 27       	eor	r20, r20
    220e:	37 fd       	sbrc	r19, 7
    2210:	40 95       	com	r20
    2212:	54 2f       	mov	r21, r20
    2214:	82 e0       	ldi	r24, 0x02	; 2
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	a8 0e       	add	r10, r24
    221a:	b9 1e       	adc	r11, r25
    221c:	9f e6       	ldi	r25, 0x6F	; 111
    221e:	f9 22       	and	r15, r25
    2220:	57 ff       	sbrs	r21, 7
    2222:	09 c0       	rjmp	.+18     	; 0x2236 <vfprintf+0x21e>
    2224:	50 95       	com	r21
    2226:	40 95       	com	r20
    2228:	30 95       	com	r19
    222a:	21 95       	neg	r18
    222c:	3f 4f       	sbci	r19, 0xFF	; 255
    222e:	4f 4f       	sbci	r20, 0xFF	; 255
    2230:	5f 4f       	sbci	r21, 0xFF	; 255
    2232:	e0 e8       	ldi	r30, 0x80	; 128
    2234:	fe 2a       	or	r15, r30
    2236:	ca 01       	movw	r24, r20
    2238:	b9 01       	movw	r22, r18
    223a:	a1 01       	movw	r20, r2
    223c:	2a e0       	ldi	r18, 0x0A	; 10
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	0e 94 2b 12 	call	0x2456	; 0x2456 <__ultoa_invert>
    2244:	d8 2e       	mov	r13, r24
    2246:	d2 18       	sub	r13, r2
    2248:	40 c0       	rjmp	.+128    	; 0x22ca <vfprintf+0x2b2>
    224a:	95 37       	cpi	r25, 0x75	; 117
    224c:	29 f4       	brne	.+10     	; 0x2258 <vfprintf+0x240>
    224e:	1f 2d       	mov	r17, r15
    2250:	1f 7e       	andi	r17, 0xEF	; 239
    2252:	2a e0       	ldi	r18, 0x0A	; 10
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	1d c0       	rjmp	.+58     	; 0x2292 <vfprintf+0x27a>
    2258:	1f 2d       	mov	r17, r15
    225a:	19 7f       	andi	r17, 0xF9	; 249
    225c:	9f 36       	cpi	r25, 0x6F	; 111
    225e:	61 f0       	breq	.+24     	; 0x2278 <vfprintf+0x260>
    2260:	90 37       	cpi	r25, 0x70	; 112
    2262:	20 f4       	brcc	.+8      	; 0x226c <vfprintf+0x254>
    2264:	98 35       	cpi	r25, 0x58	; 88
    2266:	09 f0       	breq	.+2      	; 0x226a <vfprintf+0x252>
    2268:	ac c0       	rjmp	.+344    	; 0x23c2 <vfprintf+0x3aa>
    226a:	0f c0       	rjmp	.+30     	; 0x228a <vfprintf+0x272>
    226c:	90 37       	cpi	r25, 0x70	; 112
    226e:	39 f0       	breq	.+14     	; 0x227e <vfprintf+0x266>
    2270:	98 37       	cpi	r25, 0x78	; 120
    2272:	09 f0       	breq	.+2      	; 0x2276 <vfprintf+0x25e>
    2274:	a6 c0       	rjmp	.+332    	; 0x23c2 <vfprintf+0x3aa>
    2276:	04 c0       	rjmp	.+8      	; 0x2280 <vfprintf+0x268>
    2278:	28 e0       	ldi	r18, 0x08	; 8
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	0a c0       	rjmp	.+20     	; 0x2292 <vfprintf+0x27a>
    227e:	10 61       	ori	r17, 0x10	; 16
    2280:	14 fd       	sbrc	r17, 4
    2282:	14 60       	ori	r17, 0x04	; 4
    2284:	20 e1       	ldi	r18, 0x10	; 16
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	04 c0       	rjmp	.+8      	; 0x2292 <vfprintf+0x27a>
    228a:	14 fd       	sbrc	r17, 4
    228c:	16 60       	ori	r17, 0x06	; 6
    228e:	20 e1       	ldi	r18, 0x10	; 16
    2290:	32 e0       	ldi	r19, 0x02	; 2
    2292:	17 ff       	sbrs	r17, 7
    2294:	08 c0       	rjmp	.+16     	; 0x22a6 <vfprintf+0x28e>
    2296:	f5 01       	movw	r30, r10
    2298:	60 81       	ld	r22, Z
    229a:	71 81       	ldd	r23, Z+1	; 0x01
    229c:	82 81       	ldd	r24, Z+2	; 0x02
    229e:	93 81       	ldd	r25, Z+3	; 0x03
    22a0:	44 e0       	ldi	r20, 0x04	; 4
    22a2:	50 e0       	ldi	r21, 0x00	; 0
    22a4:	08 c0       	rjmp	.+16     	; 0x22b6 <vfprintf+0x29e>
    22a6:	f5 01       	movw	r30, r10
    22a8:	80 81       	ld	r24, Z
    22aa:	91 81       	ldd	r25, Z+1	; 0x01
    22ac:	bc 01       	movw	r22, r24
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	42 e0       	ldi	r20, 0x02	; 2
    22b4:	50 e0       	ldi	r21, 0x00	; 0
    22b6:	a4 0e       	add	r10, r20
    22b8:	b5 1e       	adc	r11, r21
    22ba:	a1 01       	movw	r20, r2
    22bc:	0e 94 2b 12 	call	0x2456	; 0x2456 <__ultoa_invert>
    22c0:	d8 2e       	mov	r13, r24
    22c2:	d2 18       	sub	r13, r2
    22c4:	8f e7       	ldi	r24, 0x7F	; 127
    22c6:	f8 2e       	mov	r15, r24
    22c8:	f1 22       	and	r15, r17
    22ca:	f6 fe       	sbrs	r15, 6
    22cc:	0b c0       	rjmp	.+22     	; 0x22e4 <vfprintf+0x2cc>
    22ce:	5e ef       	ldi	r21, 0xFE	; 254
    22d0:	f5 22       	and	r15, r21
    22d2:	d9 14       	cp	r13, r9
    22d4:	38 f4       	brcc	.+14     	; 0x22e4 <vfprintf+0x2cc>
    22d6:	f4 fe       	sbrs	r15, 4
    22d8:	07 c0       	rjmp	.+14     	; 0x22e8 <vfprintf+0x2d0>
    22da:	f2 fc       	sbrc	r15, 2
    22dc:	05 c0       	rjmp	.+10     	; 0x22e8 <vfprintf+0x2d0>
    22de:	8f ee       	ldi	r24, 0xEF	; 239
    22e0:	f8 22       	and	r15, r24
    22e2:	02 c0       	rjmp	.+4      	; 0x22e8 <vfprintf+0x2d0>
    22e4:	1d 2d       	mov	r17, r13
    22e6:	01 c0       	rjmp	.+2      	; 0x22ea <vfprintf+0x2d2>
    22e8:	19 2d       	mov	r17, r9
    22ea:	f4 fe       	sbrs	r15, 4
    22ec:	0d c0       	rjmp	.+26     	; 0x2308 <vfprintf+0x2f0>
    22ee:	fe 01       	movw	r30, r28
    22f0:	ed 0d       	add	r30, r13
    22f2:	f1 1d       	adc	r31, r1
    22f4:	80 81       	ld	r24, Z
    22f6:	80 33       	cpi	r24, 0x30	; 48
    22f8:	19 f4       	brne	.+6      	; 0x2300 <vfprintf+0x2e8>
    22fa:	99 ee       	ldi	r25, 0xE9	; 233
    22fc:	f9 22       	and	r15, r25
    22fe:	08 c0       	rjmp	.+16     	; 0x2310 <vfprintf+0x2f8>
    2300:	1f 5f       	subi	r17, 0xFF	; 255
    2302:	f2 fe       	sbrs	r15, 2
    2304:	05 c0       	rjmp	.+10     	; 0x2310 <vfprintf+0x2f8>
    2306:	03 c0       	rjmp	.+6      	; 0x230e <vfprintf+0x2f6>
    2308:	8f 2d       	mov	r24, r15
    230a:	86 78       	andi	r24, 0x86	; 134
    230c:	09 f0       	breq	.+2      	; 0x2310 <vfprintf+0x2f8>
    230e:	1f 5f       	subi	r17, 0xFF	; 255
    2310:	0f 2d       	mov	r16, r15
    2312:	f3 fc       	sbrc	r15, 3
    2314:	14 c0       	rjmp	.+40     	; 0x233e <vfprintf+0x326>
    2316:	f0 fe       	sbrs	r15, 0
    2318:	0f c0       	rjmp	.+30     	; 0x2338 <vfprintf+0x320>
    231a:	1e 15       	cp	r17, r14
    231c:	10 f0       	brcs	.+4      	; 0x2322 <vfprintf+0x30a>
    231e:	9d 2c       	mov	r9, r13
    2320:	0b c0       	rjmp	.+22     	; 0x2338 <vfprintf+0x320>
    2322:	9d 2c       	mov	r9, r13
    2324:	9e 0c       	add	r9, r14
    2326:	91 1a       	sub	r9, r17
    2328:	1e 2d       	mov	r17, r14
    232a:	06 c0       	rjmp	.+12     	; 0x2338 <vfprintf+0x320>
    232c:	80 e2       	ldi	r24, 0x20	; 32
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	b3 01       	movw	r22, r6
    2332:	0e 94 ff 11 	call	0x23fe	; 0x23fe <fputc>
    2336:	1f 5f       	subi	r17, 0xFF	; 255
    2338:	1e 15       	cp	r17, r14
    233a:	c0 f3       	brcs	.-16     	; 0x232c <vfprintf+0x314>
    233c:	04 c0       	rjmp	.+8      	; 0x2346 <vfprintf+0x32e>
    233e:	1e 15       	cp	r17, r14
    2340:	10 f4       	brcc	.+4      	; 0x2346 <vfprintf+0x32e>
    2342:	e1 1a       	sub	r14, r17
    2344:	01 c0       	rjmp	.+2      	; 0x2348 <vfprintf+0x330>
    2346:	ee 24       	eor	r14, r14
    2348:	04 ff       	sbrs	r16, 4
    234a:	0f c0       	rjmp	.+30     	; 0x236a <vfprintf+0x352>
    234c:	80 e3       	ldi	r24, 0x30	; 48
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	b3 01       	movw	r22, r6
    2352:	0e 94 ff 11 	call	0x23fe	; 0x23fe <fputc>
    2356:	02 ff       	sbrs	r16, 2
    2358:	1d c0       	rjmp	.+58     	; 0x2394 <vfprintf+0x37c>
    235a:	01 fd       	sbrc	r16, 1
    235c:	03 c0       	rjmp	.+6      	; 0x2364 <vfprintf+0x34c>
    235e:	88 e7       	ldi	r24, 0x78	; 120
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	0e c0       	rjmp	.+28     	; 0x2380 <vfprintf+0x368>
    2364:	88 e5       	ldi	r24, 0x58	; 88
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	0b c0       	rjmp	.+22     	; 0x2380 <vfprintf+0x368>
    236a:	80 2f       	mov	r24, r16
    236c:	86 78       	andi	r24, 0x86	; 134
    236e:	91 f0       	breq	.+36     	; 0x2394 <vfprintf+0x37c>
    2370:	01 ff       	sbrs	r16, 1
    2372:	02 c0       	rjmp	.+4      	; 0x2378 <vfprintf+0x360>
    2374:	8b e2       	ldi	r24, 0x2B	; 43
    2376:	01 c0       	rjmp	.+2      	; 0x237a <vfprintf+0x362>
    2378:	80 e2       	ldi	r24, 0x20	; 32
    237a:	f7 fc       	sbrc	r15, 7
    237c:	8d e2       	ldi	r24, 0x2D	; 45
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	b3 01       	movw	r22, r6
    2382:	0e 94 ff 11 	call	0x23fe	; 0x23fe <fputc>
    2386:	06 c0       	rjmp	.+12     	; 0x2394 <vfprintf+0x37c>
    2388:	80 e3       	ldi	r24, 0x30	; 48
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	b3 01       	movw	r22, r6
    238e:	0e 94 ff 11 	call	0x23fe	; 0x23fe <fputc>
    2392:	9a 94       	dec	r9
    2394:	d9 14       	cp	r13, r9
    2396:	c0 f3       	brcs	.-16     	; 0x2388 <vfprintf+0x370>
    2398:	da 94       	dec	r13
    239a:	f1 01       	movw	r30, r2
    239c:	ed 0d       	add	r30, r13
    239e:	f1 1d       	adc	r31, r1
    23a0:	80 81       	ld	r24, Z
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	b3 01       	movw	r22, r6
    23a6:	0e 94 ff 11 	call	0x23fe	; 0x23fe <fputc>
    23aa:	dd 20       	and	r13, r13
    23ac:	a9 f7       	brne	.-22     	; 0x2398 <vfprintf+0x380>
    23ae:	06 c0       	rjmp	.+12     	; 0x23bc <vfprintf+0x3a4>
    23b0:	80 e2       	ldi	r24, 0x20	; 32
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	b3 01       	movw	r22, r6
    23b6:	0e 94 ff 11 	call	0x23fe	; 0x23fe <fputc>
    23ba:	ea 94       	dec	r14
    23bc:	ee 20       	and	r14, r14
    23be:	c1 f7       	brne	.-16     	; 0x23b0 <vfprintf+0x398>
    23c0:	43 ce       	rjmp	.-890    	; 0x2048 <vfprintf+0x30>
    23c2:	f3 01       	movw	r30, r6
    23c4:	66 81       	ldd	r22, Z+6	; 0x06
    23c6:	77 81       	ldd	r23, Z+7	; 0x07
    23c8:	cb 01       	movw	r24, r22
    23ca:	2b 96       	adiw	r28, 0x0b	; 11
    23cc:	e2 e1       	ldi	r30, 0x12	; 18
    23ce:	0c 94 a8 0f 	jmp	0x1f50	; 0x1f50 <__epilogue_restores__>

000023d2 <strnlen_P>:
    23d2:	fc 01       	movw	r30, r24
    23d4:	05 90       	lpm	r0, Z+
    23d6:	61 50       	subi	r22, 0x01	; 1
    23d8:	70 40       	sbci	r23, 0x00	; 0
    23da:	01 10       	cpse	r0, r1
    23dc:	d8 f7       	brcc	.-10     	; 0x23d4 <strnlen_P+0x2>
    23de:	80 95       	com	r24
    23e0:	90 95       	com	r25
    23e2:	8e 0f       	add	r24, r30
    23e4:	9f 1f       	adc	r25, r31
    23e6:	08 95       	ret

000023e8 <strnlen>:
    23e8:	fc 01       	movw	r30, r24
    23ea:	61 50       	subi	r22, 0x01	; 1
    23ec:	70 40       	sbci	r23, 0x00	; 0
    23ee:	01 90       	ld	r0, Z+
    23f0:	01 10       	cpse	r0, r1
    23f2:	d8 f7       	brcc	.-10     	; 0x23ea <strnlen+0x2>
    23f4:	80 95       	com	r24
    23f6:	90 95       	com	r25
    23f8:	8e 0f       	add	r24, r30
    23fa:	9f 1f       	adc	r25, r31
    23fc:	08 95       	ret

000023fe <fputc>:
    23fe:	0f 93       	push	r16
    2400:	1f 93       	push	r17
    2402:	cf 93       	push	r28
    2404:	df 93       	push	r29
    2406:	8c 01       	movw	r16, r24
    2408:	eb 01       	movw	r28, r22
    240a:	8b 81       	ldd	r24, Y+3	; 0x03
    240c:	81 ff       	sbrs	r24, 1
    240e:	1b c0       	rjmp	.+54     	; 0x2446 <fputc+0x48>
    2410:	82 ff       	sbrs	r24, 2
    2412:	0d c0       	rjmp	.+26     	; 0x242e <fputc+0x30>
    2414:	2e 81       	ldd	r18, Y+6	; 0x06
    2416:	3f 81       	ldd	r19, Y+7	; 0x07
    2418:	8c 81       	ldd	r24, Y+4	; 0x04
    241a:	9d 81       	ldd	r25, Y+5	; 0x05
    241c:	28 17       	cp	r18, r24
    241e:	39 07       	cpc	r19, r25
    2420:	64 f4       	brge	.+24     	; 0x243a <fputc+0x3c>
    2422:	e8 81       	ld	r30, Y
    2424:	f9 81       	ldd	r31, Y+1	; 0x01
    2426:	01 93       	st	Z+, r16
    2428:	f9 83       	std	Y+1, r31	; 0x01
    242a:	e8 83       	st	Y, r30
    242c:	06 c0       	rjmp	.+12     	; 0x243a <fputc+0x3c>
    242e:	e8 85       	ldd	r30, Y+8	; 0x08
    2430:	f9 85       	ldd	r31, Y+9	; 0x09
    2432:	80 2f       	mov	r24, r16
    2434:	09 95       	icall
    2436:	89 2b       	or	r24, r25
    2438:	31 f4       	brne	.+12     	; 0x2446 <fputc+0x48>
    243a:	8e 81       	ldd	r24, Y+6	; 0x06
    243c:	9f 81       	ldd	r25, Y+7	; 0x07
    243e:	01 96       	adiw	r24, 0x01	; 1
    2440:	9f 83       	std	Y+7, r25	; 0x07
    2442:	8e 83       	std	Y+6, r24	; 0x06
    2444:	02 c0       	rjmp	.+4      	; 0x244a <fputc+0x4c>
    2446:	0f ef       	ldi	r16, 0xFF	; 255
    2448:	1f ef       	ldi	r17, 0xFF	; 255
    244a:	c8 01       	movw	r24, r16
    244c:	df 91       	pop	r29
    244e:	cf 91       	pop	r28
    2450:	1f 91       	pop	r17
    2452:	0f 91       	pop	r16
    2454:	08 95       	ret

00002456 <__ultoa_invert>:
    2456:	fa 01       	movw	r30, r20
    2458:	aa 27       	eor	r26, r26
    245a:	28 30       	cpi	r18, 0x08	; 8
    245c:	51 f1       	breq	.+84     	; 0x24b2 <__ultoa_invert+0x5c>
    245e:	20 31       	cpi	r18, 0x10	; 16
    2460:	81 f1       	breq	.+96     	; 0x24c2 <__ultoa_invert+0x6c>
    2462:	e8 94       	clt
    2464:	6f 93       	push	r22
    2466:	6e 7f       	andi	r22, 0xFE	; 254
    2468:	6e 5f       	subi	r22, 0xFE	; 254
    246a:	7f 4f       	sbci	r23, 0xFF	; 255
    246c:	8f 4f       	sbci	r24, 0xFF	; 255
    246e:	9f 4f       	sbci	r25, 0xFF	; 255
    2470:	af 4f       	sbci	r26, 0xFF	; 255
    2472:	b1 e0       	ldi	r27, 0x01	; 1
    2474:	3e d0       	rcall	.+124    	; 0x24f2 <__ultoa_invert+0x9c>
    2476:	b4 e0       	ldi	r27, 0x04	; 4
    2478:	3c d0       	rcall	.+120    	; 0x24f2 <__ultoa_invert+0x9c>
    247a:	67 0f       	add	r22, r23
    247c:	78 1f       	adc	r23, r24
    247e:	89 1f       	adc	r24, r25
    2480:	9a 1f       	adc	r25, r26
    2482:	a1 1d       	adc	r26, r1
    2484:	68 0f       	add	r22, r24
    2486:	79 1f       	adc	r23, r25
    2488:	8a 1f       	adc	r24, r26
    248a:	91 1d       	adc	r25, r1
    248c:	a1 1d       	adc	r26, r1
    248e:	6a 0f       	add	r22, r26
    2490:	71 1d       	adc	r23, r1
    2492:	81 1d       	adc	r24, r1
    2494:	91 1d       	adc	r25, r1
    2496:	a1 1d       	adc	r26, r1
    2498:	20 d0       	rcall	.+64     	; 0x24da <__ultoa_invert+0x84>
    249a:	09 f4       	brne	.+2      	; 0x249e <__ultoa_invert+0x48>
    249c:	68 94       	set
    249e:	3f 91       	pop	r19
    24a0:	2a e0       	ldi	r18, 0x0A	; 10
    24a2:	26 9f       	mul	r18, r22
    24a4:	11 24       	eor	r1, r1
    24a6:	30 19       	sub	r19, r0
    24a8:	30 5d       	subi	r19, 0xD0	; 208
    24aa:	31 93       	st	Z+, r19
    24ac:	de f6       	brtc	.-74     	; 0x2464 <__ultoa_invert+0xe>
    24ae:	cf 01       	movw	r24, r30
    24b0:	08 95       	ret
    24b2:	46 2f       	mov	r20, r22
    24b4:	47 70       	andi	r20, 0x07	; 7
    24b6:	40 5d       	subi	r20, 0xD0	; 208
    24b8:	41 93       	st	Z+, r20
    24ba:	b3 e0       	ldi	r27, 0x03	; 3
    24bc:	0f d0       	rcall	.+30     	; 0x24dc <__ultoa_invert+0x86>
    24be:	c9 f7       	brne	.-14     	; 0x24b2 <__ultoa_invert+0x5c>
    24c0:	f6 cf       	rjmp	.-20     	; 0x24ae <__ultoa_invert+0x58>
    24c2:	46 2f       	mov	r20, r22
    24c4:	4f 70       	andi	r20, 0x0F	; 15
    24c6:	40 5d       	subi	r20, 0xD0	; 208
    24c8:	4a 33       	cpi	r20, 0x3A	; 58
    24ca:	18 f0       	brcs	.+6      	; 0x24d2 <__ultoa_invert+0x7c>
    24cc:	49 5d       	subi	r20, 0xD9	; 217
    24ce:	31 fd       	sbrc	r19, 1
    24d0:	40 52       	subi	r20, 0x20	; 32
    24d2:	41 93       	st	Z+, r20
    24d4:	02 d0       	rcall	.+4      	; 0x24da <__ultoa_invert+0x84>
    24d6:	a9 f7       	brne	.-22     	; 0x24c2 <__ultoa_invert+0x6c>
    24d8:	ea cf       	rjmp	.-44     	; 0x24ae <__ultoa_invert+0x58>
    24da:	b4 e0       	ldi	r27, 0x04	; 4
    24dc:	a6 95       	lsr	r26
    24de:	97 95       	ror	r25
    24e0:	87 95       	ror	r24
    24e2:	77 95       	ror	r23
    24e4:	67 95       	ror	r22
    24e6:	ba 95       	dec	r27
    24e8:	c9 f7       	brne	.-14     	; 0x24dc <__ultoa_invert+0x86>
    24ea:	00 97       	sbiw	r24, 0x00	; 0
    24ec:	61 05       	cpc	r22, r1
    24ee:	71 05       	cpc	r23, r1
    24f0:	08 95       	ret
    24f2:	9b 01       	movw	r18, r22
    24f4:	ac 01       	movw	r20, r24
    24f6:	0a 2e       	mov	r0, r26
    24f8:	06 94       	lsr	r0
    24fa:	57 95       	ror	r21
    24fc:	47 95       	ror	r20
    24fe:	37 95       	ror	r19
    2500:	27 95       	ror	r18
    2502:	ba 95       	dec	r27
    2504:	c9 f7       	brne	.-14     	; 0x24f8 <__ultoa_invert+0xa2>
    2506:	62 0f       	add	r22, r18
    2508:	73 1f       	adc	r23, r19
    250a:	84 1f       	adc	r24, r20
    250c:	95 1f       	adc	r25, r21
    250e:	a0 1d       	adc	r26, r0
    2510:	08 95       	ret

00002512 <_exit>:
    2512:	f8 94       	cli

00002514 <__stop_program>:
    2514:	ff cf       	rjmp	.-2      	; 0x2514 <__stop_program>
